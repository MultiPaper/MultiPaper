From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 25 Nov 2021 17:55:12 +1000
Subject: [PATCH] Sync data files


diff --git a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
index c8cdcf40e45f5c6270f9b124f0333643266e2858..b1381b1b57ba8f5cf42ed84f70960de83feece5d 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/SavedData.java
@@ -7,6 +7,7 @@ import net.minecraft.SharedConstants;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public abstract class SavedData {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -33,7 +34,7 @@ public abstract class SavedData {
             compoundTag.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
 
             try {
-                NbtIo.writeCompressed(compoundTag, file);
+                MultiPaper.writeData(file.getPath(), compoundTag); // NbtIo.writeCompressed(compoundTag, file); // MultiPaper
             } catch (IOException var4) {
                 LOGGER.error("Could not save data {}", this, var4);
             }
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index b2845ed8d28627178589da3d2224cd9edd29c31e..0476eb0e139fbc2762d68fc22228eb0416d85ad4 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -326,7 +326,8 @@ public class MapItemSavedData extends SavedData {
             --this.trackedDecorationCount;
         }
 
-        this.setDecorationsDirty();
+        if (mapicon != null) // MultiPaper - don't set dirty unless it's actually removed something
+        this.setDecorationsDirty(mapicon.getType()); // MultiPaper - track the decoration being made dirty
     }
 
     public static void addTargetDecoration(ItemStack stack, BlockPos pos, String id, MapDecoration.Type type) {
@@ -421,7 +422,7 @@ public class MapItemSavedData extends SavedData {
                 ++this.trackedDecorationCount;
             }
 
-            this.setDecorationsDirty();
+            this.setDecorationsDirty(mapicon.getType()); // MultiPaper - track the decoration being made dirty
         }
 
     }
@@ -445,7 +446,8 @@ public class MapItemSavedData extends SavedData {
 
     }
 
-    public void setDecorationsDirty() {
+    public void setDecorationsDirty(MapDecoration.Type type) { // MultiPaper - track the decoration being made dirty
+        if (type != MapDecoration.Type.FRAME && type != MapDecoration.Type.PLAYER && type != MapDecoration.Type.PLAYER_OFF_LIMITS && type != MapDecoration.Type.PLAYER_OFF_MAP) // MultiPaper - don't save for these decorations
         this.setDirty();
         this.carriedBy.forEach(MapItemSavedData.HoldingPlayer::markDecorationsDirty);
     }
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index 2da78bc43af715fe399eac1d83b3bf6e8fb8afac..dfc726ecae49af4eb9dc646def96b7d08eb2320b 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -3,11 +3,8 @@ package net.minecraft.world.level.storage;
 import com.google.common.collect.Maps;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.DataInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.PushbackInputStream;
+
+import java.io.*;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.function.Supplier;
@@ -19,6 +16,7 @@ import net.minecraft.nbt.NbtUtils;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.saveddata.SavedData;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public class DimensionDataStorage {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -61,8 +59,11 @@ public class DimensionDataStorage {
     private <T extends SavedData> T readSavedData(Function<CompoundTag, T> readFunction, String id) {
         try {
             File file = this.getDataFile(id);
-            if (file.exists()) {
+            if (true || file.exists()) { // MultiPaper
                 CompoundTag compoundTag = this.readTagFromDisk(id, SharedConstants.getCurrentVersion().getWorldVersion());
+
+                if (compoundTag == null) return null; // MultiPaper
+
                 return readFunction.apply(compoundTag.getCompound("data"));
             }
         } catch (Exception var5) {
@@ -80,8 +81,15 @@ public class DimensionDataStorage {
         File file = this.getDataFile(id);
 
         CompoundTag var8;
+        // MultiPaper start
+        byte[] data = MultiPaper.readData(file.getPath());
+        if (data == null || data.length == 0) {
+            return null;
+        }
         try (
-            FileInputStream fileInputStream = new FileInputStream(file);
+            // FileInputStream fileInputStream = new FileInputStream(file);
+            ByteArrayInputStream fileInputStream = new ByteArrayInputStream(data);
+        // MultiPaper end
             PushbackInputStream pushbackInputStream = new PushbackInputStream(fileInputStream, 2);
         ) {
             CompoundTag compoundTag;
@@ -126,4 +134,10 @@ public class DimensionDataStorage {
 
         });
     }
+
+    // MultiPaper start - save a PersistentBase
+    public void save(String id, SavedData savedData) {
+        savedData.save(this.getDataFile(id));
+    }
+    // MultiPaper end
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 5fa71bda2a8b1665a2e42df61e923068f368f431..1ff94c4e203f26c9d68902e44af0122e6b9e31f8 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -17,6 +17,9 @@ import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.saveddata.maps.MapIndex;
+import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import net.minecraft.world.level.storage.DimensionDataStorage;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -58,6 +61,7 @@ public class MultiPaper {
     private static MultiPaperConnection multiPaperConnection = null;
     private static final Logger LOGGER = LogManager.getLogger(MultiPaper.class.getSimpleName());
     public static boolean levelDatNeedsSaving = false;
+    private static long last1Seconds = System.currentTimeMillis();
 
     public static MultiPaperConnection getConnection() {
         if (multiPaperConnection == null) {
@@ -93,6 +97,19 @@ public class MultiPaper {
                 level.saveIncrementally(true);
             }
         }
+        
+        boolean hasBeen1Seconds = last1Seconds < System.currentTimeMillis() - 1000;
+
+        if (hasBeen1Seconds) last1Seconds = System.currentTimeMillis();
+
+        Bukkit.getWorlds().forEach(world -> {
+            DimensionDataStorage persistentData = ((CraftWorld) world).getHandle().getDataStorage();
+            persistentData.cache.forEach((key, value) -> {
+                if (value instanceof MapIndex || (value instanceof MapItemSavedData && hasBeen1Seconds)) {
+                    persistentData.save(key, value);
+                }
+            });
+        });
     }
 
     public static void sendTickTime(long time, double tps) {
@@ -400,6 +417,22 @@ public class MultiPaper {
         getConnection().send(new WriteUidMessage(world, data), message -> { /* do nothing */ });
     }
 
+    public static byte[] readData(String path) {
+        File pathFile = new File(path);
+        String file = pathFile.getName().substring(0, pathFile.getName().length() - 4); // Remove .dat suffix
+        if (getConnection().dataCache.containsKey(file)) {
+            return getConnection().dataCache.remove(file);
+        }
+
+        return getConnection().sendAndAwaitReply(new ReadDataMessage(path), DataMessageReply.class).thenApply(message -> message.data).join();
+    }
+
+    public static void writeData(String path, CompoundTag compoundTag) throws IOException {
+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+        NbtIo.writeCompressed(compoundTag, buffer);
+        getConnection().send(new WriteDataMessage(path, buffer.toByteArray()), message -> { /* do nothing */ });
+    }
+
     private static String getWorld(File path) {
         do {
             path = path.getParentFile();
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 47aec762c8583f0f5af89ce13eb5e5be626249c0..8fe8e8a4ba2764f3e91b6c90290bdcbb56402cd7 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -1,5 +1,6 @@
 package puregero.multipaper;
 
+import com.google.common.collect.Maps;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandler;
@@ -18,6 +19,9 @@ import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
 import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.SendChunkPacket;
 import puregero.multipaper.externalserverprotocol.SendTickListPacket;
@@ -25,6 +29,7 @@ import puregero.multipaper.mastermessagingprotocol.MessageBootstrap;
 import puregero.multipaper.mastermessagingprotocol.messages.masterbound.*;
 import puregero.multipaper.mastermessagingprotocol.messages.serverbound.*;
 
+import java.io.File;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
@@ -47,6 +52,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
     private final Set<MasterBoundMessage> unhandledRequests = ConcurrentHashMap.newKeySet();
     private final Map<String, ExternalServer> serversMap = new ConcurrentHashMap<>();
     public String secret;
+    public Map<String, byte[]> dataCache = Maps.newHashMap();
 
     public MultiPaperConnection() {
         System.setProperty("multipaper.netty.threads", System.getProperty("multipaper.netty.threads", Integer.toString(Math.min(Runtime.getRuntime().availableProcessors(), 3))));
@@ -292,4 +298,28 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
             }
         }
     }
+
+    @Override
+    public void handle(DataUpdateMessage message) {
+        String pathStr = message.path;
+        File path = new File(pathStr);
+        String file = path.getName().substring(0, path.getName().length() - 4); // Remove .dat suffix
+        while (!path.getParentFile().equals(new File(".")) && !path.getParentFile().equals(path)) {
+            path = path.getParentFile();
+        }
+
+        // Clear the data from the world's data cache
+        final File finalPath = path;
+        MultiPaper.runSync(() -> {
+            World world = Bukkit.getWorld(finalPath.getName());
+            if (world == null) {
+                LOGGER.warn("Unknown world '" + finalPath.getName() + "' in path " + pathStr + " for clearData");
+                return;
+            }
+
+            if (((CraftWorld) world).getHandle().getDataStorage().cache.remove(file) != null || dataCache.containsKey(file)) {
+                dataCache.put(file, message.data);
+            }
+        });
+    }
 }
