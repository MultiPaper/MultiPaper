From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 9 Mar 2022 21:51:38 +1000
Subject: [PATCH] Allow teleporting of external entities


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 5fd750239a4748fe0716aeac8d852827ce2931d6..bff6cc6ec5de577ec0f9032c65e9aec786f4721f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -158,6 +158,7 @@ import net.minecraft.world.entity.vehicle.MinecartFurnace;
 import net.minecraft.world.entity.vehicle.MinecartHopper;
 import net.minecraft.world.entity.vehicle.MinecartSpawner;
 import net.minecraft.world.entity.vehicle.MinecartTNT;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
@@ -190,6 +191,7 @@ import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.EntityTeleportPacket;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -579,6 +581,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             return true;
         }
 
+        // MultiPaper start
+        LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition);
+        if (chunk != null && chunk.externalOwner != null && !chunk.externalOwner.isMe()) {
+            chunk.externalOwner.getConnection().send(new EntityTeleportPacket(entity, location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()));
+        }
+        // MultiPaper end
         // entity.setLocation() throws no event, and so cannot be cancelled
         entity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
         // SPIGOT-619: Force sync head rotation also
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityTeleportPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityTeleportPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..78e64b704392645b1f194a995eaa3af50f257b7f
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityTeleportPacket.java
@@ -0,0 +1,67 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class EntityTeleportPacket extends ExternalServerPacket {
+
+    private final String world;
+    private final UUID uuid;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final float yaw;
+    private final float pitch;
+
+    public EntityTeleportPacket(Entity entity, double x, double y, double z, float yaw, float pitch) {
+        this.world = ((ServerLevel) entity.level).convertable.getLevelId();
+        this.uuid = entity.getUUID();
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        this.yaw = yaw;
+        this.pitch = pitch;
+    }
+
+    public EntityTeleportPacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.uuid = in.readUUID();
+        this.x = in.readDouble();
+        this.y = in.readDouble();
+        this.z = in.readDouble();
+        this.yaw = in.readFloat();
+        this.pitch = in.readFloat();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Entity entity = level.entityManager.knownUuids.get(uuid);
+            if (entity != null) {
+                if (entity.tracker != null && entity.tracker.serverEntity != null) {
+                    entity.tracker.serverEntity.teleportDelay = 10000;
+                }
+                entity.moveTo(x, y, z, yaw, pitch);
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index b2965ff9e8a28a0a68653fe67f44915882c7ece2..772b670198316dca9f6796e2414eae907afd3d91 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -69,6 +69,7 @@ public class ExternalServerPacketSerializer {
         addPacket(WhitelistTogglePacket.class, WhitelistTogglePacket::new);
         addPacket(DestroyBlockPacket.class, DestroyBlockPacket::new);
         addPacket(DestroyAndAckPacket.class, DestroyAndAckPacket::new);
+        addPacket(EntityTeleportPacket.class, EntityTeleportPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
