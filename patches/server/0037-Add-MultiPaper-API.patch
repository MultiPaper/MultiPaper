From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 9 Dec 2021 18:10:17 +1000
Subject: [PATCH] Add MultiPaper API


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index f7e19bb7d2ff8f8aaf061cec16462913d77c10d5..8a90fa87727337d1a12f78068b4f16db60ab13a9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -49,6 +49,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import puregero.multipaper.MultiPaper;
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.world.level.chunk.LevelChunk> weakChunk;
@@ -216,6 +217,20 @@ public class CraftChunk implements Chunk {
         return this.getWorld().unloadChunk(this.getX(), this.getZ(), save);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isExternalChunk() {
+        return MultiPaper.isChunkExternal(this);
+    }
+
+    @Override
+    public boolean isLocalChunk() {
+        return MultiPaper.isChunkLocal(this);
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean isForceLoaded() {
         return this.getWorld().isChunkForceLoaded(this.getX(), this.getZ());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index bccfbb58a1c8b86cb68f936c99a894e0c8f7e6db..536b802de9b50688a727171ae339723677823cf9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -257,7 +257,9 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.CraftMultiPaperNotificationManager;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.SubscribeToWorldPacket;
 import puregero.multipaper.permissions.MultiPaperPermissions;
 
@@ -288,6 +290,7 @@ public final class CraftServer implements Server {
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
     private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
+    private final CraftMultiPaperNotificationManager multipaperNotificationManager = new CraftMultiPaperNotificationManager(); // MultiPaper
     private File container;
     private WarningState warningState = WarningState.DEFAULT;
     public String minimumAPI;
@@ -919,6 +922,18 @@ public final class CraftServer implements Server {
         return this.servicesManager;
     }
 
+    // MultiPaper start
+    @Override
+    public CraftMultiPaperNotificationManager getMultiPaperNotificationManager() {
+        return this.multipaperNotificationManager;
+    }
+
+    @Override
+    public @NotNull String getLocalServerName() {
+        return MultiPaperConfiguration.get().masterConnection.myName;
+    }
+    // MultiPaper end
+
     @Override
     public List<World> getWorlds() {
         return new ArrayList<World>(this.worlds.values());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 4a75edd3c0adbe48b9927ed9fc86a2819136d821..7f656e36368a5be720a58051913f0c13ef6b7cb2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -530,6 +530,20 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.isChunkLoaded(x, z);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isChunkExternal(int x, int z) {
+        return MultiPaper.isChunkExternal(world.getChunkIfLoaded(x, z));
+    }
+
+    @Override
+    public boolean isChunkLocal(int x, int z) {
+        return MultiPaper.isChunkLocal(world.getChunkIfLoaded(x, z));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean loadChunk(int x, int z, boolean generate) {
         org.spigotmc.AsyncCatcher.catchOp("chunk load"); // Spigot
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 350cbf64c17938021002d5fd67176c44b398231e..75744aad6eee687c1ae7d4878ce0a4b550e70ded 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -66,6 +66,7 @@ import org.bukkit.util.BlockVector;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import puregero.multipaper.MultiPaper;
 
 public class CraftBlock implements Block {
     private final net.minecraft.world.level.LevelAccessor world;
@@ -463,6 +464,20 @@ public class CraftBlock implements Block {
         return this.getBlockPower(BlockFace.SELF);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isInExternalChunk() {
+        return MultiPaper.isChunkExternal((ServerLevel) world, position);
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return MultiPaper.isChunkLocal((ServerLevel) world, position);
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean isEmpty() {
         return this.getNMS().isAir();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index d1c16a80c2cc4f0e96f3a7f04e5bc69657206f97..65e1c03729b2f87aef6612a8bae621a14a86def4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -190,6 +190,7 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import puregero.multipaper.MultiPaper;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -632,6 +633,20 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.entity.getId();
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isInExternalChunk() {
+        return MultiPaper.isChunkExternal(entity.level.getChunkIfLoaded(entity.blockPosition()));
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return MultiPaper.isChunkLocal(entity.level.getChunkIfLoaded(entity.blockPosition()));
+    }
+
+    // MultiPaper end
+
     @Override
     public int getFireTicks() {
         return entity.remainingFireTicks;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b8df48cb50650e2319ac1d6cd2354a591ff89c53..d1bc6f1fc191f8fc9fbf99d398697567e4eba202 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -26,6 +26,7 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.WeakHashMap;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
@@ -156,13 +157,18 @@ import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerDataUpdatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerSayChatPacket;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0;
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
+    public ConcurrentHashMap<String, String> data = new ConcurrentHashMap<>(); // MultiPaper
+    public ConcurrentHashMap<String, String> persistentData = new ConcurrentHashMap<>(); // MultiPaper
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<UUID, Set<WeakReference<Plugin>>> hiddenEntities = new HashMap<>();
@@ -312,6 +318,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (getHandle().connection == null) return null;
         return getHandle().connection.connection.virtualHost;
     }
+
+    @Override
+    public boolean isInExternalChunk() {
+        return false;
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return false;
+    }
     // Paper end
 
     @Override
@@ -1409,6 +1425,60 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isExternalPlayer() {
+        return MultiPaper.isExternalPlayer(this);
+    }
+
+    @Override
+    public boolean isLocalPlayer() {
+        return MultiPaper.isRealPlayer(this);
+    }
+
+    @Override
+    public String getData(String key) {
+        return data.get(key);
+    }
+
+    @Override
+    public void setData(String key, String value) {
+        if (value != null) {
+            data.put(key, value);
+        } else {
+            data.remove(key);
+        }
+        MultiPaper.broadcastPacketToExternalServers(getHandle(), new PlayerDataUpdatePacket(this, false, key, value));
+    }
+
+    @Override
+    public String getPersistentData(String key) {
+        return persistentData.get(key);
+    }
+
+    @Override
+    public void setPersistentData(String key, String value) {
+        if (value != null) {
+            persistentData.put(key, value);
+        } else {
+            persistentData.remove(key);
+        }
+        MultiPaper.broadcastPacketToExternalServers(getHandle(), new PlayerDataUpdatePacket(this, true, key, value));
+    }
+
+    @Override
+    public void chatOnOtherServers(@NotNull String msg) {
+        MultiPaper.broadcastPacketToExternalServers(getHandle(), new PlayerSayChatPacket(getHandle(), msg));
+    }
+
+    @Override
+    public String getExternalServerName() {
+        return getHandle() instanceof ExternalPlayer externalPlayer ? externalPlayer.externalServerConnection.externalServer.getName() : null;
+    }
+
+    // MultiPaper end
+
     @Override
     public Location getBedLocation() {
         Preconditions.checkState(isSleeping(), "Not sleeping");
@@ -1959,6 +2029,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
+
+        // MultiPaper start - store persistent data
+        if (nbttagcompound.contains("MultiPaperPersistentData")) {
+            CompoundTag multipaperPersistentData = nbttagcompound.getCompound("MultiPaperPersistentData");
+            multipaperPersistentData.tags.forEach((key, tag) -> persistentData.put(key, tag.getAsString()));
+        }
+        // MultiPaper end
     }
 
     public void setExtraData(CompoundTag nbttagcompound) {
@@ -1988,6 +2065,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         paper.putLong("LastLogin", handle.loginTime);
         paper.putLong("LastSeen", System.currentTimeMillis());
         // Paper end
+
+        // MultiPaper start - store persistent data
+        CompoundTag multipaperPersistentData = new CompoundTag();
+        persistentData.forEach(multipaperPersistentData::putString);
+        nbttagcompound.put("MultiPaperPersistentData", multipaperPersistentData);
+        // MultiPaper end
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/CraftMultiPaperNotificationManager.java b/src/main/java/puregero/multipaper/CraftMultiPaperNotificationManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..c22d22b81ca2d6ca2b7ebf02e73d3ad5b4aa3bef
--- /dev/null
+++ b/src/main/java/puregero/multipaper/CraftMultiPaperNotificationManager.java
@@ -0,0 +1,89 @@
+package puregero.multipaper;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
+import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
+import org.bukkit.MultiPaperNotificationManager;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.plugin.Plugin;
+import puregero.multipaper.externalserverprotocol.PluginNotificationPacket;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+
+public class CraftMultiPaperNotificationManager implements MultiPaperNotificationManager {
+
+    private final HashMap<String, List<Listener>> listeners = new HashMap<>();
+
+    @Override
+    public void on(Plugin plugin, String channel, Consumer<byte[]> callback) {
+        on(plugin, channel, (data, replyFunction) -> callback.accept(data));
+    }
+
+    @Override
+    public void on(Plugin plugin, String channel, BiConsumer<byte[], BiConsumer<String, byte[]>> callbackWithReply) {
+        listeners.computeIfAbsent(channel, key -> new ArrayList<>()).add(new Listener(plugin, callbackWithReply));
+    }
+
+    @Override
+    public void notify(String channel, byte[] data) {
+        MultiPaper.broadcastPacketToExternalServers(new PluginNotificationPacket(channel, data));
+    }
+
+    @Override
+    public void notify(Chunk chunk, String channel, byte[] data) {
+        NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(((CraftWorld) chunk.getWorld()).getHandle(), chunk.getX(), chunk.getZ());
+
+        if (newChunkHolder == null) {
+            new IllegalStateException("Chunk " + chunk.getWorld().getName() + "," + chunk.getX() + "," + chunk.getZ() + " is not loaded, could not send notification").printStackTrace();
+            return;
+        }
+
+        MultiPaper.broadcastPacketToExternalServers(newChunkHolder.externalSubscribers, () -> new PluginNotificationPacket(channel, data));
+    }
+
+    public void onNotification(ExternalServerConnection sender, String channel, byte[] data) {
+        List<Listener> listenerList = listeners.get(channel);
+        if (listenerList != null) {
+            Iterator<Listener> iterator = listenerList.iterator();
+
+            while (iterator.hasNext()) {
+                Listener listener = iterator.next();
+                Plugin plugin = listener.plugin.get();
+
+                if (plugin == null || !plugin.isEnabled()) {
+                    // Remove disabled plugins
+                    iterator.remove();
+                } else {
+                    try {
+                        listener.consumer.accept(data, (replyChannel, replyData) -> sender.send(new PluginNotificationPacket(replyChannel, replyData)));
+                    } catch (Throwable ex) {
+                        String msg = "Could not pass notification " + channel + " to " + plugin.getDescription().getFullName();
+                        Bukkit.getLogger().log(Level.SEVERE, msg, ex);
+                    }
+                }
+            }
+
+            if (listenerList.isEmpty()) {
+                listeners.remove(channel);
+            }
+        }
+    }
+
+    private static class Listener {
+        // Weak reference the plugin so that we don't keep an entire plugin loaded in memory after a reload
+        private final WeakReference<Plugin> plugin;
+        private final BiConsumer<byte[], BiConsumer<String, byte[]>> consumer;
+
+        public Listener(Plugin plugin, BiConsumer<byte[], BiConsumer<String, byte[]>> consumer) {
+            this.plugin = new WeakReference<>(plugin);
+            this.consumer = consumer;
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 7dd289fd1155bfe6f519fd49d142ac7e1bf1c0a7..ee825bd15a2c4fd12e2681eb8809ccf0da31826b 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -50,6 +50,9 @@ public class ExternalServerPacketSerializer {
         addPacket(AddItemToContainerPacket.class, AddItemToContainerPacket::new);
         addPacket(PullItemFromContainerPacket.class, PullItemFromContainerPacket::new);
         addPacket(MobSetNavigationGoalPacket.class, MobSetNavigationGoalPacket::new);
+        addPacket(PlayerDataUpdatePacket.class, PlayerDataUpdatePacket::new);
+        addPacket(PluginNotificationPacket.class, PluginNotificationPacket::new);
+        addPacket(PlayerSayChatPacket.class, PlayerSayChatPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 156d250bfefb9e244aa6a4c65b4b6444df066b0f..6044d5180ee2ca216d5a810c7d0d26759ce212e3 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -18,7 +18,11 @@ import puregero.multipaper.*;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class PlayerCreatePacket extends ExternalServerPacket {
 
@@ -36,6 +40,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
     private final short port;
     private final String advancements;
     private final String stats;
+    private final ConcurrentHashMap<String, String> data;
+    private final ConcurrentHashMap<String, String> persistentData;
 
     private PlayerCreatePacket(ServerPlayer player) {
         this.gameProfile = player.gameProfile;
@@ -50,6 +56,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         this.port = (short) ((InetSocketAddress) player.connection.connection.address).getPort();
         this.advancements = player.getAdvancements().generateJson().toString();
         this.stats = player.getStats().toJson();
+        this.data = player.getBukkitEntity().data;
+        this.persistentData = player.getBukkitEntity().persistentData;
     }
 
     public PlayerCreatePacket(FriendlyByteBuf in) {
@@ -66,6 +74,18 @@ public class PlayerCreatePacket extends ExternalServerPacket {
 
         advancements = in.readUtf(Integer.MAX_VALUE / 6); // divide by 6 cause mojang's code doesn't allow for a full 2^31-1 max length
         stats = in.readUtf(Integer.MAX_VALUE / 6);
+
+        data = new ConcurrentHashMap<>();
+        int dataLength = in.readInt();
+        for (int i = 0; i < dataLength; i++) {
+            data.put(in.readUtf(), in.readUtf());
+        }
+
+        persistentData = new ConcurrentHashMap<>();
+        int persistentDataLength = in.readInt();
+        for (int i = 0; i < persistentDataLength; i++) {
+            persistentData.put(in.readUtf(), in.readUtf());
+        }
     }
 
     @Override
@@ -83,6 +103,20 @@ public class PlayerCreatePacket extends ExternalServerPacket {
 
         out.writeUtf(advancements, Integer.MAX_VALUE / 6); // divide by 6 cause mojang's code doesn't allow for a full 2^31-1 max length
         out.writeUtf(stats, Integer.MAX_VALUE / 6);
+
+        Collection<Map.Entry<String, String>> dataEntries = new ArrayList<>(data.entrySet());
+        out.writeInt(dataEntries.size());
+        for (Map.Entry<String, String> entry : dataEntries) {
+            out.writeUtf(entry.getKey());
+            out.writeUtf(entry.getValue());
+        }
+
+        Collection<Map.Entry<String, String>> persistentDataEntries = new ArrayList<>(persistentData.entrySet());
+        out.writeInt(persistentDataEntries.size());
+        for (Map.Entry<String, String> entry : persistentDataEntries) {
+            out.writeUtf(entry.getKey());
+            out.writeUtf(entry.getValue());
+        }
     }
 
     @Override
@@ -102,7 +136,9 @@ public class PlayerCreatePacket extends ExternalServerPacket {
                 e.printStackTrace();
             }
 
-            ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, advancements, stats);
+            ExternalPlayer player = ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, advancements, stats);
+            player.getBukkitEntity().data = data;
+            player.getBukkitEntity().persistentData = persistentData;
         });
     }
 
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..2eb0f073863339d410d360a19b39092f38973a22
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java
@@ -0,0 +1,70 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerDataUpdatePacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final boolean persistent;
+    private final String key;
+    private final String value;
+
+    public PlayerDataUpdatePacket(Player player, boolean persistent, String key, String value) {
+        this.uuid = player.getUniqueId();
+        this.persistent = persistent;
+        this.key = key;
+        this.value = value;
+    }
+
+    public PlayerDataUpdatePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        persistent = in.readBoolean();
+        key = in.readUtf();
+        if (in.readBoolean()) {
+            value = in.readUtf();
+        } else {
+            value = null;
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeBoolean(persistent);
+        out.writeUtf(key);
+        out.writeBoolean(value != null);
+        if (value != null) {
+            out.writeUtf(value);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player != null) {
+                if (value != null) {
+                    if (persistent) {
+                        player.getBukkitEntity().persistentData.put(key, value);
+                    } else {
+                        player.getBukkitEntity().data.put(key, value);
+                    }
+                } else {
+                    if (persistent) {
+                        player.getBukkitEntity().persistentData.remove(key);
+                    } else {
+                        player.getBukkitEntity().data.remove(key);
+                    }
+                }
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerSayChatPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerSayChatPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..220b4d37444d7bc584ca8e78a545d25ccc6ceb74
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerSayChatPacket.java
@@ -0,0 +1,55 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerSayChatPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerSayChatPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final String message;
+
+    public PlayerSayChatPacket(ServerPlayer player, String message) {
+        this.uuid = player.getUUID();
+        this.message = message;
+    }
+
+    public PlayerSayChatPacket(FriendlyByteBuf in) {
+        this.uuid = in.readUUID();
+        this.message = in.readUtf();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(this.uuid);
+        out.writeUtf(this.message);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to run an action on a non-existent player with uuid " + uuid);
+                return;
+            }
+
+            player.getBukkitEntity().chat(message);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PluginNotificationPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PluginNotificationPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..6c24a0245419f7d88c8ac3a05be9905265af8412
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PluginNotificationPacket.java
@@ -0,0 +1,33 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+public class PluginNotificationPacket extends ExternalServerPacket {
+    private final String channel;
+    private final byte[] data;
+
+    public PluginNotificationPacket(String channel, byte[] data) {
+        this.channel = channel;
+        this.data = data;
+    }
+
+    public PluginNotificationPacket(FriendlyByteBuf in) {
+        channel = in.readUtf();
+        data = in.readByteArray();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(channel);
+        out.writeByteArray(data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> ((CraftServer) Bukkit.getServer()).getMultiPaperNotificationManager().onNotification(connection, channel, data));
+    }
+}
