From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 8 Mar 2022 00:20:58 +1000
Subject: [PATCH] Destroy blocks on external servers


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index eea27d2c7ec6dfdd61ab49790219a18743ed10bf..b20ad067f0891c7e15f7555e346644581a626cd5 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -235,6 +235,7 @@ public class ServerPlayer extends Player {
     private int containerCounter;
     @Nullable public ExternalServer openContainer; // MultiPaper
     public int latency;
+    public boolean destroyAndAckHandledByExternalServer = false; /// MultiPaper
     public boolean wonGame;
     public int containerUpdateDelay; // Paper // MultiPaper - make public
     public long loginTime; // Paper
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 744c936c3aa9bd7bcf43ac3d78a08ece9cde87c3..1e414cbb85d075f17c42da34fdf2dc4b21aaeb78 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -3,6 +3,8 @@ package net.minecraft.server.level;
 import com.mojang.logging.LogUtils;
 import java.util.Objects;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -44,6 +46,9 @@ import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
 import org.bukkit.event.player.PlayerGameModeChangeEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.DestroyAndAckPacket;
+import puregero.multipaper.externalserverprotocol.DestroyBlockPacket;
 // CraftBukkit end
 
 public class ServerPlayerGameMode {
@@ -325,6 +330,15 @@ public class ServerPlayerGameMode {
     }
 
     public void destroyAndAck(BlockPos pos, int sequence, String reason) {
+        // MultiPaper start
+        NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(this.level, pos);
+        if (MultiPaper.isChunkExternal(newChunkHolder)) {
+            newChunkHolder.externalOwner.getConnection().send(new DestroyAndAckPacket(player, pos, sequence, reason));
+            this.player.destroyAndAckHandledByExternalServer = true;
+            return;
+        }
+        // MultiPaper end
+
         if (this.destroyBlock(pos)) {
             this.debugLogging(pos, true, sequence, reason);
         } else {
@@ -335,6 +349,13 @@ public class ServerPlayerGameMode {
     }
 
     public boolean destroyBlock(BlockPos pos) {
+        // MultiPaper start
+        NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(this.level, pos);
+        if (MultiPaper.isChunkExternal(newChunkHolder)) {
+            newChunkHolder.externalOwner.getConnection().send(new DestroyBlockPacket(player, pos));
+            return false;
+        }
+        // MultiPaper end
         BlockState iblockdata = this.level.getBlockState(pos);
         // CraftBukkit start - fire BlockBreakEvent
         org.bukkit.block.Block bblock = CraftBlock.at(level, pos);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 1ca016146af66e21769d35cff1bd6e91587109c6..eda0c1600a2ad74ba88cfd9fbf82b6f84c69b41e 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1988,6 +1988,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 this.player.gameMode.captureSentBlockEntities = true;
                 // Paper end - send block entities after prediction
                 this.player.gameMode.handleBlockBreakAction(blockposition, packetplayinblockdig_enumplayerdigtype, packet.getDirection(), this.player.level.getMaxBuildHeight(), packet.getSequence());
+                if (this.player.destroyAndAckHandledByExternalServer) this.player.destroyAndAckHandledByExternalServer = false; else // MultiPaper
                 this.player.connection.ackBlockChangesUpTo(packet.getSequence());
                 // Paper start - send block entities after prediction
                 this.player.gameMode.captureSentBlockEntities = false;
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/DestroyAndAckPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyAndAckPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..2a0ac229fc0f61cf84bdf58f3f4e9570d78e7fbe
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyAndAckPacket.java
@@ -0,0 +1,60 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class DestroyAndAckPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(DestroyAndAckPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final BlockPos pos;
+    private final int sequence;
+    private final String reason;
+
+    public DestroyAndAckPacket(ServerPlayer player, BlockPos pos, int sequence, String reason) {
+        this.uuid = player.getUUID();
+        this.pos = pos;
+        this.sequence = sequence;
+        this.reason = reason;
+    }
+
+    public DestroyAndAckPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        pos = in.readBlockPos();
+        sequence = in.readVarInt();
+        reason = in.readUtf();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeBlockPos(pos);
+        out.writeVarInt(sequence);
+        out.writeUtf(reason);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn(uuid + " tried to break a block but they aren't online!");
+                return;
+            }
+
+            player.gameMode.destroyAndAck(pos, sequence, reason);
+            player.destroyAndAckHandledByExternalServer = false;
+            player.connection.ackBlockChangesUpTo(sequence);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/DestroyBlockPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyBlockPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..80dce0ee6c0877605c2ab2ae25de12bfebbd1994
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/DestroyBlockPacket.java
@@ -0,0 +1,50 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class DestroyBlockPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(DestroyBlockPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final BlockPos pos;
+
+    public DestroyBlockPacket(ServerPlayer player, BlockPos pos) {
+        this.uuid = player.getUUID();
+        this.pos = pos;
+    }
+
+    public DestroyBlockPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        pos = in.readBlockPos();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeBlockPos(pos);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn(uuid + " tried to break a block but they aren't online!");
+                return;
+            }
+
+            player.gameMode.destroyBlock(pos);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 637a13414e4286d5e102d16a41c86444b15813c4..b2965ff9e8a28a0a68653fe67f44915882c7ece2 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -67,6 +67,8 @@ public class ExternalServerPacketSerializer {
         addPacket(DifficultyUpdatePacket.class, DifficultyUpdatePacket::new);
         addPacket(ScoreboardUpdatePacket.class, ScoreboardUpdatePacket::new);
         addPacket(WhitelistTogglePacket.class, WhitelistTogglePacket::new);
+        addPacket(DestroyBlockPacket.class, DestroyBlockPacket::new);
+        addPacket(DestroyAndAckPacket.class, DestroyAndAckPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
