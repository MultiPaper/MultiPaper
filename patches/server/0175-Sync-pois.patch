From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 7 Jul 2022 22:36:29 +1000
Subject: [PATCH] Sync pois


diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 823f852c974d096fff7ab3a6dfa1fbb81bc46b67..947e33a21a6d5bdfc0376798461d65c54409f7b5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -38,6 +38,7 @@ import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.storage.SectionStorage;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.SetPoiPacket;
 
 public class PoiManager extends SectionStorage<PoiSection> {
     public static final int MAX_VILLAGE_DISTANCE = 6;
@@ -109,6 +110,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     }
 
     long determineDelay(long coordinate) {
+        if (true) return 0; // MultiPaper - don't delay poi unloads as we don't want unwanted cached data
         if (this.isEmpty(coordinate)) {
             return 5 * 60 * 20;
         } else {
@@ -183,12 +185,14 @@ public class PoiManager extends SectionStorage<PoiSection> {
 
     public void add(BlockPos pos, Holder<PoiType> type) {
         this.getOrCreate(SectionPos.asLong(pos)).add(pos, type);
+        SetPoiPacket.broadcastUpdate(world, pos); // MultiPaper
     }
 
     public void remove(BlockPos pos) {
         this.getOrLoad(SectionPos.asLong(pos)).ifPresent((poiSet) -> {
             poiSet.remove(pos);
         });
+        SetPoiPacket.broadcastUpdate(world, pos); // MultiPaper
     }
 
     public long getCountInRange(Predicate<Holder<PoiType>> typePredicate, BlockPos pos, int radius, PoiManager.Occupancy occupationStatus) {
@@ -282,6 +286,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return Optional.ofNullable(closest).map(poi -> {
             // Paper end - re-route to faster logic
             poi.acquireTicket();
+            SetPoiPacket.broadcastUpdate(world, poi.getPos()); // MultiPaper
             return poi.getPos();
         });
     }
@@ -305,11 +310,13 @@ public class PoiManager extends SectionStorage<PoiSection> {
     }
 
     public boolean release(BlockPos pos) {
-        return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
+        boolean result = this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> { // MultiPaper - add temp "result" variable
             return poiSet.release(pos);
         }).orElseThrow(() -> {
             return Util.pauseInIde(new IllegalStateException("POI never registered at " + pos));
         });
+        SetPoiPacket.broadcastUpdate(world, pos); // MultiPaper
+        return result; // MultiPaper - add temp "result" variable
     }
 
     public boolean exists(BlockPos pos, Predicate<Holder<PoiType>> predicate) {
@@ -371,7 +378,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
 
     @Override
     protected void setDirty(long pos) {
-        super.setDirty(pos);
+        if (SetPoiPacket.shouldSavePoi()) super.setDirty(pos); // MultiPaper - don't save if modified by another server
         this.updateDistanceTracking(pos); // Paper - move to new distance tracking util
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
index cbe7c43efab549c48355e40ace09f6c454356b11..9f2f9da8e633c9b45f97765ae304e2664331ba65 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiRecord.java
@@ -45,6 +45,12 @@ public class PoiRecord {
         return this.freeTickets;
     }
 
+    // MultiPaper start
+    public void setFreeTickets(int freeTickets) {
+        this.freeTickets = freeTickets;
+    }
+    // MultiPaper end
+
     protected boolean acquireTicket() {
         if (this.freeTickets <= 0) {
             return false;
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index b71a4027a0eed467a3707c59315092ddecfd6bf3..38da8dc5bcc3db0c85d2fad30647765c228fdb4f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -127,7 +127,7 @@ public class PoiSection {
         return this.getPoiRecord(pos).map(PoiRecord::getPoiType);
     }
 
-    private Optional<PoiRecord> getPoiRecord(BlockPos pos) {
+    public Optional<PoiRecord> getPoiRecord(BlockPos pos) { // MultiPaper - make public
         return Optional.ofNullable(this.records.get(SectionPos.sectionRelativePos(pos)));
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
index 38287fad39d553a86370bbdc755c0a006615e0cf..db4c27e38784e22254b61ea7dbb0066354519f90 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -133,7 +133,7 @@ public class SectionStorage<R> extends RegionFileStorage implements AutoCloseabl
         return this.levelHeightAccessor.isOutsideBuildHeight(i);
     }
 
-    protected R getOrCreate(long pos) {
+    public R getOrCreate(long pos) { // MultiPaper - make public
         if (this.outsideStoredRange(pos)) {
             throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("sectionPos out of bounds"));
         } else {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 6eb72802377e6524e1540a1b89940cd7faed9bd8..485a2d278a20d6ed6111f71efe712d77ff19edb6 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -74,6 +74,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerUseBlockPacket.class, PlayerUseBlockPacket::new);
         addPacket(RaidUpdatePacket.class, RaidUpdatePacket::new);
         addPacket(RaidJoinPacket.class, RaidJoinPacket::new);
+        addPacket(SetPoiPacket.class, SetPoiPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SetPoiPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SetPoiPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..8877e2e8ef06ec24ef05a1decdcdf530faffb5a8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SetPoiPacket.java
@@ -0,0 +1,101 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.ai.village.poi.PoiManager;
+import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.entity.ai.village.poi.PoiSection;
+import net.minecraft.world.entity.ai.village.poi.PoiType;
+import net.minecraft.world.level.chunk.LevelChunk;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.Optional;
+import java.util.UUID;
+
+public class SetPoiPacket extends ExternalServerPacket {
+    private static final Logger LOGGER = LogManager.getLogger(SetPoiPacket.class.getSimpleName());
+
+    private static boolean handlingPacket = false;
+    private final UUID world;
+    private final BlockPos pos;
+    private final Optional<ResourceKey<PoiType>> optionalKey;
+    private final int freeTickets;
+
+    public SetPoiPacket(ServerLevel level, BlockPos pos, Optional<Holder<PoiType>> holderOptional, int freeTickets) {
+        this.world = level.getWorld().getUID();
+        this.pos = pos;
+        this.optionalKey = holderOptional.map(Holder::unwrapKey).flatMap(optional -> optional);
+        this.freeTickets = freeTickets;
+    }
+
+    public static void broadcastUpdate(ServerLevel level, BlockPos pos) {
+        if (!handlingPacket) {
+            LevelChunk chunk = level.getChunkIfLoaded(pos);
+            if (chunk != null) {
+                Optional<PoiSection> poiSectionOptional = Optional.ofNullable(level.getPoiManager().get(SectionPos.asLong(pos))).flatMap(optional -> optional);
+                poiSectionOptional.ifPresent(poiSection -> {
+                    poiSection.getPoiRecord(pos).ifPresentOrElse(poiRecord -> {
+                        MultiPaper.broadcastPacketToExternalServers(chunk.externalSubscribers, () -> new SetPoiPacket(level, pos, Optional.of(poiRecord.getPoiType()), poiRecord.getFreeTickets()));
+                    }, () -> {
+                        MultiPaper.broadcastPacketToExternalServers(chunk.externalSubscribers, () -> new SetPoiPacket(level, pos, Optional.empty(), 0));
+                    });
+                });
+            }
+        }
+    }
+
+    public SetPoiPacket(FriendlyByteBuf in) {
+        this.world = in.readUUID();
+        this.pos = in.readBlockPos();
+        this.optionalKey = in.readOptional(in2 -> in2.readResourceKey(Registry.POINT_OF_INTEREST_TYPE_REGISTRY));
+        this.freeTickets = in.readVarInt();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(this.world);
+        out.writeBlockPos(this.pos);
+        out.writeOptional(this.optionalKey, FriendlyByteBuf::writeResourceKey);
+        out.writeVarInt(this.freeTickets);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingPacket = true;
+            World world = Bukkit.getWorld(this.world);
+            if (world instanceof CraftWorld craftWorld) {
+                PoiManager poiManager = craftWorld.getHandle().getPoiManager();
+                this.optionalKey.ifPresentOrElse(key -> {
+                    PoiSection poiSection = poiManager.getOrCreate(SectionPos.asLong(pos));
+                    PoiRecord record = poiSection.getPoiRecord(pos).orElse(null);
+                    if (record == null || !record.getPoiType().is(key)) {
+                        poiManager.add(this.pos, Registry.POINT_OF_INTEREST_TYPE.getHolderOrThrow(key));
+                        record = poiSection.getPoiRecord(pos).orElse(null);
+                    }
+                    if (record != null) {
+                        record.setFreeTickets(freeTickets);
+                    }
+                }, () -> {
+                    poiManager.remove(this.pos);
+                });
+            }
+            handlingPacket = false;
+        });
+    }
+
+    public static boolean shouldSavePoi() {
+        return !handlingPacket;
+    }
+}
