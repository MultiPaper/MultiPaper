From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 20 Dec 2021 17:35:31 +1000
Subject: [PATCH] Sync statistics


diff --git a/src/main/java/net/minecraft/stats/StatsCounter.java b/src/main/java/net/minecraft/stats/StatsCounter.java
index 6eff3bdab7ce445b703b983ddbebac0470559a53..6d8c431c115458a5d0f6bd5151e12f3df7b8626e 100644
--- a/src/main/java/net/minecraft/stats/StatsCounter.java
+++ b/src/main/java/net/minecraft/stats/StatsCounter.java
@@ -4,6 +4,7 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.world.entity.player.Player;
+import puregero.multipaper.MultiPaperStatHandler;
 
 public class StatsCounter {
 
@@ -22,6 +23,7 @@ public class StatsCounter {
             return;
         }
         // CraftBukkit end
+        MultiPaperStatHandler.onStatIncrease(player, stat, value); // MultiPaper
         this.setValue(player, stat, j);
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 9f1fb218803f14dafd0c7b961667b3849c55e809..431dfa3509bd9da59ec67b2d9c76429dbf0c834d 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -67,6 +67,7 @@ public class MultiPaper {
     private final static List<ChunkHolder> visibleChunksToCheck = new ArrayList<>();
     public static boolean levelDatNeedsSaving = false;
     private static long last1Seconds = System.currentTimeMillis();
+    private static long last10Seconds = System.currentTimeMillis();
 
     public static MultiPaperConnection getConnection() {
         if (multiPaperConnection == null) {
@@ -153,6 +154,14 @@ public class MultiPaper {
         }
 
         MultiPaperExternalBlocksHandler.tick();
+
+        boolean hasBeen10Seconds = last10Seconds < System.currentTimeMillis() - 10000;
+
+        if (hasBeen10Seconds) {
+            last10Seconds = System.currentTimeMillis();
+
+            MultiPaperStatHandler.sendIncreases();
+        }
     }
 
     public static void sendTickTime(long time, double tps) {
diff --git a/src/main/java/puregero/multipaper/MultiPaperStatHandler.java b/src/main/java/puregero/multipaper/MultiPaperStatHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..37158bb5e836ca29ad3f82992c089935205d920a
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperStatHandler.java
@@ -0,0 +1,33 @@
+package puregero.multipaper;
+
+import com.destroystokyo.paper.util.pooled.PooledObjects;
+import net.minecraft.stats.Stat;
+import net.minecraft.world.entity.player.Player;
+import puregero.multipaper.externalserverprotocol.PlayerStatsIncreasePacket;
+
+import java.util.HashMap;
+
+/**
+ * Pool all stat increase together and only update other servers of any increases every so often
+ */
+public class MultiPaperStatHandler {
+    private static final HashMap<Player, HashMap<Stat<?>, Integer>> statIncreases = new HashMap<>();
+    public static final PooledObjects<HashMap<Stat<?>, Integer>> hashMapPool = new PooledObjects<>(HashMap::new, 1024);
+
+    public static void onStatIncrease(Player player, Stat<?> stat, int value) {
+        HashMap<Stat<?>, Integer> stats = statIncreases.computeIfAbsent(player, key -> hashMapPool.acquire());
+
+        int newValue = (int) Math.min((long) stats.getOrDefault(stat, 0) + (long) value, 2147483647L);
+        stats.put(stat, newValue);
+    }
+
+    public static void sendIncreases() {
+        statIncreases.forEach((player, stats) -> {
+            MultiPaper.broadcastPacketToExternalServers(new PlayerStatsIncreasePacket(player, stats));
+
+            stats.clear();
+            hashMapPool.release(stats);
+        });
+        statIncreases.clear();
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index e10b37b767edbd23da56f68d0b6bfeccedae0190..c559c3dc0f927dfa0c7d24d39323ba484e43a899 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -58,6 +58,7 @@ public class ExternalServerPacketSerializer {
         addPacket(GameRuleUpdatePacket.class, GameRuleUpdatePacket::new);
         addPacket(AdvancementGrantProgressPacket.class, AdvancementGrantProgressPacket::new);
         addPacket(WeatherUpdatePacket.class, WeatherUpdatePacket::new);
+        addPacket(PlayerStatsIncreasePacket.class, PlayerStatsIncreasePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerStatsIncreasePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerStatsIncreasePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..673859263b2e63d1a47393e2438910bc218423da
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerStatsIncreasePacket.java
@@ -0,0 +1,102 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.UnpooledByteBufAllocator;
+import net.minecraft.core.Registry;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.stats.Stat;
+import net.minecraft.stats.StatType;
+import net.minecraft.world.entity.player.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperStatHandler;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class PlayerStatsIncreasePacket extends ExternalServerPacket {
+    private final UUID uuid;
+    private final HashMap<Stat<?>, Integer> stats;
+    private ByteBuf cache;
+
+    public PlayerStatsIncreasePacket(Player player, HashMap<Stat<?>, Integer> stats) {
+        this.uuid = player.getUUID();
+        this.stats = stats;
+
+        // Write the packet now so that we can pool the stats hashmap
+        ByteBuf buffer = UnpooledByteBufAllocator.DEFAULT.buffer();
+        FriendlyByteBuf out = new FriendlyByteBuf(buffer);
+        write(out);
+        this.cache = buffer;
+    }
+
+    public PlayerStatsIncreasePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+
+        int length = in.readInt();
+        this.stats = MultiPaperStatHandler.hashMapPool.acquire();
+        for (int i = 0; i < length; i++) {
+            String type = in.readUtf();
+            String subtype = in.readUtf();
+
+            StatType<?> statType = Registry.STAT_TYPE.get(new ResourceLocation(type));
+            Stat<?> stat = getStat(statType, subtype);
+
+            stats.put(stat, in.readInt());
+        }
+    }
+
+    private static <T> Stat<T> getStat(StatType<T> type, String subtype) {
+        ResourceLocation subtypeLocation = new ResourceLocation(subtype);
+        Registry<T> typeRegistry = type.getRegistry();
+        return type.get(typeRegistry.get(subtypeLocation));
+    }
+
+    private static <T> ResourceLocation getStatLocation(Stat<T> stat) {
+        Registry<T> typeRegistry = stat.getType().getRegistry();
+        return typeRegistry.getKey(stat.getValue());
+    }
+
+    @Override
+    public synchronized void write(FriendlyByteBuf out) {
+        if (cache != null) {
+            cache.readerIndex(0);
+            out.writeBytes(cache);
+            return;
+        }
+
+        Set<Map.Entry<Stat<?>, Integer>> entries = stats.entrySet();
+
+        out.writeUUID(uuid);
+        out.writeInt(entries.size());
+
+        for (Map.Entry<Stat<?>, Integer> entry : entries) {
+            out.writeUtf(Registry.STAT_TYPE.getKey(entry.getKey().getType()).toString());
+            out.writeUtf(getStatLocation(entry.getKey()).toString());
+            out.writeInt(entry.getValue());
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player != null) {
+                stats.forEach((stat, value) -> {
+                    int newValue = (int) Math.min((long) player.getStats().getValue(stat) + (long) value, 2147483647L);
+                    player.getStats().setValue(player, stat, newValue);
+                });
+            }
+
+            stats.clear();
+            MultiPaperStatHandler.hashMapPool.release(stats);
+        });
+    }
+
+}
