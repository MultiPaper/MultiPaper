From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 29 Jan 2022 20:22:06 +1000
Subject: [PATCH] Only save non-modified chunks


diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
index 1b0d92c68407cdb09ed8aac271b625d92db87017..5ff206a1e92c13312989e07b2154bc0787da5599 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
@@ -427,6 +427,8 @@ public abstract class StarLightEngine {
                 this.propagateBlockChanges(lightAccess, chunk, positions);
             }
             this.updateVisible(lightAccess);
+
+            chunk.setUnsaved(true); // MultiPaper
         } finally {
             this.destroyCaches();
         }
@@ -906,6 +908,8 @@ public abstract class StarLightEngine {
             this.lightChunk(lightAccess, chunk, true);
             this.setNibbles(chunk, nibbles);
             this.updateVisible(lightAccess);
+
+            chunk.setUnsaved(true); // MultiPaper
         } finally {
             this.destroyCaches();
         }
@@ -1004,6 +1008,8 @@ public abstract class StarLightEngine {
                     }
 
                     this.lightChunk(lightAccess, neighbour, false);
+
+                    neighbour.setUnsaved(true); // MultiPaper
                 } finally {
                     this.destroyCaches();
                 }
@@ -1028,6 +1034,8 @@ public abstract class StarLightEngine {
                 chunkLightCallback.accept(chunkPos);
             }
             ++lightCalls;
+
+            chunk.setUnsaved(true); // MultiPaper
         }
 
         if (onComplete != null) {
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 55ca70ac01a8586c66f49c71e21399bba96f5636..69ae13b0d2c5bb0deab6ab53449a412b7bac49cf 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -15,6 +15,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkSource;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.redstone.NeighborUpdater;
@@ -45,11 +46,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay));
     }
@@ -57,11 +60,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     LevelTickAccess<Fluid> getFluidTicks();
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay));
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 4f1d9432f1b4dfbfb0bbe5b758ab97b5d82541ce..d8128b5edd3cf99f237e125f081ad6d66d21593d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -389,6 +389,7 @@ public class ChunkSerializer {
 
         ((ChunkAccess) object1).setAllStarts(ChunkSerializer.unpackStructureStart(StructurePieceSerializationContext.fromLevel(world), nbttagcompound3, world.getSeed()));
         ((ChunkAccess) object1).setAllReferences(ChunkSerializer.unpackStructureReferences(world.registryAccess(), chunkPos, nbttagcompound3));
+        ((ChunkAccess) object1).setUnsaved(false); // MultiPaper - No point saving something that we just loaded
         if (nbt.getBoolean("shouldSave")) {
             ((ChunkAccess) object1).setUnsaved(true);
         }
