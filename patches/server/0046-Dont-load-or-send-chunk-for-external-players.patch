From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 2 Dec 2021 09:17:26 +1000
Subject: [PATCH] Dont load or send chunk for external players


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 62c06597fc9ce167869e48252ae26b1dbf790415..1d3095395ecbc4a7ef1f48d23aa56d6f4e5e833b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -109,6 +109,7 @@ import org.apache.logging.log4j.Logger;
 import org.bukkit.entity.Player;
 // CraftBukkit end
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import puregero.multipaper.MultiPaper;
 
 public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider {
 
@@ -1798,7 +1799,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     private boolean skipPlayer(ServerPlayer player) {
-        return player.isSpectator() && !this.level.getGameRules().getBoolean(GameRules.RULE_SPECTATORSGENERATECHUNKS);
+        return MultiPaper.isExternalPlayer(player) || (player.isSpectator() && !this.level.getGameRules().getBoolean(GameRules.RULE_SPECTATORSGENERATECHUNKS)); // MultiPaper - skip external players
     }
 
     void updatePlayerStatus(ServerPlayer player, boolean added) {
@@ -1824,6 +1825,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             this.removePlayerFromDistanceMaps(player); // Paper - distance maps
         }
 
+        if (MultiPaper.isExternalPlayer(player)) return; // MultiPaper - don't send chunks to external players
+
         for (int k = i - this.viewDistance - 1; k <= i + this.viewDistance + 1; ++k) {
             for (int l = j - this.viewDistance - 1; l <= j + this.viewDistance + 1; ++l) {
                 if (ChunkMap.isChunkInRange(k, l, i, j, this.viewDistance)) {
@@ -1885,6 +1888,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         int k1;
         int l1;
 
+
+        if (!MultiPaper.isExternalPlayer(player)) // MultiPaper - don't send chunks to external players
         if (Math.abs(i1 - i) <= this.viewDistance * 2 && Math.abs(j1 - j) <= this.viewDistance * 2) {
             k1 = Math.min(i, i1) - this.viewDistance - 1;
             l1 = Math.min(j, j1) - this.viewDistance - 1;
@@ -1938,7 +1943,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
             SectionPos sectionposition = entityplayer.getLastSectionPos();
 
-            if (onlyOnWatchDistanceEdge && ChunkMap.isChunkOnRangeBorder(chunkPos.x, chunkPos.z, sectionposition.x(), sectionposition.z(), this.viewDistance) || !onlyOnWatchDistanceEdge && ChunkMap.isChunkInRange(chunkPos.x, chunkPos.z, sectionposition.x(), sectionposition.z(), this.viewDistance)) {
+            if (MultiPaper.isRealPlayer(entityplayer) && (onlyOnWatchDistanceEdge && ChunkMap.isChunkOnRangeBorder(chunkPos.x, chunkPos.z, sectionposition.x(), sectionposition.z(), this.viewDistance) || !onlyOnWatchDistanceEdge && ChunkMap.isChunkInRange(chunkPos.x, chunkPos.z, sectionposition.x(), sectionposition.z(), this.viewDistance))) { // MultiPaper - only send chunks to real players
                 builder.add(entityplayer);
             }
         }
@@ -2306,7 +2311,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         public void updatePlayer(ServerPlayer player) {
             org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
-            if (player != this.entity) {
+            if (player != this.entity && MultiPaper.isRealPlayer(player)) { // MultiPaper - don't track for external players
                 // Paper start - remove allocation of Vec3D here
                 //Vec3 vec3d = player.position().subtract(this.entity.position()); // MC-155077, SPIGOT-5113
                 double vec3d_dx = player.getX() - this.entity.getX();
