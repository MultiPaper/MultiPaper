From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 7 Jul 2022 01:20:51 +1000
Subject: [PATCH] Sync raids


diff --git a/src/main/java/net/minecraft/world/entity/raid/Raid.java b/src/main/java/net/minecraft/world/entity/raid/Raid.java
index 08b18428e867baf14f551beb72e3875b0c420639..b1031bc26aeb1607d312e70e673a97666f8b0990 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raid.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raid.java
@@ -58,6 +58,9 @@ import net.minecraft.world.level.block.entity.BannerPatterns;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.Vec3;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.RaidJoinPacket;
+import puregero.multipaper.externalserverprotocol.RaidUpdatePacket;
 
 public class Raid {
 
@@ -103,7 +106,7 @@ public class Raid {
     private int postRaidTicks;
     private int raidCooldownTicks;
     private final RandomSource random;
-    public final int numGroups;
+    public int numGroups; // MultiPaper - make non-final
     private Raid.RaidStatus status;
     private int celebrationTicks;
     private Optional<BlockPos> waveSpawnPos;
@@ -123,13 +126,19 @@ public class Raid {
     }
 
     public Raid(ServerLevel world, CompoundTag nbt) {
+        // MultiPaper start - Add dedicated load method
         this.raidEvent = new ServerBossEvent(Raid.RAID_NAME_COMPONENT, BossEvent.BossBarColor.RED, BossEvent.BossBarOverlay.NOTCHED_10);
         this.random = RandomSource.create();
         this.waveSpawnPos = Optional.empty();
         this.level = world;
         this.id = nbt.getInt("Id");
+        load(world, nbt);
+    }
+
+    public void load(ServerLevel world, CompoundTag nbt) {
+        // MultiPaper end - Add dedicated load method
         this.started = nbt.getBoolean("Started");
-        this.active = nbt.getBoolean("Active");
+        this.active = false; // nbt.getBoolean("Active"); // MultiPaper - default to false
         this.ticksActive = nbt.getLong("TicksActive");
         this.badOmenLevel = nbt.getInt("BadOmenLevel");
         this.groupsSpawned = nbt.getInt("GroupsSpawned");
@@ -267,6 +276,7 @@ public class Raid {
         this.active = false;
         this.raidEvent.removeAllPlayers();
         this.status = Raid.RaidStatus.STOPPED;
+        RaidUpdatePacket.broadcastUpdate(this);
     }
 
     public void tick() {
@@ -274,7 +284,7 @@ public class Raid {
             if (this.status == Raid.RaidStatus.ONGOING) {
                 boolean flag = this.active;
 
-                this.active = this.level.hasChunkAt(this.center);
+                this.active = MultiPaper.isChunkLocal(this.level.getChunkIfLoaded(this.center)); // MultiPaper - only tick local raids
                 if (this.level.getDifficulty() == Difficulty.PEACEFUL) {
                     org.bukkit.craftbukkit.event.CraftEventFactory.callRaidStopEvent(this, org.bukkit.event.raid.RaidStopEvent.Reason.PEACE); // CraftBukkit
                     this.stop();
@@ -616,6 +626,7 @@ public class Raid {
         this.updateBossbar();
         this.setDirty();
         org.bukkit.craftbukkit.event.CraftEventFactory.callRaidSpawnWaveEvent(this, leader, raiders); // CraftBukkit
+        RaidUpdatePacket.broadcastUpdate(this); // MultiPaper - sync raid on new wave
     }
 
     public void joinRaid(int wave, Raider raider, @Nullable BlockPos pos, boolean existing) {
@@ -683,6 +694,14 @@ public class Raid {
             }
         }
 
+        // MultiPaper start - remove raider from all waves
+        for (Set<Raider> set2 : groupRaiderMap.values()) {
+            if (set2.remove(entity)) {
+                entity.setCurrentRaid(null);
+            }
+        }
+        // MultiPaper end
+
     }
 
     private void setDirty() {
@@ -757,12 +776,13 @@ public class Raid {
         }
 
         set.add(entity);
-        if (countHealth) {
+        if (countHealth && entityraider1 == null) { // MultiPaper - don't count health if the raider is already added
             this.totalHealth += entity.getHealth();
         }
 
         this.updateBossbar();
         this.setDirty();
+        RaidJoinPacket.broadcastJoin(entity, this);
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raids.java b/src/main/java/net/minecraft/world/entity/raid/Raids.java
index 0670775c2de33e69c75644e5d2ff19db08444040..76c91f3ba9c841819a064e130338bddd24b0ff77 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raids.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raids.java
@@ -4,7 +4,10 @@ import com.google.common.collect.Maps;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
@@ -19,17 +22,20 @@ import net.minecraft.tags.PoiTypeTags;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.saveddata.SavedData;
 import net.minecraft.world.phys.Vec3;
+import puregero.multipaper.externalserverprotocol.RaidUpdatePacket;
 
 public class Raids extends SavedData {
 
     private static final String RAID_FILE_ID = "raids";
     public final Map<java.util.UUID, Integer> playerCooldowns = Maps.newHashMap();
     public final Map<Integer, Raid> raidMap = Maps.newHashMap();
+    public final Long2IntOpenHashMap chunkToRaidIdMap = new Long2IntOpenHashMap(); // MultiPaper
     private final ServerLevel level;
     private int nextAvailableID;
     private int tick;
@@ -44,6 +50,16 @@ public class Raids extends SavedData {
         return (Raid) this.raidMap.get(id);
     }
 
+    // MultiPaper start
+    public Optional<Raid> getActiveRaid(ChunkPos chunkPos) {
+        return Optional
+                .of(chunkToRaidIdMap.getOrDefault(chunkPos.toLong(), 0))
+                .filter(id -> id != 0)
+                .map(this::get)
+                .filter(raid -> !raid.isStopped());
+    }
+    // MultiPaper end
+
     public void tick() {
         ++this.tick;
         // Purpur start
@@ -150,6 +166,8 @@ public class Raids extends SavedData {
                     if (level.purpurConfig.raidCooldownSeconds != 0) playerCooldowns.put(player.getUUID(), level.purpurConfig.raidCooldownSeconds); // Purpur
 
                     if (!this.raidMap.containsKey(raid.getId())) {
+                        RaidUpdatePacket.broadcastUpdate(raid); // MultiPaper
+                        this.chunkToRaidIdMap.put(ChunkPos.asLong(raid.getCenter()), raid.getId()); // MultiPaper
                         this.raidMap.put(raid.getId(), raid);
                     }
                     // CraftBukkit end
@@ -168,6 +186,12 @@ public class Raids extends SavedData {
     }
 
     private Raid getOrCreateRaid(ServerLevel world, BlockPos pos) {
+        // MultiPaper start - Don't overlap multiple raids on the same chunk
+        Optional<Raid> optionalRaid = this.getActiveRaid(new ChunkPos(pos));
+        if (optionalRaid.isPresent()) {
+            return optionalRaid.get();
+        }
+        // MultiPaper end - Don't overlap multiple raids on the same chunk
         Raid raid = world.getRaidAt(pos);
 
         return raid != null ? raid : new Raid(this.getUniqueId(), world, pos);
@@ -185,6 +209,7 @@ public class Raids extends SavedData {
             Raid raid = new Raid(world, nbttagcompound1);
 
             persistentraid.raidMap.put(raid.getId(), raid);
+            if (!raid.isStopped()) persistentraid.chunkToRaidIdMap.put(ChunkPos.asLong(raid.getCenter()), raid.getId()); // MultiPaper
         }
 
         return persistentraid;
@@ -214,6 +239,7 @@ public class Raids extends SavedData {
     }
 
     private int getUniqueId() {
+        if (true) return new java.util.Random().nextInt(); // MultiPaper - 1 in 4 billion chance of two ids being the same, while not having to sync the next available id across servers
         return ++this.nextAvailableID;
     }
 
@@ -227,7 +253,7 @@ public class Raids extends SavedData {
             Raid raid1 = (Raid) iterator.next();
             double d1 = raid1.getCenter().distSqr(pos);
 
-            if (raid1.isActive() && d1 < d0) {
+            if (!raid1.isStopped() && d1 < d0) { // MultiPaper - use !isStopped() instead of isActive()
                 raid = raid1;
                 d0 = d1;
             }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index b4ddc444e88885e9f250fafab69a2d8749c6c975..0a80cd71c551bf6cb91989656e950970045d4486 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -497,6 +497,7 @@ public class MultiPaper {
             }
             broadcastPacketToExternalServers(newChunkHolder.externalEntitiesSubscribers, () -> new SendEntitiesPacket(levelChunk, chunkEntitySlices));
             broadcastPacketToExternalServers(newChunkHolder.externalSubscribers, () -> new SendTickListPacket(levelChunk));
+            levelChunk.level.getRaids().getActiveRaid(levelChunk.getPos()).ifPresent(RaidUpdatePacket::broadcastUpdate);
             for (BlockEntity blockEntity : levelChunk.getBlockEntities().values()) {
                 if (blockEntity instanceof Container container) {
                     List<HumanEntity> viewers = container.getViewers();
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index c0d356fa3ac2dd75ea09c28827e0d05437d38117..6eb72802377e6524e1540a1b89940cd7faed9bd8 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -72,6 +72,8 @@ public class ExternalServerPacketSerializer {
         addPacket(EntityTeleportPacket.class, EntityTeleportPacket::new);
         addPacket(ProjectileHitEntityPacket.class, ProjectileHitEntityPacket::new);
         addPacket(PlayerUseBlockPacket.class, PlayerUseBlockPacket::new);
+        addPacket(RaidUpdatePacket.class, RaidUpdatePacket::new);
+        addPacket(RaidJoinPacket.class, RaidJoinPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RaidJoinPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RaidJoinPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..c2d520ec453eba7637bf9f929b5235879cf943dc
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RaidJoinPacket.java
@@ -0,0 +1,65 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.raid.Raid;
+import net.minecraft.world.entity.raid.Raider;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class RaidJoinPacket extends ExternalServerPacket {
+    private static boolean handlingJoin = false;
+
+    private final String world;
+    private final UUID uuid;
+    private final int raidId;
+
+    public RaidJoinPacket(Entity entity, Raid raid) {
+        this.world = entity.level.getWorld().getName();
+        this.uuid = entity.getUUID();
+        this.raidId = raid.getId();
+    }
+
+    public RaidJoinPacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.uuid = in.readUUID();
+        this.raidId = in.readVarInt();
+    }
+
+    public static void broadcastJoin(Raider entity, Raid raid) {
+        if (!handlingJoin) {
+            MultiPaper.broadcastPacketToExternalServers(new RaidJoinPacket(entity, raid));
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeVarInt(raidId);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            handlingJoin = true;
+            World bukkitWorld = Bukkit.getWorld(world);
+
+            if (bukkitWorld instanceof CraftWorld craftWorld) {
+                ServerLevel level = craftWorld.getHandle();
+                Entity entity = level.getEntity(uuid);
+                Raid raid = level.getRaids().get(raidId);
+                if (raid != null && entity instanceof Raider raider) {
+                    raid.joinRaid(raid.getGroupsSpawned(), raider, null, true);
+                }
+            }
+            handlingJoin = false;
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RaidUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RaidUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..ac2c296aa4d7711345d70d9d65175b339c450a84
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RaidUpdatePacket.java
@@ -0,0 +1,78 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.raid.Raid;
+import net.minecraft.world.level.ChunkPos;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+
+public class RaidUpdatePacket extends ExternalServerPacket {
+    private final String world;
+    private final byte[] data;
+
+    public RaidUpdatePacket(Raid raid) {
+        this.world = raid.getLevel().getWorld().getName();
+
+        CompoundTag tag = new CompoundTag();
+
+        raid.save(tag);
+
+        try {
+            this.data = MultiPaper.nbtToBytes(tag);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public RaidUpdatePacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.data = in.readByteArray();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeByteArray(data);
+    }
+
+    public static void broadcastUpdate(Raid raid) {
+        MultiPaper.broadcastPacketToExternalServers(new RaidUpdatePacket(raid));
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            try {
+                World bukkitWorld = Bukkit.getWorld(world);
+
+                if (bukkitWorld instanceof CraftWorld craftWorld) {
+                    ServerLevel level = craftWorld.getHandle();
+                    CompoundTag tag = MultiPaper.nbtFromBytes(data);
+                    int id = tag.getInt("Id");
+
+                    Raid raid = level.getRaids().raidMap.get(id);
+                    if (raid == null) {
+                        raid = new Raid(level, tag);
+                    } else {
+                        raid.load(level, tag);
+                    }
+
+                    level.getRaids().raidMap.put(raid.getId(), raid);
+
+                    if (!raid.isStopped()) {
+                        level.getRaids().chunkToRaidIdMap.put(ChunkPos.asLong(raid.getCenter()), raid.getId());
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+}
