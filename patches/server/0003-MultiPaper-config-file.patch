From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 4 Mar 2022 20:33:33 +1000
Subject: [PATCH] MultiPaper config file


diff --git a/src/main/java/io/papermc/paper/configuration/ConfigurationPart.java b/src/main/java/io/papermc/paper/configuration/ConfigurationPart.java
index 7a4a7a654fe2516ed894a68f2657344df9d70f4c..1a3f39379359f7d26bcf72f692247fd46e79bf0d 100644
--- a/src/main/java/io/papermc/paper/configuration/ConfigurationPart.java
+++ b/src/main/java/io/papermc/paper/configuration/ConfigurationPart.java
@@ -1,6 +1,6 @@
 package io.papermc.paper.configuration;
 
-abstract class ConfigurationPart {
+public abstract class ConfigurationPart {
 
     public static abstract class Post extends ConfigurationPart {
 
diff --git a/src/main/java/io/papermc/paper/configuration/InnerClassFieldDiscoverer.java b/src/main/java/io/papermc/paper/configuration/InnerClassFieldDiscoverer.java
index a0aa1f1a7adf986d500a2135aa42e138aa3c4f08..8f2c9337bfb6568abe3d5c958bb4500b7572d43b 100644
--- a/src/main/java/io/papermc/paper/configuration/InnerClassFieldDiscoverer.java
+++ b/src/main/java/io/papermc/paper/configuration/InnerClassFieldDiscoverer.java
@@ -17,7 +17,7 @@ import java.util.Map;
 
 import static io.leangen.geantyref.GenericTypeReflector.erase;
 
-final class InnerClassFieldDiscoverer implements FieldDiscoverer<Map<Field, Object>> {
+public final class InnerClassFieldDiscoverer implements FieldDiscoverer<Map<Field, Object>> { // MultiPaper - make public
 
     private final Map<Class<?>, Object> instanceMap = new HashMap<>();
     private final Map<Class<?>, Object> overrides;
@@ -55,9 +55,9 @@ final class InnerClassFieldDiscoverer implements FieldDiscoverer<Map<Field, Obje
         }
     }, "Object must be a unique ConfigurationPart");
 
-    InnerClassFieldDiscoverer(Map<Class<?>, Object> overrides) {
+    public InnerClassFieldDiscoverer(Map<Class<?>, Object> overrides) {
         this.overrides = overrides;
-    }
+    } // MultiPaper - make public
 
     @Override
     public @Nullable <V> InstanceFactory<Map<Field, Object>> discover(AnnotatedType target, FieldCollector<Map<Field, Object>, V> collector) throws SerializationException {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 31faf2d6492696f7d0c99a48edbc0d6f15db1209..3130c4f9a4ba239d95fc3e73f18e5ae717b19108 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -68,6 +68,9 @@ import net.minecraft.SharedConstants;
 import org.bukkit.configuration.file.YamlConfiguration;
 // CraftBukkit end
 
+import puregero.multipaper.config.MultiPaperConfiguration;
+import puregero.multipaper.config.MultiPaperConfigurationLoader;
+
 public class Main {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -111,6 +114,9 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            MultiPaperConfigurationLoader.init((File) optionset.valueOf("multipaper-settings")); // MultiPaper
+            System.setProperty("multipaper.master-connection.my-name", MultiPaperConfiguration.get().masterConnection.myName); // MultiPaper - remember this property even after config reloads
+
             Bootstrap.bootStrap();
             Bootstrap.validate();
             Util.startTimerHackThread();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 2f637b6f504637520425c1844ec7e014aa149980..b93ca28467ffa186fd648377990b779f85ff6c1a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -257,6 +257,7 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.permissions.MultiPaperPermissions;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -554,6 +555,7 @@ public final class CraftServer implements Server {
             this.commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            MultiPaperPermissions.registerCorePermissions(); // MultiPaper
             if (!io.papermc.paper.configuration.GlobalConfiguration.get().misc.loadPermissionsYmlBeforePlugins) this.loadCustomPermissions(); // Paper
             this.helpMap.initializeCommands();
             this.syncCommands();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 576cd8e20982bb20d10213b6c7a229428eec1c2f..175ce93bd08e0ebcff419f15d139981c720ed307 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -180,6 +180,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // MultiPaper start
+                acceptsAll(asList("multipaper", "multipaper-settings"), "File for multipaper settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("multipaper.yml"))
+                        .describedAs("Yml file");
+                // MultiPaper end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/puregero/multipaper/config/ExceptionableConsumer.java b/src/main/java/puregero/multipaper/config/ExceptionableConsumer.java
new file mode 100644
index 0000000000000000000000000000000000000000..7cdf20efd4f220f55d7b86abce19e84f4512191e
--- /dev/null
+++ b/src/main/java/puregero/multipaper/config/ExceptionableConsumer.java
@@ -0,0 +1,8 @@
+package puregero.multipaper.config;
+
+@FunctionalInterface
+public interface ExceptionableConsumer<T> {
+
+    void accept(T t) throws Exception;
+
+}
diff --git a/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java b/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..de7d859b9de4d34e834cae108c4f796e92ee67c0
--- /dev/null
+++ b/src/main/java/puregero/multipaper/config/MultiPaperConfiguration.java
@@ -0,0 +1,87 @@
+package puregero.multipaper.config;
+
+import io.papermc.paper.configuration.ConfigurationPart;
+import org.spongepowered.configurate.objectmapping.meta.Comment;
+
+import java.util.List;
+
+@SuppressWarnings({ "InnerClassMayBeStatic" })
+public class MultiPaperConfiguration extends ConfigurationPart {
+
+    public static final String HEADER = """
+            This is the main configuration file for MultiPaper.
+            There's quite alot to configure. Read the docs for more information.
+
+            Docs: https://github.com/PureGero/MultiPaper/blob/main/MULTIPAPER_YAML.md\s
+            """;
+
+    private static MultiPaperConfiguration instance;
+
+    public static MultiPaperConfiguration get() {
+        return instance;
+    }
+
+    static void set(MultiPaperConfiguration instance) {
+        MultiPaperConfiguration.instance = instance;
+    }
+
+    public MasterConnection masterConnection;
+
+    public class MasterConnection extends ConfigurationPart  {
+        public boolean advertiseToBuiltInProxy = true;
+
+        // One day we'll get comments in yaml files
+        // @Comment("""
+        //
+        // Set the address used to connect to the master database here.
+        // """)
+        public String masterAddress = "localhost:35353";
+
+        // One day we'll get comments in yaml files
+        // @Comment("""
+        //
+        // Give this server a name. This can be the same name you used for this server in
+        // BungeeCord or Velocity, or you can come up with a random name. Each server must
+        // have a unique name.
+        // """)
+        public String myName = "server" + Double.toString(Math.random()).substring(2, 7);
+    }
+
+    public PeerConnection peerConnection;
+
+    public class PeerConnection extends ConfigurationPart {
+        public int compressionThreshold = 0;
+        public int consolidationDelay = 0;
+    }
+
+    public Optimizations optimizations;
+
+    public class Optimizations extends ConfigurationPart  {
+        public boolean dontSaveJustForLightingUpdates = false;
+        public boolean reducePlayerPositionUpdatesInUnloadedChunks = false;
+        public int ticksPerInactiveEntityTracking = 1;
+        public boolean useEventBasedIo = true;
+    }
+
+    public SyncSettings syncSettings;
+
+    public class SyncSettings extends ConfigurationPart  {
+        public boolean syncEntityIds = true;
+        public boolean syncJsonFiles = true;
+        public boolean syncPermissions = false;
+        public boolean syncScoreboards = true;
+        public boolean useLocalPlayerCountForServerIsFullKick = false;
+
+        public Files files;
+
+        public class Files extends ConfigurationPart {
+            public List<String> filesToNotSync = List.of("plugins/bStats");
+            public List<String> filesToOnlyUploadOnServerStop = List.of("plugins/MyPluginDirectory/my_big_database.db");
+            public List<String> filesToSyncInRealTime = List.of("plugins/MyPluginDirectory/userdata");
+            public List<String> filesToSyncOnStartup = List.of("myconfigfile.yml", "plugins/MyPlugin.jar");
+            public boolean logFileSyncs = true;
+        }
+    }
+
+
+}
diff --git a/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java b/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0ec43cb2051ee6c74856cf24c8d26bec1dd61a3
--- /dev/null
+++ b/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java
@@ -0,0 +1,148 @@
+package puregero.multipaper.config;
+
+import io.papermc.paper.configuration.ConfigurationLoaders;
+import io.papermc.paper.configuration.ConfigurationPart;
+import io.papermc.paper.configuration.InnerClassFieldDiscoverer;
+import io.papermc.paper.configuration.constraint.Constraint;
+import io.papermc.paper.configuration.constraint.Constraints;
+import org.spongepowered.configurate.BasicConfigurationNode;
+import org.spongepowered.configurate.CommentedConfigurationNode;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.ConfigurationOptions;
+import org.spongepowered.configurate.objectmapping.ObjectMapper;
+import org.spongepowered.configurate.serialize.SerializationException;
+import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
+
+import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.Map;
+import java.util.function.UnaryOperator;
+
+import static io.leangen.geantyref.GenericTypeReflector.erase;
+
+public class MultiPaperConfigurationLoader {
+
+    public static void init(File file) {
+        try {
+            YamlConfigurationLoader.Builder loaderBuilder = ConfigurationLoaders.naturallySorted();
+            loaderBuilder.defaultOptions(options -> options.header(MultiPaperConfiguration.HEADER));
+
+            Path configFile = file.toPath();
+            YamlConfigurationLoader loader = loaderBuilder
+                    .defaultOptions(applyObjectMapperFactory(createObjectMapper().build()))
+                    .path(configFile)
+                    .build();
+            ConfigurationNode node;
+            if (Files.exists(configFile)) {
+                node = loader.load();
+            } else {
+                node = CommentedConfigurationNode.root(loader.defaultOptions());
+            }
+
+            String before = node.toString();
+            setFromProperties(node);
+
+            MultiPaperConfiguration instance = node.require(MultiPaperConfiguration.class);
+            transformLegacyConfig(node, instance);
+
+            for (Object key : node.childrenMap().keySet()) {
+                node.removeChild(key);
+            }
+
+            node.set(instance);
+
+            if (!node.toString().equals(before)) {
+                loader.save(node);
+            }
+
+            MultiPaperConfiguration.set(instance);
+        } catch (ConfigurateException e) {
+            throw new RuntimeException("Could not load multipaper.yml", e);
+        }
+    }
+
+    private static void setFromProperties(ConfigurationNode node) {
+        for (Map.Entry<Object, Object> property : System.getProperties().entrySet()) {
+            if (property.getKey().toString().startsWith("multipaper.")) {
+                String key = property.getKey().toString().substring("multipaper.".length());
+                try {
+                    node.node((Object[]) key.split("\\.")).set(property.getValue());
+                } catch (SerializationException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private static ObjectMapper.Factory.Builder createObjectMapper() {
+        return ObjectMapper.factoryBuilder()
+                .addConstraint(Constraint.class, new Constraint.Factory())
+                .addConstraint(Constraints.Min.class, Number.class, new Constraints.Min.Factory())
+                .addDiscoverer(new InnerClassFieldDiscoverer(Collections.emptyMap()));
+    }
+
+    private static UnaryOperator<ConfigurationOptions> applyObjectMapperFactory(final ObjectMapper.Factory factory) {
+        return options -> options.serializers(builder -> builder
+                .register(type -> ConfigurationPart.class.isAssignableFrom(erase(type)), factory.asTypeSerializer())
+                .registerAnnotatedObjects(factory));
+    }
+
+    private static void transformLegacyConfig(ConfigurationNode node, MultiPaperConfiguration config) {
+        getAndRemove(node, "bungeecordName", value -> config.masterConnection.myName = value.getString());
+        getAndRemove(node, "multipaperMasterAddress", value -> config.masterConnection.masterAddress = value.getString());
+        getAndRemove(node, "syncJsonFiles", value -> config.syncSettings.syncJsonFiles = value.getBoolean());
+        getAndRemove(node, "advertiseToBuiltInProxy", value -> config.masterConnection.advertiseToBuiltInProxy = value.getBoolean());
+        getAndRemove(node, "syncScoreboards", value -> config.syncSettings.syncScoreboards = value.getBoolean());
+        getAndRemove(node, "logFileSyncing", value -> config.syncSettings.files.logFileSyncs = value.getBoolean());
+        getAndRemove(node, "filesToSyncOnStartup", value -> config.syncSettings.files.filesToSyncOnStartup = value.getList(String.class));
+        getAndRemove(node, "filesToSyncInRealTime", value -> config.syncSettings.files.filesToSyncInRealTime = value.getList(String.class));
+        getAndRemove(node, "filesToOnlyUploadOnServerStop", value -> config.syncSettings.files.filesToOnlyUploadOnServerStop = value.getList(String.class));
+        getAndRemove(node, "filesToNotSync", value -> config.syncSettings.files.filesToNotSync = value.getList(String.class));
+        getAndRemove(node, "ticksPerInactiveEntityTracking", value -> config.optimizations.ticksPerInactiveEntityTracking = value.getInt());
+        getAndRemove(node, "optimizations.ticksPerInactiveEntityTracking", value -> config.optimizations.ticksPerInactiveEntityTracking = value.getInt());
+        getAndRemove(node, "interServerCompressionThreshold", value -> config.peerConnection.compressionThreshold = value.getInt());
+        getAndRemove(node, "interServerConsolidationDelay", value -> config.peerConnection.consolidationDelay = value.getInt());
+        getAndRemove(node, "useLocalPlayerCountForServerIsFullKick", value -> config.syncSettings.useLocalPlayerCountForServerIsFullKick = value.getBoolean());
+        getAndRemove(node, "syncPermissions", value -> config.syncSettings.syncPermissions = value.getBoolean());
+        getAndRemove(node, "optimizations.reducePlayerPositionUpdatesInUnloadedChunks", value -> config.optimizations.reducePlayerPositionUpdatesInUnloadedChunks = value.getBoolean());
+        getAndRemove(node, "optimizations.dontSaveLightingUpdates", value -> config.optimizations.dontSaveJustForLightingUpdates = value.getBoolean());
+        getAndRemove(node, "optimizations.useFutureBasedIO", value -> config.optimizations.useEventBasedIo = value.getBoolean());
+        getAndRemove(node, "optimizations.disableRedstoneSafetySync", value -> { /* removed */ });
+    }
+
+    private static void getAndRemove(ConfigurationNode node, String key, ExceptionableConsumer<ConfigurationNode> consumer) {
+        if (System.getProperty(key) != null) {
+            try {
+                BasicConfigurationNode systemNode = BasicConfigurationNode.root();
+                systemNode.set(System.getProperty(key));
+                consumer.accept(systemNode);
+                return;
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        String[] parts = key.split("\\.");
+
+        for (int i = 0; i < parts.length; i++) {
+            if (node.isMap() && node.childrenMap().containsKey(parts[i])) {
+                if (i == parts.length - 1) {
+                    try {
+                        consumer.accept(node.childrenMap().get(parts[i]));
+                        node.removeChild(parts[i]);
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                } else {
+                    node = node.childrenMap().get(parts[i]);
+                }
+            } else {
+                return;
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/puregero/multipaper/permissions/MultiPaperCommandPermissions.java b/src/main/java/puregero/multipaper/permissions/MultiPaperCommandPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7d9a1538ec842e453e5add3f9e33f8c43bfa3d2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/permissions/MultiPaperCommandPermissions.java
@@ -0,0 +1,17 @@
+package puregero.multipaper.permissions;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
+
+public class MultiPaperCommandPermissions {
+    private static final String ROOT = "multipaper.command";
+    private static final String PREFIX = ROOT + ".";
+
+    public static void registerPermissions(@NotNull Permission parent) {
+        Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all MultiPaper commands", parent);
+
+
+        commands.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/puregero/multipaper/permissions/MultiPaperPermissions.java b/src/main/java/puregero/multipaper/permissions/MultiPaperPermissions.java
new file mode 100644
index 0000000000000000000000000000000000000000..91b2e3564d7c737b2006f8c2860ab43846637384
--- /dev/null
+++ b/src/main/java/puregero/multipaper/permissions/MultiPaperPermissions.java
@@ -0,0 +1,16 @@
+package puregero.multipaper.permissions;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public class MultiPaperPermissions {
+    private static final String ROOT = "multipaper";
+
+    public static void registerCorePermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all MultiPaper utilities and commands");
+
+        MultiPaperCommandPermissions.registerPermissions(parent);
+
+        parent.recalculatePermissibles();
+    }
+}
