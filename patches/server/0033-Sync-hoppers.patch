From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 4 Dec 2021 18:34:35 +1000
Subject: [PATCH] Sync hoppers


diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 6cc266091f1512e079d14aa22f55284c7f148aad..b1ebacb54f227e0d2335452ba1ac5c21b5973708 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -29,7 +29,7 @@ import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 
 public abstract class BlockEntity {
-    static boolean IGNORE_TILE_UPDATES = false; // Paper
+    public static boolean IGNORE_TILE_UPDATES = false; // Paper // MultiPaper - set public
 
     public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 698a0ac71cf9fb409d609a81cc2958121260a46d..919d3439e5328d71b13138c79ca409f10973ce7f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -5,11 +5,14 @@ import java.util.List;
 import java.util.function.BooleanSupplier;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.CompoundContainer;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
@@ -28,6 +31,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.HopperBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
@@ -37,6 +41,9 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
 import org.bukkit.event.inventory.InventoryPickupItemEvent;
 import org.bukkit.inventory.Inventory;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperContainerHandler;
+import puregero.multipaper.externalserverprotocol.PullItemFromContainerPacket;
 // CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
@@ -251,7 +258,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                         origItemStack.setCount(origCount - moved + remaining);
                     }
                     hopper.setItem(i, origItemStack);
-                    destination.setChanged();
+                    hopper.setChanged(); // destination.setChanged(); // MultiPaper - redundant to have destination, handled in addItem, changed to hopper
                     return true;
                 }
                 origItemStack.setCount(origCount);
@@ -280,6 +287,20 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             }
         }
 
+        // MultiPaper start - logic for pulling from double chests that span multiple servers
+        if (iinventory instanceof CompoundContainer compoundContainer) {
+            BlockEntity primaryChest = MultiPaperContainerHandler.getPrimaryChest(compoundContainer);
+            NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder((ServerLevel) primaryChest.getLevel(), primaryChest.getBlockPos());
+            if (MultiPaper.isChunkExternal(newChunkHolder)) {
+                newChunkHolder.externalOwner.getConnection().send(new PullItemFromContainerPacket(primaryChest, i, origItemStack, ihopper));
+                if (level.paperConfig().hopper.cooldownWhenFull) {
+                    cooldownHopper(ihopper);
+                }
+                return true;
+            }
+        }
+        // MultiPaper end
+
         final ItemStack itemstack2 = addItem(iinventory, ihopper, itemstack, null);
         final int remaining = itemstack2.getCount();
         if (remaining != moved) {
@@ -611,6 +632,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     private static ItemStack tryMoveInItem(@Nullable Container from, Container to, ItemStack stack, int slot, @Nullable Direction side) {
         ItemStack itemstack1 = to.getItem(slot);
+        int startingStackSize = itemstack1.getCount(); // MultiPaper
 
         if (HopperBlockEntity.canPlaceItemInContainer(to, stack, slot, side)) {
             boolean flag = false;
@@ -657,6 +679,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                     }
                 }
 
+                if (!MultiPaperContainerHandler.increaseItemExternal(to, slot, to.getItem(slot), to.getItem(slot).getCount() - startingStackSize)) // MultiPaper - don't change external containers
                 to.setChanged();
             }
         }
diff --git a/src/main/java/puregero/multipaper/MultiPaperContainerHandler.java b/src/main/java/puregero/multipaper/MultiPaperContainerHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..e344051cfbd7441360a6aab811179aaca1f8f3aa
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperContainerHandler.java
@@ -0,0 +1,68 @@
+package puregero.multipaper;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.CompoundContainer;
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.ComposterBlock;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import puregero.multipaper.externalserverprotocol.AddItemToContainerPacket;
+import puregero.multipaper.externalserverprotocol.AddItemToEntityContainerPacket;
+
+public class MultiPaperContainerHandler {
+    public static BlockEntity getPrimaryChest(CompoundContainer compoundContainer) {
+        BlockEntity chest1 = (BlockEntity) compoundContainer.container1;
+        BlockEntity chest2 = (BlockEntity) compoundContainer.container2;
+
+        if (chest1.getBlockPos().getX() > chest2.getBlockPos().getX()) {
+            return chest1;
+        } else if (chest2.getBlockPos().getX() > chest1.getBlockPos().getX()) {
+            return chest2;
+        } else if (chest1.getBlockPos().getZ() > chest2.getBlockPos().getZ()) {
+            return chest1;
+        } else {
+            return chest2;
+        }
+    }
+
+    public static boolean increaseItemExternal(Container to, int slot, ItemStack stack, int count) {
+        if (to instanceof Entity entity) {
+            NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(entity);
+            if (MultiPaper.isChunkExternal(newChunkHolder)) {
+                stack = stack.copy();
+                stack.setCount(count);
+                newChunkHolder.externalOwner.getConnection().send(new AddItemToEntityContainerPacket(entity, slot, stack));
+
+                return true;
+            } else {
+                return false;
+            }
+        }
+
+        if (to instanceof ComposterBlock.InputContainer || to instanceof ComposterBlock.OutputContainer || to instanceof ComposterBlock.EmptyContainer) {
+            // It doesn't really matter if we modify composters across servers (which might even be impossible anyways)
+            return false;
+        }
+
+        BlockEntity block;
+
+        if (to instanceof CompoundContainer compoundContainer) {
+            block = getPrimaryChest(compoundContainer);
+        } else {
+            block = (BlockEntity) to;
+        }
+
+        NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder((ServerLevel) block.getLevel(), block.getBlockPos());
+        if (MultiPaper.isChunkExternal(newChunkHolder)) {
+            stack = stack.copy();
+            stack.setCount(count);
+            newChunkHolder.externalOwner.getConnection().send(new AddItemToContainerPacket(block, slot, stack));
+
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToContainerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToContainerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..77e8fd3417e25ed9f12e865413c635aad9f580a8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToContainerPacket.java
@@ -0,0 +1,86 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+
+public class AddItemToContainerPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(AddItemToContainerPacket.class.getSimpleName());
+
+    private final String world;
+    private final BlockPos pos;
+    private final int slot;
+    private final ItemStack itemStack;
+
+    public AddItemToContainerPacket(BlockEntity blockEntity, int slot, ItemStack itemStack) {
+        this((ServerLevel) blockEntity.getLevel(), blockEntity.getBlockPos(), slot, itemStack);
+    }
+
+    public AddItemToContainerPacket(ServerLevel serverLevel, BlockPos blockPos, int slot, ItemStack itemStack) {
+        this.world = serverLevel.convertable.getLevelId();
+        this.pos = blockPos;
+        this.slot = slot;
+        this.itemStack = itemStack;
+    }
+
+    public AddItemToContainerPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        pos = BlockPos.of(in.readLong());
+        slot = in.readByte();
+
+        try {
+            itemStack = ItemStack.of(MultiPaper.nbtFromBytes(in.readByteArray()));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeLong(pos.asLong());
+        out.writeByte(slot);
+
+        try {
+            out.writeByteArray(MultiPaper.nbtToBytes(itemStack.save(new CompoundTag())));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Container container = HopperBlockEntity.getContainerAt(level, pos);
+
+            if (container == null) {
+                LOGGER.warn("Tried to set a " + itemStack + " in slot " + slot + " in a non-existant container at " + world + " " + pos);
+            } else {
+                // We can assume the item is being added from the side as it's cross servers, so any side direction such as north will do
+                ItemStack leftOver = HopperBlockEntity.addItem(null, container, itemStack, Direction.NORTH);
+                if (!leftOver.isEmpty()) {
+                    LOGGER.warn("There was a left over " + leftOver + " after adding an item to " + container.getClass().getSimpleName() + "@" + world + pos);
+                    ItemEntity item = new ItemEntity(level, pos.getX() + 0.5, pos.getY() + 1, pos.getZ() + 0.5, leftOver);
+                    level.addFreshEntity(item);
+                }
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToEntityContainerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToEntityContainerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..6a9eccfbb3b5f2eaab003b65f626340409d42233
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/AddItemToEntityContainerPacket.java
@@ -0,0 +1,82 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.Container;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class AddItemToEntityContainerPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(AddItemToEntityContainerPacket.class.getSimpleName());
+
+    private final String world;
+    private final UUID uuid;
+    private final int slot;
+    private final ItemStack itemStack;
+
+    public AddItemToEntityContainerPacket(Entity entity, int slot, ItemStack itemStack) {
+        this.world = ((ServerLevel) entity.getLevel()).convertable.getLevelId();
+        this.uuid = entity.getUUID();
+        this.slot = slot;
+        this.itemStack = itemStack;
+    }
+
+    public AddItemToEntityContainerPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        uuid = in.readUUID();
+        slot = in.readByte();
+
+        try {
+            itemStack = ItemStack.of(MultiPaper.nbtFromBytes(in.readByteArray()));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeByte(slot);
+
+        try {
+            out.writeByteArray(MultiPaper.nbtToBytes(itemStack.save(new CompoundTag())));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            Entity entity = level.getEntity(uuid);
+
+            if (entity instanceof Container container) {
+                // We can assume the item is being added from the side as it's cross servers, so any side direction such as north will do
+                ItemStack leftOver = HopperBlockEntity.addItem(null, container, itemStack, Direction.NORTH);
+                if (!leftOver.isEmpty()) {
+                    LOGGER.warn("There was a left over " + leftOver + " after adding an item to " + container);
+                    ItemEntity item = new ItemEntity(level, entity.getX(), entity.getY(), entity.getZ(), leftOver);
+                    level.addFreshEntity(item);
+                }
+            } else {
+                LOGGER.warn("Tried to set a " + itemStack + " in slot " + slot + " in a non-existent entity in " + world + " with uuid " + uuid + ": " + entity);
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 019b98edfa8d7f0120099ffc4aad0134cab9094a..a8d65f014702b229e9500f881231f71ff761ee3f 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -46,6 +46,9 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerTouchEntityPacket.class, PlayerTouchEntityPacket::new);
         addPacket(HurtEntityPacket.class, HurtEntityPacket::new);
         addPacket(PlayerResetAttackStrengthPacket.class, PlayerResetAttackStrengthPacket::new);
+        addPacket(AddItemToEntityContainerPacket.class, AddItemToEntityContainerPacket::new);
+        addPacket(AddItemToContainerPacket.class, AddItemToContainerPacket::new);
+        addPacket(PullItemFromContainerPacket.class, PullItemFromContainerPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PullItemFromContainerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PullItemFromContainerPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..646d8e026fee287ec7bb54b2cda97f1006f21419
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PullItemFromContainerPacket.java
@@ -0,0 +1,94 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.Container;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.Hopper;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+
+public class PullItemFromContainerPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PullItemFromContainerPacket.class.getSimpleName());
+
+    private final String world;
+    private final BlockPos source;
+    private final int slot;
+    private final ItemStack itemStack;
+    private final BlockPos destination;
+
+    public PullItemFromContainerPacket(BlockEntity blockEntity, int slot, ItemStack itemStack, Hopper destinationHopper) {
+        this.world = ((ServerLevel) blockEntity.getLevel()).convertable.getLevelId();
+        this.source = blockEntity.getBlockPos();
+        this.slot = slot;
+        this.itemStack = itemStack;
+        this.destination = destinationHopper.getBlockPosition();
+    }
+
+    public PullItemFromContainerPacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.source = in.readBlockPos();
+        this.slot = in.readByte();
+
+        try {
+            this.itemStack = ItemStack.of(MultiPaper.nbtFromBytes(in.readByteArray()));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+
+        this.destination = in.readBlockPos();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(this.world);
+        out.writeBlockPos(this.source);
+        out.writeByte(this.slot);
+
+        try {
+            out.writeByteArray(MultiPaper.nbtToBytes(this.itemStack.save(new CompoundTag())));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+
+        out.writeBlockPos(this.destination);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(this.world)).getHandle();
+            Container container = HopperBlockEntity.getContainerAt(level, this.source);
+
+            if (container == null) {
+                LOGGER.warn("Tried to take a " + this.itemStack + " in slot " + this.slot + " in a non-existent container at " + this.world + " " + this.source);
+            } else if (!ItemStack.isSameItemSameTags(this.itemStack, container.getItem(this.slot))) {
+                LOGGER.warn("Tried to take a " + this.itemStack + " in slot " + this.slot + " from container at " + this.world + " " + this.source + ", but it is a " + container.getItem(this.slot));
+            } else {
+                ItemStack origItemStack = container.getItem(this.slot);
+                int count = Math.min(this.itemStack.getCount(), origItemStack.getCount());
+                ItemStack pulledItemStack = origItemStack.cloneItemStack(true);
+                pulledItemStack.setCount(count);
+                origItemStack.setCount(origItemStack.getCount() - count);
+
+                HopperBlockEntity.IGNORE_TILE_UPDATES = true;
+                container.setItem(this.slot, origItemStack);
+                HopperBlockEntity.IGNORE_TILE_UPDATES = false;
+                container.setChanged();
+
+                connection.send(new AddItemToContainerPacket(level, this.destination, 0, pulledItemStack));
+            }
+        });
+    }
+}
