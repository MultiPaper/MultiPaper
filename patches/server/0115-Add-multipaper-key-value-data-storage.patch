From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 5 May 2022 23:52:58 +1000
Subject: [PATCH] Add multipaper key-value data storage


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c6cf0c4bb626107c00e0fd3fd11c906a1aba155b..a3408853aeb2075cd70a0f8ec13e2ea0b0d813fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -257,8 +257,10 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.CraftMultiPaperDataStorage;
 import puregero.multipaper.CraftMultiPaperNotificationManager;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperDataStorage;
 import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.SubscribeToWorldPacket;
 import puregero.multipaper.permissions.MultiPaperPermissions;
@@ -291,6 +293,7 @@ public final class CraftServer implements Server {
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
     private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
     private final CraftMultiPaperNotificationManager multipaperNotificationManager = new CraftMultiPaperNotificationManager(); // MultiPaper
+    private final CraftMultiPaperDataStorage multipaperDataStorage = new CraftMultiPaperDataStorage(); // MultiPaper
     private File container;
     private Thread inTabCompletion; // MultiPaper
     private WarningState warningState = WarningState.DEFAULT;
@@ -974,6 +977,11 @@ public final class CraftServer implements Server {
     public @NotNull String getLocalServerName() {
         return MultiPaperConfiguration.get().masterConnection.myName;
     }
+
+    @Override
+    public @NotNull MultiPaperDataStorage getMultiPaperDataStorage() {
+        return this.multipaperDataStorage;
+    }
     // MultiPaper end
 
     @Override
diff --git a/src/main/java/puregero/multipaper/CraftMultiPaperDataStorage.java b/src/main/java/puregero/multipaper/CraftMultiPaperDataStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..92cec7d97c1ae20d0780ab607857af66820dcdc2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/CraftMultiPaperDataStorage.java
@@ -0,0 +1,38 @@
+package puregero.multipaper;
+
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.CallDataStorageMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.KeyValueStringMapMessageReply;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.NullableStringMessageReply;
+
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+
+public class CraftMultiPaperDataStorage implements MultiPaperDataStorage {
+    @Override
+    public CompletableFuture<String> get(String key) {
+        return MultiPaper.getConnection()
+                .sendAndAwaitReply(new CallDataStorageMessage(key, CallDataStorageMessage.Action.GET, null), NullableStringMessageReply.class)
+                .thenApply(reply -> reply.result);
+    }
+
+    @Override
+    public CompletableFuture<Map<String, String>> list(String prefix) {
+        return MultiPaper.getConnection()
+                .sendAndAwaitReply(new CallDataStorageMessage(prefix == null ? "" : prefix, CallDataStorageMessage.Action.LIST, null), KeyValueStringMapMessageReply.class)
+                .thenApply(reply -> reply.result);
+    }
+
+    @Override
+    public CompletableFuture<String> set(String key, String value) {
+        return MultiPaper.getConnection()
+                .sendAndAwaitReply(new CallDataStorageMessage(key, CallDataStorageMessage.Action.SET, value), NullableStringMessageReply.class)
+                .thenApply(reply -> reply.result);
+    }
+
+    @Override
+    public CompletableFuture<String> add(String key, String increment) {
+        return MultiPaper.getConnection()
+                .sendAndAwaitReply(new CallDataStorageMessage(key, CallDataStorageMessage.Action.ADD, increment), NullableStringMessageReply.class)
+                .thenApply(reply -> reply.result);
+    }
+}
