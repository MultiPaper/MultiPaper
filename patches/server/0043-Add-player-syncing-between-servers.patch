From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 20:30:35 +1000
Subject: [PATCH] Add player syncing between servers


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 17ebc0ac3d4c91d6818c79e8821681b668bd95c6..e0dc397e12c8e1a07e50102f08bb248b42fda6ac 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -603,7 +603,7 @@ public class Metrics {
                     return minecraftVersion;
                 }));
 
-                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> (int) Bukkit.getOnlinePlayers().stream().filter(MultiPaper::isRealPlayer).count())); // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
                 metrics.addCustomChart(new Metrics.SimplePie("multipaper_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Tuinity - we have our own bstats page // Airplane // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("total_servers", () -> String.valueOf(MultiPaper.getConnection().getServersMap().values().stream().filter(ExternalServer::isAlive).count()))); // MultiPaper
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 7b23535a680d2a8534dcb8dd87770f66fb982c13..1e311b86901b22b0ec09d0fc5188e886110a2c4f 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -164,6 +164,11 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerChangeGamemodePacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -1175,6 +1180,24 @@ public class ServerPlayer extends Player {
             }
             // Paper end
 
+            // MultiPaper start
+            ServerLevel destination = worldserver;
+            MultiPaper.forEachExternalServer(externalServer -> {
+                if (externalServer.getConnection() != null && externalServer.getConnection().isOpen()) {
+                    boolean subscribedToSoruce = externalServer.getConnection().subscribedWorlds.contains(worldserver1.getWorld().getName());
+                    boolean subscribedToDestination = externalServer.getConnection().subscribedWorlds.contains(destination.getWorld().getName());
+
+                    if (subscribedToSoruce && subscribedToDestination) {
+                        externalServer.getConnection().send(new PlayerChangeDimensionPacket(this));
+                    } else if (subscribedToDestination) {
+                        PlayerCreatePacket.sendPlayer(externalServer.getConnection(), this);
+                    } else if (subscribedToSoruce) {
+                        externalServer.getConnection().send(new PlayerRemovePacket(this));
+                    }
+                }
+            });
+            // MultiPaper end
+
             return this;
         }
     }
@@ -1835,6 +1858,8 @@ public class ServerPlayer extends Player {
                 this.setCamera(this);
             }
 
+            MultiPaper.broadcastPacketToExternalServers(this, new PlayerChangeGamemodePacket(this)); // MultiPaper
+
             this.onUpdateAbilities();
             this.updateEffectVisibility();
             return event; // Paper
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 926d0a80cbb55184955ac6720948d2e86683cc57..b1a82769dfbec6eeb9cbeb768e218637c0efa9ed 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -214,6 +214,7 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import org.bukkit.util.NumberConversions;
 import co.aikar.timings.MinecraftTimings; // Paper
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
@@ -1988,7 +1989,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         this.player.disconnect();
         // Paper start - Adventure
         quitMessage = quitMessage == null ? this.server.getPlayerList().remove(this.player) : this.server.getPlayerList().remove(this.player, quitMessage); // Paper - pass in quitMessage to fix kick message not being used
-        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty())) {
+        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty()) && MultiPaper.isRealPlayer(this.player)) { // MultiPaper - Only run for real players
             this.server.getPlayerList().broadcastMessage(PaperAdventure.asVanilla(quitMessage), ChatType.SYSTEM, Util.NIL_UUID);
             // Paper end
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 042be2cf60a9d01698808d84f2e537a5eb952079..8a7acc5f3441dcbee659439f1aba506ff13f7ed0 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -13,14 +13,7 @@ import java.io.File;
 import java.net.SocketAddress;
 import java.nio.file.Path;
 import java.text.SimpleDateFormat;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
@@ -118,6 +111,12 @@ import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRespawnPacket;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -324,6 +323,7 @@ public abstract class PlayerList {
         if (!networkmanager.isConnected()) {
             return;
         }
+        MultiPaper.onPlayerJoin(player); // MultiPaper
         player.didPlayerJoinEvent = true;
         // Paper end
         TranslatableComponent chatmessage;
@@ -603,7 +603,7 @@ public abstract class PlayerList {
         }
 
         PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(entityplayer.getBukkitEntity(), leaveMessage, entityplayer.quitReason); // Paper - quit reason
-        if (entityplayer.didPlayerJoinEvent) this.cserver.getPluginManager().callEvent(playerQuitEvent); // Paper - if we disconnected before join ever fired, don't fire quit
+        if (entityplayer.didPlayerJoinEvent && MultiPaper.isRealPlayer(entityplayer)) this.cserver.getPluginManager().callEvent(playerQuitEvent); // Paper - if we disconnected before join ever fired, don't fire quit // MultiPaper - don't run for external players
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
         if (server.isSameThread()) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
@@ -688,6 +688,8 @@ public abstract class PlayerList {
         this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
         // CraftBukkit end
 
+        MultiPaper.onPlayerDisconnect(entityplayer); // MultiPaper
+
         return entityplayer.didPlayerJoinEvent ? playerQuitEvent.quitMessage() : null; // CraftBukkit // Paper - Adventure // Paper - don't print quit if we never printed join
     }
 
@@ -817,6 +819,12 @@ public abstract class PlayerList {
 
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
         // Paper end
+        // Multipaper start
+        if (MultiPaper.isExternalPlayer(entityplayer)) {
+            ((ExternalPlayer) entityplayer).externalServerConnection.send(new PlayerRespawnPacket(entityplayer, worldserver, flag, location, avoidSuffocation, respawnFlags));
+            return entityplayer;
+        }
+        // MultiPaper end
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
@@ -994,6 +1002,24 @@ public abstract class PlayerList {
         // Paper end
 
         // CraftBukkit end
+
+        // MultiPaper start
+        MultiPaper.forEachExternalServer(externalServer -> {
+            if (externalServer.getConnection() != null && externalServer.getConnection().isOpen()) {
+                boolean subscribedToSoruce = externalServer.getConnection().subscribedWorlds.contains(fromWorld.getName());
+                boolean subscribedToDestination = externalServer.getConnection().subscribedWorlds.contains(worldserver1.getWorld().getName());
+
+                if (subscribedToSoruce && subscribedToDestination) {
+                    externalServer.getConnection().send(new PlayerChangeDimensionPacket(entityplayer1));
+                } else if (subscribedToDestination) {
+                    PlayerCreatePacket.sendPlayer(externalServer.getConnection(), entityplayer1);
+                } else if (subscribedToSoruce) {
+                    externalServer.getConnection().send(new PlayerRemovePacket(entityplayer1));
+                }
+            }
+        });
+        // MultiPaper end
+
         return entityplayer1;
     }
 
@@ -1004,6 +1030,20 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player, i);
     }
 
+    // MultiPaper start - Add player manually
+    public void addPlayer(ServerPlayer player) {
+        players.add(player);
+        playersByUUID.put(player.getUUID(), player);
+        playersByName.put(player.getScoreboardName().toLowerCase(Locale.ROOT), player);
+    }
+
+    public void removePlayer(ServerPlayer player) {
+        players.remove(player);
+        playersByUUID.remove(player.getUUID());
+        playersByName.remove(player.getScoreboardName().toLowerCase(Locale.ROOT));
+    }
+    // MultiPaper end
+
     public void tick() {
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..ec509a18e6cc9937f1216b38f0f4c3f3df66c3d8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -0,0 +1,76 @@
+package puregero.multipaper;
+
+import com.mojang.authlib.GameProfile;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import net.minecraft.network.Connection;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+
+import javax.annotation.Nullable;
+import java.util.UUID;
+
+public class ExternalPlayer extends ServerPlayer {
+
+    private static final Logger LOGGER = LogManager.getLogger(ExternalPlayer.class.getSimpleName());
+    public ExternalServerConnection externalServerConnection;
+    private boolean sendPackets = true;
+
+    public static void create(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode) {
+        new ExternalPlayer(externalServerConnection, name, uuid, world, x, y, z, yaw, pitch, gamemode);
+    }
+
+    public ExternalPlayer(ExternalServerConnection externalServerConnection, String name, UUID uuid, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode) {
+        super(((CraftServer) Bukkit.getServer()).getServer(), ((CraftWorld) Bukkit.getWorld(world)).getHandle(), new GameProfile(uuid, name));
+        this.externalServerConnection = externalServerConnection;
+        this.isRealPlayer = true;
+        this.didPlayerJoinEvent = true;
+        this.valid = true;
+        this.onGround = true;
+        connection = new ServerGamePacketListenerImpl(getServer(), new ExternalPlayerConnection(PacketFlow.CLIENTBOUND), this);
+        setPos(x, y, z);
+        setYRot(yaw);
+        setXRot(pitch);
+        getServer().getPlayerList().addPlayer(this);
+        ((ServerLevel) level).addNewPlayer(this);
+        sendPackets = false;
+        containerMenu.transferTo(containerMenu, getBukkitEntity());
+        initInventoryMenu();
+        sendPackets = true;
+        gameMode.changeGameModeForPlayer(gamemode);
+    }
+
+    private class ExternalPlayerConnection extends Connection {
+        public ExternalPlayerConnection(PacketFlow side) {
+            super(side);
+        }
+
+        @Override
+        public void setReadOnly() {
+            // Do nothing
+        }
+ 
+        @Override
+        public boolean isConnected() {
+            return true;
+        }
+
+        @Override
+        public void send(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback) {
+            if (sendPackets) {
+
+            } else {
+//                LOGGER.info("Not sending packet " + packet.getClass().getSimpleName());
+            }
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 806079a0a930f0f6ab4fb3523912cbb4ed2e5c65..e7793a1b97be384917d9117e77b4a7996118cb41 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -1,6 +1,8 @@
 package puregero.multipaper;
 
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.level.ServerPlayer;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacketSerializer;
 import puregero.multipaper.externalserverprotocol.HelloPacket;
@@ -76,6 +78,12 @@ public class ExternalServerConnection extends Thread implements Closeable {
         }
 
         sendThread.shutdown();
+
+        for (ServerPlayer player : DedicatedServer.getServer().getPlayerList().players) {
+            if (player instanceof ExternalPlayer && ((ExternalPlayer) player).externalServerConnection == this) {
+                MultiPaper.runSync(() -> player.connection.disconnect("External server disconnected"));
+            }
+        }
     }
 
     public void send(ExternalServerPacket packet) {
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index de38fd3dd41815791a07ad013c37cfe7f9f2a21d..ca46e1a515db6458b31dc7e19c9d2fd9d66a53c9 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -4,7 +4,12 @@ import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.craftbukkit.entity.CraftEntity;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -14,6 +19,7 @@ import java.util.function.Consumer;
 import java.util.function.Supplier;
 
 public class MultiPaper {
+
     private static MultiPaperConnection multiPaperConnection = null;
     private static ExternalServerSocket externalServerSocket = null;
 
@@ -92,9 +98,14 @@ public class MultiPaper {
         }
     }
 
+    public static void tick() {
+    }
+
     public static void sendTickTime(long time, double tps) {
         try {
             getConnection().writeTickTime(time, tps);
+
+            tick();
         } catch (IOException e) {
             e.printStackTrace();
         }
@@ -147,4 +158,34 @@ public class MultiPaper {
     public static void broadcastPacketToExternalServers(ServerPlayer player, ExternalServerPacket packet) {
         broadcastPacketToExternalServers(player.getLevel().getWorld().getName(), packet);
     }
+
+    public static void onPlayerJoin(ServerPlayer player) {
+        forEachExternalServer(externalServer -> {
+            if (externalServer.getConnection() != null && externalServer.getConnection().isOpen() && externalServer.getConnection().subscribedWorlds.contains(player.getLevel().getWorld().getName())) {
+                PlayerCreatePacket.sendPlayer(externalServer.getConnection(), player);
+            }
+        });
+    }
+
+    public static void onPlayerDisconnect(ServerPlayer player) {
+        if (!(player instanceof ExternalPlayer)) {
+            broadcastPacketToExternalServers(player, new PlayerRemovePacket(player));
+        }
+    }
+
+    public static boolean isRealPlayer(Entity entity) {
+        return entity instanceof ServerPlayer && !(entity instanceof ExternalPlayer);
+    }
+
+    public static boolean isRealPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isRealPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
+
+    public static boolean isExternalPlayer(Entity entity) {
+        return entity instanceof ExternalPlayer;
+    }
+
+    public static boolean isExternalPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isExternalPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
index 81d61a2d671fedd031eb2725ac3ab45622e196b1..ae0855ca9cc5328b2fad1cd505a28ce44f57acaa 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacket.java
@@ -2,8 +2,10 @@ package puregero.multipaper.externalserverprotocol;
 
 import puregero.multipaper.ExternalServerConnection;
 
+import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.UUID;
 
 public abstract class ExternalServerPacket {
 
@@ -11,4 +13,13 @@ public abstract class ExternalServerPacket {
 
     public abstract void write(DataOutputStream out) throws IOException;
 
+    protected UUID readUUID(DataInputStream in) throws IOException {
+        return new UUID(in.readLong(), in.readLong());
+    }
+
+    protected void writeUUID(DataOutputStream out, UUID uuid) throws IOException {
+        out.writeLong(uuid.getMostSignificantBits());
+        out.writeLong(uuid.getLeastSignificantBits());
+    }
+
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 5f34f3e588debed182f77f90a315569d8b149fbd..e6088d96e11356c811bd3731461d9a0b1a79254a 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -14,6 +14,11 @@ public class ExternalServerPacketSerializer {
     static {
         addPacket(HelloPacket.class, HelloPacket::new);
         addPacket(SubscribeToWorldPacket.class, SubscribeToWorldPacket::new);
+        addPacket(PlayerCreatePacket.class, PlayerCreatePacket::new);
+        addPacket(PlayerRemovePacket.class, PlayerRemovePacket::new);
+        addPacket(PlayerChangeGamemodePacket.class, PlayerChangeGamemodePacket::new);
+        addPacket(PlayerRespawnPacket.class, PlayerRespawnPacket::new);
+        addPacket(PlayerChangeDimensionPacket.class, PlayerChangeDimensionPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a50cedd8979b933963d2458b66945d99e1de84f
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java
@@ -0,0 +1,67 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerChangeDimensionPacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+
+    public PlayerChangeDimensionPacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+        this.world = player.getLevel().convertable.getLevelId();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+    }
+
+    public PlayerChangeDimensionPacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        world = in.readUTF();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        out.writeUTF(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            // Remove from old world
+            player.getLevel().removePlayerImmediately(player, Entity.RemovalReason.DISCARDED);
+
+            player.setPosRaw(x, y, z);
+
+            // Add to new world
+            player.setLevel(level);
+            player.unsetRemoved();
+            level.addRespawnedPlayer(player);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..23acee115e2c7f3d7bfc9605b6f067c30f526ac2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java
@@ -0,0 +1,39 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerChangeGamemodePacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final GameType gamemode;
+
+    public PlayerChangeGamemodePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+        this.gamemode = player.gameMode.getGameModeForPlayer();
+    }
+
+    public PlayerChangeGamemodePacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        gamemode = GameType.byId(in.read());
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        out.write(gamemode.getId());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> MinecraftServer.getServer().getPlayerList().getPlayer(uuid).gameMode.changeGameModeForPlayer(gamemode));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..e5fa6a719e7c4c9f1ee5085c687469c5ad8ce522
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -0,0 +1,76 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerCreatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerCreatePacket.class.getSimpleName());
+
+    private final String name;
+    private final UUID uuid;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+    private float yaw;
+    private float pitch;
+    private final GameType gamemode;
+
+    public PlayerCreatePacket(ServerPlayer player) {
+        this.name = player.getScoreboardName();
+        this.uuid = player.getUUID();
+        this.world = player.getLevel().convertable.getLevelId();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+        this.yaw = player.getYRot();
+        this.pitch = player.getXRot();
+        this.gamemode = player.gameMode.getGameModeForPlayer();
+    }
+
+    public PlayerCreatePacket(DataInputStream in) throws IOException {
+        name = in.readUTF();
+        uuid = readUUID(in);
+        world = in.readUTF();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        yaw = in.readFloat();
+        pitch = in.readFloat();
+        gamemode = GameType.byId(in.read());
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        out.writeUTF(name);
+        writeUUID(out, uuid);
+        out.writeUTF(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+        out.write(gamemode.getId());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        LOGGER.info("Adding player " + name + " (" + uuid + ")");
+        MultiPaper.runSync(() -> ExternalPlayer.create(connection, name, uuid, world, x, y, z, yaw, pitch, gamemode));
+    }
+
+    public static void sendPlayer(ExternalServerConnection connection, ServerPlayer player) {
+        connection.send(new PlayerCreatePacket(player));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2012d93a098ddacf707159b7fccd0a1820776ae
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
@@ -0,0 +1,45 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerRemovePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerRemovePacket.class.getSimpleName());
+
+    private final UUID uuid;
+
+    public PlayerRemovePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+    }
+
+    public PlayerRemovePacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+        if (player == null) {
+            LOGGER.warn("Tried to remove a non-existent player with uuid " + uuid);
+            return;
+        }
+
+        MultiPaper.runSync(() -> player.connection.disconnect("Disconnected from external server"));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..0ca776a577b4084c8379eb9db540eb851787a506
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java
@@ -0,0 +1,88 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerRespawnPacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final String world;
+    private final boolean alive;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final float yaw;
+    private final float pitch;
+    private final boolean avoidSuffocation;
+    private final PlayerRespawnEvent.RespawnFlag[] respawnFlags;
+
+    public PlayerRespawnPacket(ServerPlayer player, ServerLevel worldserver, boolean alive, Location location, boolean avoidSuffocation, PlayerRespawnEvent.RespawnFlag[] respawnFlags) {
+        this.uuid = player.getUUID();
+        this.world = worldserver.convertable.getLevelId();
+        this.alive = alive;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yaw = location.getYaw();
+        this.pitch = location.getPitch();
+        this.avoidSuffocation = avoidSuffocation;
+        this.respawnFlags = respawnFlags;
+    }
+
+    public PlayerRespawnPacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        world = in.readUTF();
+        alive = in.readBoolean();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        yaw = in.readFloat();
+        pitch = in.readFloat();
+        avoidSuffocation = in.readBoolean();
+
+        respawnFlags = new PlayerRespawnEvent.RespawnFlag[in.readInt()];
+        for (int i = 0; i < respawnFlags.length; i++) {
+            respawnFlags[i] = PlayerRespawnEvent.RespawnFlag.valueOf(in.readUTF());
+        }
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        out.writeUTF(world);
+        out.writeBoolean(alive);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+        out.writeBoolean(avoidSuffocation);
+
+        out.writeInt(respawnFlags.length);
+        for (PlayerRespawnEvent.RespawnFlag flag : respawnFlags) {
+            out.writeUTF(flag.name());
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            level.getServer().getPlayerList().respawn(player, level, alive, new Location(level.getWorld(), x, y, z, yaw, pitch), avoidSuffocation, respawnFlags);
+        });
+    }
+}
