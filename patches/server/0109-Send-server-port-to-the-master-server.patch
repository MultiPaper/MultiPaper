From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 5 Jan 2022 16:43:52 +1000
Subject: [PATCH] Send server port to the master server


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 1f77ea047bb67e3d2f8d81f0d3df1382aa01d972..9499bfed901d6a6877a62cae3ae5ce43d7127105 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -263,6 +263,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.setPort(dedicatedserverproperties.serverPort);
         }
         bindAddress = new java.net.InetSocketAddress(inetaddress, this.getPort());
+        MultiPaper.setPort(this.getPort()); // MultiPaper
         }
         // Paper end
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index df142a1b200fa4ddeedf6fd7b74e94f0bf56f861..0d39f6047dc353f8f567317750c19f8ef5e6b866 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -592,4 +592,8 @@ public class MultiPaper {
     public static void chunkChangedStatus(ServerLevel level, ChunkPos pos, ChunkStatus status) {
         getConnection().send(new ChunkChangedStatusMessage(level.getWorld().getName(), pos.x, pos.z, Registry.CHUNK_STATUS.getKey(status).toString()));
     }
+
+    public static void setPort(int port) {
+        getConnection().setPort(port);
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index fcde336f86e296136b830dab96f4283b9cd00f30..67671bda809b09c4c6e2246f97b423f4a3c9ae4c 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -61,6 +61,7 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
     private final Map<String, ExternalServer> serversMap = new ConcurrentHashMap<>();
     public String secret;
     public Map<String, byte[]> dataCache = Maps.newHashMap();
+    public int port = -1;
 
     public MultiPaperConnection() {
         System.setProperty("multipaper.netty.threads", System.getProperty("multipaper.netty.threads", Integer.toString(Math.min(Runtime.getRuntime().availableProcessors(), 3))));
@@ -98,6 +99,10 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
         LOGGER.info("Connected to " + channel.remoteAddress());
         channel.write(new HelloMessage(myName, thisServersUuid));
 
+        if (port >= 0) {
+            channel.write(new SetPortMessage(port));
+        }
+
         for (MasterBoundMessage unhandledRequest : unhandledRequests) {
             channel.write(unhandledRequest);
         }
@@ -170,6 +175,14 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
         return serversMap;
     }
 
+    public void setPort(int port) {
+        if (!MultiPaperConfiguration.get().masterConnection.advertiseToBuiltInProxy) {
+            return;
+        }
+        this.port = port;
+        send(new SetPortMessage(port));
+    }
+
     @Override
     public void handle(ServerInfoUpdateMessage message) {
         ExternalServer server = serversMap.computeIfAbsent(message.name, key -> new ExternalServer(key, key.equals(myName)));
