From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mohammed jasem alaajel <xrambad@gmail.com>
Date: Sun, 19 Feb 2023 16:10:33 +0400
Subject: [PATCH] add fake entity api


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4f8e2791ed45ddca5fec77d24e52b490146e2a2e..7a2c1178caa4c68e004746f05c67ad029d9ad9d2 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -59,6 +59,7 @@ import net.minecraft.network.protocol.game.VecDeltaCodec;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.obfuscate.DontObfuscate;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import io.papermc.paper.util.MCUtil;
@@ -411,7 +412,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
     public boolean collidingWithWorldBorder; // Paper
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
-
+    public volatile boolean fake = false; // MultiPaper - Fake entity nms
     public void setOrigin(@javax.annotation.Nonnull Location location) {
         this.origin = location.toVector();
         this.originWorld = location.getWorld().getUID();
@@ -4904,4 +4905,19 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return false;
     }
     // Purpur end
+    // MultiPaper start - Fake entity nms
+    @DontObfuscate
+    public boolean isFake() {
+        return this.fake;
+    }
+
+    @DontObfuscate
+    public void setFake() {
+        // we need to make sure that actual players are not set fake
+        if (this instanceof ServerPlayer serverPlayer && getServer().getPlayerList().players.contains(serverPlayer)) {
+            throw new IllegalStateException("Online player cannot be set as fake entity");
+        }
+        this.fake = true;
+    }
+    // MultiPaper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 68abc441d8b3ffebe6ac2475899cf32b445c3d73..f7b950e0d71bc545721ad417d1e7611eb9403977 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1470,4 +1470,15 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         getHandle().immuneToFire = fireImmune;
     }
     // Purpur end
+    // MultiPaper start - add fake entity api
+    @Override
+    public void setFake() {
+        this.getHandle().setFake();
+    }
+
+    @Override
+    public boolean isFake() {
+        return this.getHandle().isFake();
+    }
+    // MultiPaper stop
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
index 4a7ce8097a479d474dab78f230987bc563c73e69..68103e725cd9b23ffcc51e7b70fa040ab705c4ed 100644
--- a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
+++ b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
@@ -335,7 +335,7 @@ public class MultiPaperEntitiesHandler {
     }
 
     public static boolean shouldSyncEntity(Entity entity) {
-        return entity.shouldBeSaved() || entity instanceof LightningBolt || entity instanceof LeashFenceKnotEntity;
+        return !entity.isFake() && (entity.shouldBeSaved() || entity instanceof LightningBolt || entity instanceof LeashFenceKnotEntity);
     }
 
     public static void onEntityRemove(Entity entity, Entity.RemovalReason reason) {
diff --git a/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java b/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java
index 6b212628a7c4e4bc9d3458fc7a79d88bbf866c47..54126110ba25f6ac16bfe55b19c0e39d3217da3b 100644
--- a/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java
+++ b/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java
@@ -17,6 +17,7 @@ public class MultiPaperEntityInteractHandler {
     private static final Logger LOGGER = LogManager.getLogger(MultiPaperEntityInteractHandler.class.getSimpleName());
 
     public static ExternalServerConnection getOwner(Entity entity) {
+        if (entity.isFake()) return null;
         NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(entity);
 
         if (MultiPaperEntitiesHandler.getControllingPassenger(entity) instanceof ExternalPlayer externalPlayer) {
@@ -29,6 +30,7 @@ public class MultiPaperEntityInteractHandler {
     }
 
     public static boolean handleEntityInteract(ServerPlayer player, Entity entity, ServerboundInteractPacket packet) {
+        if (entity.isFake()) return false;
         ExternalServerConnection owner = getOwner(entity);
         if (owner != null) {
             owner.send(new PlayerActionOnEntityPacket(player, entity, packet));
@@ -40,7 +42,7 @@ public class MultiPaperEntityInteractHandler {
 
     public static boolean touchEntity(Player player, Entity entity) {
         NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(entity);
-
+        if (entity.isFake()) return false;
         if (MultiPaper.isRealPlayer(entity)) {
             return false;
         } else if (MultiPaper.isChunkExternal(newChunkHolder) && !(entity instanceof FishingHook)) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java
index 1566c1af1db1c2c727ded98d266920dbf7236bd5..79e06c335a29769d83cdc73bf2426675382b1808 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/RequestEntityPacket.java
@@ -54,6 +54,7 @@ public class RequestEntityPacket extends ExternalServerPacket {
             Entity entity = level.getEntity(uuid);
             Visibility visibility = level.getEntityLookup().getEntityStatusByUUID(uuid);
             if (entity != null && visibility != null && visibility.isAccessible()) {
+                if (entity.isFake()) return;
                 if (entity instanceof ServerPlayer serverPlayer) {
                     triedToRequestPlayer(connection, serverPlayer);
                     return;
