From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 11 Dec 2021 22:31:23 +1000
Subject: [PATCH] Sync potion effects


diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index 6d5080ba244daf3b93d61d28ee0b88eb56bac723..3c5833e50a2acdf9da61fb8cb1a2d418a2d8d4ce 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -114,7 +114,7 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
             this.amplifier = that.amplifier;
             this.duration = that.duration;
             bl = true;
-        } else if (that.duration > this.duration) {
+        } else if (that.duration >= this.duration) { // MultiPaper - Override the effect even if they're the same duration
             if (that.amplifier == this.amplifier) {
                 this.duration = that.duration;
                 bl = true;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 30079f4a8128adebb0995402de5800c9e96477c3..ec3031f5677488b87008bd7e7ab90ae63b5108f3 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -143,6 +143,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 import puregero.multipaper.ExternalServerConnection;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEffectsHandler;
 import puregero.multipaper.MultiPaperEntityInteractHandler;
 import puregero.multipaper.externalserverprotocol.EntityUpdatePacket;
 import puregero.multipaper.externalserverprotocol.HurtEntityPacket;
@@ -1276,29 +1277,32 @@ public abstract class LivingEntity extends Entity {
 
     protected void onEffectAdded(MobEffectInstance effect, @Nullable Entity source) {
         this.effectsDirty = true;
-        if (!this.level.isClientSide) {
+        if (!this.level.isClientSide && !MultiPaper.isExternalPlayer(this)) { // MultiPaper
             effect.getEffect().addAttributeModifiers(this, this.getAttributes(), effect.getAmplifier());
         }
 
+        MultiPaperEffectsHandler.onEffectAdd(this, effect); // MultiPaper
     }
 
     protected void onEffectUpdated(MobEffectInstance effect, boolean reapplyEffect, @Nullable Entity source) {
         this.effectsDirty = true;
-        if (reapplyEffect && !this.level.isClientSide) {
+        if (reapplyEffect && !MultiPaper.isExternalPlayer(this)) { // MultiPaper
             MobEffect mobeffectlist = effect.getEffect();
 
             mobeffectlist.removeAttributeModifiers(this, this.getAttributes(), effect.getAmplifier());
             mobeffectlist.addAttributeModifiers(this, this.getAttributes(), effect.getAmplifier());
         }
 
+        MultiPaperEffectsHandler.onEffectAdd(this, effect); // MultiPaper
     }
 
     protected void onEffectRemoved(MobEffectInstance effect) {
         this.effectsDirty = true;
-        if (!this.level.isClientSide) {
+        if (!this.level.isClientSide && !MultiPaper.isExternalPlayer(this)) { // MultiPaper
             effect.getEffect().removeAttributeModifiers(this, this.getAttributes(), effect.getAmplifier());
         }
 
+        MultiPaperEffectsHandler.onEffectRemove(this, effect); // MultiPaper
     }
 
     // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
diff --git a/src/main/java/puregero/multipaper/MultiPaperEffectsHandler.java b/src/main/java/puregero/multipaper/MultiPaperEffectsHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..271550f662434fbd83b7d6c422de72d7bdf23e28
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperEffectsHandler.java
@@ -0,0 +1,54 @@
+package puregero.multipaper;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.LivingEntity;
+import puregero.multipaper.externalserverprotocol.EntityUpdateEffectPacket;
+import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
+
+import java.util.function.Supplier;
+
+public class MultiPaperEffectsHandler {
+    private static boolean updatingEffects = false;
+
+    public static void onEffectAdd(LivingEntity entity, MobEffectInstance effect) {
+        if (updatingEffects) {
+            return;
+        }
+
+        broadcast(entity, () -> new EntityUpdateEffectPacket(entity, effect, false));
+    }
+
+    public static void onEffectRemove(LivingEntity entity, MobEffectInstance effect) {
+        if (updatingEffects) {
+            return;
+        }
+
+        broadcast(entity, () -> new EntityUpdateEffectPacket(entity, effect, true));
+
+
+    }
+
+    private static void broadcast(LivingEntity entity, Supplier<ExternalServerPacket> packetSupplier) {
+        if (entity instanceof ServerPlayer serverPlayer) {
+            MultiPaper.broadcastPacketToExternalServers(serverPlayer, packetSupplier.get());
+        } else {
+            NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(entity);
+            if (newChunkHolder != null) {
+                MultiPaper.broadcastPacketToExternalServers(newChunkHolder.externalEntitiesSubscribers, packetSupplier);
+            }
+        }
+    }
+
+    public static void handle(Entity entity, MobEffectInstance effect, boolean remove) {
+        updatingEffects = true;
+        if (remove) {
+            ((LivingEntity) entity).removeEffect(effect.getEffect());
+        } else {
+            ((LivingEntity) entity).addEffect(effect);
+        }
+        updatingEffects = false;
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateEffectPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateEffectPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..38c8469e96a680b74a36c096bdbbfd1ffce75ac8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityUpdateEffectPacket.java
@@ -0,0 +1,69 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperEffectsHandler;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class EntityUpdateEffectPacket extends ExternalServerPacket {
+
+    private final String world;
+    private final UUID uuid;
+    private final boolean remove;
+    private final byte[] data;
+
+    public EntityUpdateEffectPacket(Entity entity, MobEffectInstance effect, boolean remove) {
+        this.world = ((ServerLevel) entity.level).convertable.getLevelId();
+        this.uuid = entity.getUUID();
+        this.remove = remove;
+
+        CompoundTag tag = effect.save(new CompoundTag());
+
+        try {
+            this.data = MultiPaper.nbtToBytes(tag);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public EntityUpdateEffectPacket(FriendlyByteBuf in) {
+        this.world = in.readUtf();
+        this.uuid = in.readUUID();
+        this.remove = in.readBoolean();
+        this.data = in.readByteArray();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeBoolean(remove);
+        out.writeByteArray(data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            try {
+                ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+                Entity entity = level.getEntity(uuid);
+                CompoundTag tag = MultiPaper.nbtFromBytes(data);
+                MobEffectInstance effect = MobEffectInstance.load(tag);
+                if (entity != null) {
+                    MultiPaperEffectsHandler.handle(entity, effect, remove);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index deb3062bcfee3e9dc979c6bacdf7bea093344707..7a23ecddb8b079fc29cae088092dfb9f9b01fb65 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -54,6 +54,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PluginNotificationPacket.class, PluginNotificationPacket::new);
         addPacket(PlayerSayChatPacket.class, PlayerSayChatPacket::new);
         addPacket(PlayerFoodUpdatePacket.class, PlayerFoodUpdatePacket::new);
+        addPacket(EntityUpdateEffectPacket.class, EntityUpdateEffectPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
