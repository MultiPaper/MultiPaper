From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 1 Aug 2022 13:28:37 +1000
Subject: [PATCH] Handle pistons on the chunk's server


diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index b2f6fa3946366feed7e0c5604b42751c98f09e9f..3964c6ca0b7ba243beb666ead03df5272d06b879 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -31,6 +31,7 @@ import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.PistonType;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.level.pathfinder.PathComputationType;
@@ -43,6 +44,7 @@ import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
 import org.bukkit.event.block.BlockPistonExtendEvent;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PistonMoveBlockStartPacket;
 import puregero.multipaper.mastermessagingprotocol.ChunkKey;
 import puregero.multipaper.mastermessagingprotocol.messages.masterbound.RequestChunkOwnershipMessage;
 import puregero.multipaper.mastermessagingprotocol.messages.serverbound.BooleanMessageReply;
@@ -442,19 +444,21 @@ public class PistonBaseBlock extends DirectionalBlock {
 
                 takeControlOfChunks.add(new ChunkPos(blockposition3)); // MultiPaper
 
-                world.setBlock(blockposition3, iblockdata2, 68);
+                // world.setBlock(blockposition3, iblockdata2, 68); // MultiPaper - handled ourselves
                 // Paper start - fix a variety of piston desync dupes
                 if (!allowDesync) {
                     iblockdata1 = world.getBlockState(oldPos);
                     map.replace(oldPos, iblockdata1);
                 }
-                world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(blockposition3, iblockdata2, allowDesync ? list1.get(k) : iblockdata1, dir, retract, false));
+
+                PistonMoveBlockStartPacket.startBlockMove((ServerLevel) world, oldPos, blockposition3, dir, retract);
+                // world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(blockposition3, iblockdata2, allowDesync ? list1.get(k) : iblockdata1, dir, retract, false)); // MultiPaper - handled ourselves
                 if (!allowDesync) {
-                    world.setBlock(oldPos, Blocks.AIR.defaultBlockState(), 2 | 4 | 16 | 1024); // set air to prevent later physics updates from seeing this block
+                    // world.setBlock(oldPos, Blocks.AIR.defaultBlockState(), 2 | 4 | 16 | 1024); // set air to prevent later physics updates from seeing this block // MultiPaper - handled ourselves
                 }
                 // Paper end - fix a variety of piston desync dupes
                 aiblockdata[j++] = iblockdata1;
-                ((ServerLevel) world).getChunkSource().blockChanged(blockposition3); // MultiPaper
+                // ((ServerLevel) world).getChunkSource().blockChanged(blockposition3); // MultiPaper
             }
 
             if (retract) {
@@ -514,6 +518,20 @@ public class PistonBaseBlock extends DirectionalBlock {
                 world.updateNeighborsAt(blockposition1, Blocks.PISTON_HEAD);
             }
 
+            // MultiPaper start - broadcast changes to sync other servers
+            LevelChunk chunk = world.getChunkIfLoaded(pos);
+            if (chunk != null) {
+                chunk.playerChunk.broadcastChangesToOtherServers(chunk);
+            }
+
+            if (retract) {
+                LevelChunk facingChunk = world.getChunkIfLoaded(blockposition1);
+                if (facingChunk != null) {
+                    facingChunk.playerChunk.broadcastChangesToOtherServers(facingChunk);
+                }
+            }
+            // MultiPaper end
+
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index f9413d8041700bab8ac175ae225d6010432a818e..7c5a840cffaa06787689247b8b8896139b31c801 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -30,7 +30,7 @@ public class PistonMovingBlockEntity extends BlockEntity {
     private static final int TICKS_TO_EXTEND = 2;
     private static final double PUSH_OFFSET = 0.01D;
     public static final double TICK_MOVEMENT = 0.51D;
-    private BlockState movedState = Blocks.AIR.defaultBlockState();
+    public BlockState movedState = Blocks.AIR.defaultBlockState(); // MultiPaper - make public
     private Direction direction;
     private boolean extending;
     private boolean isSourcePiston;
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 0aa7f26833c1e572e3339c5734b7d4c53b17781a..5901037507fc498a45e1916ee97c39a3c6b4ca81 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -77,6 +77,8 @@ public class ExternalServerPacketSerializer {
         addPacket(SetPoiPacket.class, SetPoiPacket::new);
         addPacket(AddDeltaMovementPacket.class, AddDeltaMovementPacket::new);
         addPacket(GameEventPacket.class, GameEventPacket::new);
+        addPacket(PistonMoveBlockStartPacket.class, PistonMoveBlockStartPacket::new);
+        addPacket(PistonMoveBlockEndPacket.class, PistonMoveBlockEndPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PistonMoveBlockEndPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PistonMoveBlockEndPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..3a3c2ec2a09f55e1169da2690999b4c1574717cc
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PistonMoveBlockEndPacket.java
@@ -0,0 +1,119 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.piston.MovingPistonBlock;
+import net.minecraft.world.level.block.piston.PistonBaseBlock;
+import net.minecraft.world.level.block.piston.PistonMovingBlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.storage.loot.LootContext;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
+import net.minecraft.world.phys.Vec3;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperChunkHandler;
+
+import java.util.UUID;
+
+public class PistonMoveBlockEndPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PistonMoveBlockEndPacket.class.getSimpleName());
+
+    public static void finishBlockMove(ServerLevel level, BlockPos from, BlockPos to, Direction pistonDir, boolean retract, BlockState blockState, boolean isExternal) {
+        LevelChunk chunk = level.getChunkIfLoaded(to);
+
+        if (!MultiPaper.isChunkExternal(chunk)) {
+            if (level.getBlockEntity(to) instanceof PistonMovingBlockEntity pistonMovingBlockEntity && pistonMovingBlockEntity.movedState.is(Blocks.AIR)) {
+                pistonMovingBlockEntity.movedState = blockState;
+            } else if (level.getBlockState(to).is(Blocks.AIR) || level.getBlockState(to).is(Blocks.PISTON_HEAD)) {
+                BlockState movingPiston = Blocks.MOVING_PISTON.defaultBlockState().setValue(PistonBaseBlock.FACING, pistonDir);
+                MultiPaperChunkHandler.blockUpdateChunk = chunk; // Don't call onRemove on the piston head
+                level.setBlock(to, movingPiston, 68);
+                MultiPaperChunkHandler.blockUpdateChunk = null;
+                level.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(to, movingPiston, blockState, pistonDir, retract, false));
+            } else {
+                LootContext.Builder loottableinfo_builder = (new LootContext.Builder(level)).withRandom(level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(to)).withParameter(LootContextParams.TOOL, new ItemStack(Items.NETHERITE_PICKAXE)).withOptionalParameter(LootContextParams.BLOCK_ENTITY, null);
+                blockState.getDrops(loottableinfo_builder).forEach(item -> {
+                    LOGGER.info("Dropping " + item + " at " + to);
+                    ItemEntity entity = new ItemEntity(level, to.getX() + 0.5, to.getY() + 0.5, to.getZ() + 0.5, item);
+                    entity.pickupDelay = 10;
+                    level.addFreshEntity(entity, CreatureSpawnEvent.SpawnReason.CUSTOM);
+                });
+            }
+            level.getChunkSource().blockChanged(to);
+
+            if (isExternal) {
+                chunk.playerChunk.broadcastChangesToOtherServers(chunk);
+            }
+            return;
+        }
+
+        // Ensure any changes have already been sent over before the server executes the piston move
+        chunk.playerChunk.broadcastChangesToOtherServers(chunk);
+
+        chunk.externalOwner.getConnection().send(new PistonMoveBlockEndPacket(level, from, to, pistonDir, retract, blockState));
+    }
+
+    private final UUID worldUUID;
+    private final BlockPos from;
+    private final BlockPos to;
+    private final Direction pistonDir;
+    private final boolean retract;
+    private final BlockState blockState;
+
+    public PistonMoveBlockEndPacket(ServerLevel level, BlockPos from, BlockPos to, Direction pistonDir, boolean retract, BlockState blockState) {
+        this.worldUUID = level.getWorld().getUID();
+        this.from = from;
+        this.to = to;
+        this.pistonDir = pistonDir;
+        this.retract = retract;
+        this.blockState = blockState;
+    }
+
+    public PistonMoveBlockEndPacket(FriendlyByteBuf in) {
+        this.worldUUID = in.readUUID();
+        this.from = in.readBlockPos();
+        this.to = in.readBlockPos();
+        this.pistonDir = in.readEnum(Direction.class);
+        this.retract = in.readBoolean();
+        this.blockState = in.readById(Block.BLOCK_STATE_REGISTRY);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(this.worldUUID);
+        out.writeBlockPos(this.from);
+        out.writeBlockPos(this.to);
+        out.writeEnum(this.pistonDir);
+        out.writeBoolean(this.retract);
+        out.writeId(Block.BLOCK_STATE_REGISTRY, this.blockState);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            World world = Bukkit.getWorld(this.worldUUID);
+
+            if (!(world instanceof CraftWorld craftWorld)) {
+                LOGGER.warn(connection.externalServer.getName() + " tried to move a block in world " + this.worldUUID + ", but we don't have that world loaded");
+                return;
+            }
+
+            finishBlockMove(craftWorld.getHandle(), from, to, pistonDir, retract, blockState, true);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PistonMoveBlockStartPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PistonMoveBlockStartPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..7f4bc2a3d2483a71fe565d15a51b10117547eae3
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PistonMoveBlockStartPacket.java
@@ -0,0 +1,108 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.piston.MovingPistonBlock;
+import net.minecraft.world.level.block.piston.PistonBaseBlock;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PistonMoveBlockStartPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PistonMoveBlockStartPacket.class.getSimpleName());
+
+    public static void startBlockMove(ServerLevel level, BlockPos from, BlockPos to, Direction pistonDir, boolean retract) {
+        startBlockMove(level, from, to, pistonDir, retract, false);
+    }
+
+    public static void startBlockMove(ServerLevel level, BlockPos from, BlockPos to, Direction pistonDir, boolean retract, boolean isExternal) {
+        LevelChunk fromChunk = level.getChunkIfLoaded(from);
+        LevelChunk toChunk = level.getChunkIfLoaded(to);
+
+        if (MultiPaper.isChunkExternal(fromChunk) && !MultiPaper.isChunkExternal(toChunk)) {
+            // Place a moving piston head in our chunk so that it can start ticking and maintain proper timing
+            BlockState movingPiston = Blocks.MOVING_PISTON.defaultBlockState().setValue(PistonBaseBlock.FACING, pistonDir);
+            level.setBlock(to, movingPiston, 68);
+            level.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(to, movingPiston, Blocks.AIR.defaultBlockState(), pistonDir, retract, false));
+            level.getChunkSource().blockChanged(to);
+        }
+
+        if (!MultiPaper.isChunkExternal(fromChunk)) {
+            BlockState blockState = level.getBlockState(from);
+            if (PistonBaseBlock.isPushable(blockState, level, from, retract ? pistonDir : pistonDir.getOpposite(), true, pistonDir)) {
+                PistonMoveBlockEndPacket.finishBlockMove(level, from, to, pistonDir, retract, blockState, isExternal);
+                level.setBlock(from, Blocks.AIR.defaultBlockState(), 2 | 4 | 16 | 1024);
+                level.getChunkSource().blockChanged(from);
+            }
+
+            if (isExternal) {
+                fromChunk.playerChunk.broadcastChangesToOtherServers(fromChunk);
+            }
+
+            return;
+        }
+
+        // Ensure any changes have already been sent over before the server executes the piston move
+        fromChunk.playerChunk.broadcastChangesToOtherServers(fromChunk);
+        toChunk.playerChunk.broadcastChangesToOtherServers(toChunk);
+
+        fromChunk.externalOwner.getConnection().send(new PistonMoveBlockStartPacket(level, from, to, pistonDir, retract));
+    }
+
+    private final UUID worldUUID;
+    private final BlockPos from;
+    private final BlockPos to;
+    private final Direction pistonDir;
+    private final boolean retract;
+
+    public PistonMoveBlockStartPacket(ServerLevel level, BlockPos from, BlockPos to, Direction pistonDir, boolean retract) {
+        this.worldUUID = level.getWorld().getUID();
+        this.from = from;
+        this.to = to;
+        this.pistonDir = pistonDir;
+        this.retract = retract;
+    }
+
+    public PistonMoveBlockStartPacket(FriendlyByteBuf in) {
+        this.worldUUID = in.readUUID();
+        this.from = in.readBlockPos();
+        this.to = in.readBlockPos();
+        this.pistonDir = in.readEnum(Direction.class);
+        this.retract = in.readBoolean();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(this.worldUUID);
+        out.writeBlockPos(this.from);
+        out.writeBlockPos(this.to);
+        out.writeEnum(this.pistonDir);
+        out.writeBoolean(this.retract);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            World world = Bukkit.getWorld(this.worldUUID);
+
+            if (!(world instanceof CraftWorld craftWorld)) {
+                LOGGER.warn(connection.externalServer.getName() + " tried to move a block in world " + this.worldUUID + ", but we don't have that world loaded");
+                return;
+            }
+
+            startBlockMove(craftWorld.getHandle(), from, to, pistonDir, retract, true);
+        });
+    }
+}
