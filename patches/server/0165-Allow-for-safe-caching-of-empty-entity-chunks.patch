From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 23 Jun 2022 19:51:08 +1000
Subject: [PATCH] Allow for safe caching of empty entity chunks

This allows MultiPaper to not have to write empty entity chunks
when they are already empty on the disk.

diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index c6a56a13b7aa6e8561e82bfd389d933871ea7798..ca81c3b396a303fda8eef8b8c1ea106ffecfc807 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -32,7 +32,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
     private static final String POSITION_TAG = "Position";
     public final ServerLevel level;
     private final IOWorker worker;
-    private final LongSet emptyChunks = new LongOpenHashSet();
+    public final LongSet emptyChunks = new LongOpenHashSet(); // MultiPaper - make public
     public final ProcessorMailbox<Runnable> entityDeserializerQueue;
     protected final DataFixer fixerUpper;
     private final Set<CompletableFuture<Optional<CompoundTag>>> loadingTasksInProgress = ConcurrentHashMap.newKeySet(); // MultiPaper
@@ -79,7 +79,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
     public CompletableFuture<ChunkEntities<Entity>> loadEntities(ChunkPos pos) {
         return this.emptyChunks.contains(pos.toLong()) ? CompletableFuture.completedFuture(emptyChunk(pos)) : loadAsync(pos).thenApplyAsync((nbt) -> { // MultiPaper - replace this.worker.loadAsync(pos) with async chunk loading
             if (nbt.isEmpty()) {
-                // this.emptyChunks.add(pos.toLong()); // MultiPaper - don't cache empty chunks
+                this.emptyChunks.add(pos.toLong()); // MultiPaper - don't cache empty chunks // MultiPaper - allow for safe caching of empty entity chunks
                 return emptyChunk(pos);
             } else {
                 try {
@@ -94,6 +94,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
                 CompoundTag compoundTag = this.upgradeChunkTag(nbt.get());
                 ListTag listTag = compoundTag.getList("Entities", 10);
                 List<Entity> list = EntityType.loadEntitiesRecursive(listTag, this.level).collect(ImmutableList.toImmutableList());
+                if (list.isEmpty()) this.emptyChunks.add(pos.toLong()); // MultiPaper - allow for safe caching of empty entity chunks
                 return new ChunkEntities<>(pos, list);
             }
         }, this.entityDeserializerQueue::tell);
@@ -114,13 +115,19 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
 
     @Override
     public void storeEntities(ChunkEntities<Entity> dataList) {
+    // MultiPaper start
+        storeEntities(dataList, false);
+    }
+
+    public void storeEntities(ChunkEntities<Entity> dataList, boolean isChunkUnload) {
+    // MultiPaper end
         ChunkPos chunkPos = dataList.getPos();
         if (dataList.isEmpty()) {
             if (this.emptyChunks.add(chunkPos.toLong())) {
                 MultiPaperEntitiesHandler.willWriteEntities(level, chunkPos); // MultiPaper
                 this.worker.store(chunkPos, (CompoundTag)null);
             }
-            this.emptyChunks.remove(chunkPos.toLong()); // MultiPaper - don't cache empty chunks
+            if (isChunkUnload) this.emptyChunks.remove(chunkPos.toLong()); // MultiPaper - don't cache empty chunks // MultiPaper - allow for safe caching of empty entity chunks
         } else {
             ListTag listTag = new ListTag();
             final java.util.Map<net.minecraft.world.entity.EntityType<?>, Integer> savedEntityCounts = new java.util.HashMap<>(); // Paper
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 66ecdfaa31ca4e6ed89633821233984009fb9dda..ef9d1d38dfd7fcbfbd4bdbe13a623f6299a7779a 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -328,7 +328,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
             if (list.isEmpty()) {
                 if (persistententitysectionmanager_b == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
                     if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) this.permanentStorage).level, new ChunkPos(i), ImmutableList.of()); // CraftBukkit
-                    this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(i), ImmutableList.of()));
+                    ((EntityStorage) this.permanentStorage).storeEntities(new ChunkEntities<>(new ChunkPos(i), ImmutableList.of()), callEvent); // MultiPaper - cast to EntityStorage and pass callEvent paramater
                     if (callEvent) MultiPaperEntitiesHandler.onEntitiesUnload(entitySliceManager.world, new ChunkPos(i)); // MultiPaper
                 }
 
@@ -338,7 +338,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
                 return false;
             } else {
                 if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) this.permanentStorage).level, new ChunkPos(i), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
-                this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(i), list));
+                ((EntityStorage) this.permanentStorage).storeEntities(new ChunkEntities<>(new ChunkPos(i), (List<Entity>) list), callEvent); // MultiPaper - cast to EntityStorage and pass callEvent paramater
                 if (callEvent) MultiPaperEntitiesHandler.onEntitiesUnload(entitySliceManager.world, new ChunkPos(i)); // MultiPaper
                 list.forEach(consumer);
                 return true;
diff --git a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
index 0854d7c65ebd93e63d3898b51f3bb6af2a09467e..1b11d3e09766bd7412ce1de79fc1f1661eabdc21 100644
--- a/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
+++ b/src/main/java/puregero/multipaper/MultiPaperEntitiesHandler.java
@@ -22,6 +22,7 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
@@ -117,6 +118,12 @@ public class MultiPaperEntitiesHandler {
     }
 
     public static void onChunkMove(Entity entity, BlockPos to, BlockPos from) {
+        // MultiPaper start - allow for safe caching of empty entity chunks
+        if (entity.shouldBeSaved()) {
+            ((EntityStorage) ((ServerLevel) entity.level).entityManager.permanentStorage).emptyChunks.remove(new ChunkPos(to).toLong());
+        }
+        // MultiPaper end - allow for safe caching of empty entity chunks
+
         if (from.equals(BlockPos.ZERO)) return; // They just spawned
         if (!entity.shouldBeSaved() && !(!entity.isPassenger() && entity.isVehicle() && entity.hasExactlyOnePlayerPassenger()) && !(MultiPaperConfiguration.get().optimizations.reducePlayerPositionUpdatesInUnloadedChunks && MultiPaper.isRealPlayer(entity))) return; // Entity shouldn't be synced (eg players)
 
