From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 18 Nov 2021 00:00:34 +1000
Subject: [PATCH] Sync player inventories between servers


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 58e2c41dccee725b501e3551e713d4fc58fa062d..7da9d46d1bd091c56cd3911e2ca5ee1670d42d36 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -170,8 +170,7 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
-import puregero.multipaper.ExternalServerConnection;
-import puregero.multipaper.MultiPaper;
+import puregero.multipaper.*;
 import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
 import puregero.multipaper.externalserverprotocol.PlayerChangeGamemodePacket;
 import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
@@ -234,6 +233,7 @@ public class ServerPlayer extends Player {
     private final ContainerSynchronizer containerSynchronizer;
     private final ContainerListener containerListener;
     private int containerCounter;
+    @Nullable public ExternalServer openContainer; // MultiPaper
     public int latency;
     public boolean wonGame;
     public int containerUpdateDelay; // Paper // MultiPaper - make public
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 62eccefa19d68d3a12485241a2c51c7a58623028..09f26fe2db55324fac8913f6a0447ff17a221380 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -246,6 +246,8 @@ import org.bukkit.inventory.SmithingInventory;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperAckBlockChangesHandler;
+import puregero.multipaper.MultiPaperInventoryHandler;
+import puregero.multipaper.externalserverprotocol.PlayerActionPacket;
 import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
@@ -823,6 +825,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleAcceptTeleportPacket(ServerboundAcceptTeleportationPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        MultiPaperInventoryHandler.handleAcceptTeleport(this.player, packet); // MultiPaper
         if (packet.getId() == this.awaitingTeleport) {
             if (this.awaitingPositionFromClient == null) {
                 this.disconnect(Component.translatable("multiplayer.disconnect.invalid_player_movement"), org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PLAYER_MOVEMENT); // Paper - kick event cause
@@ -856,6 +859,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleRecipeBookChangeSettingsPacket(ServerboundRecipeBookChangeSettingsPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        MultiPaperInventoryHandler.handleContainerEvent(this.player, packet); // MultiPaper
         this.player.getRecipeBook().setBookSetting(packet.getBookType(), packet.isOpen(), packet.isFiltering());
     }
 
@@ -1059,6 +1063,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleRenameItem(ServerboundRenameItemPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         AbstractContainerMenu container = this.player.containerMenu;
 
         if (container instanceof AnvilMenu) {
@@ -1081,6 +1086,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleSetBeaconPacket(ServerboundSetBeaconPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         AbstractContainerMenu container = this.player.containerMenu;
 
         if (container instanceof BeaconMenu) {
@@ -1196,6 +1202,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleSelectTrade(ServerboundSelectTradePacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return;
         int i = packet.getItem();
         AbstractContainerMenu container = this.player.containerMenu;
 
@@ -1942,6 +1949,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket packet) {
+        if (MultiPaperInventoryHandler.handleInteractEvent(this.player, packet)) return; // MultiPaper - send to external server if necessary
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         if (!this.checkLimit(packet.timestamp)) return; // Spigot - check limit
@@ -2001,6 +2009,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         if (!this.checkLimit(packet.timestamp)) return; // Spigot - check limit
+        if (MultiPaperInventoryHandler.handleUseItemEvent(this.player, packet)) return; // MultiPaper
         this.ackBlockChangesUpTo(packet.getSequence());
         ServerLevel worldserver = this.player.getLevel();
         InteractionHand enumhand = packet.getHand();
@@ -2201,6 +2210,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
             this.player.getInventory().selected = packet.getSlot();
             this.player.resetLastActionTime();
+            if (MultiPaper.isRealPlayer(this.player)) MultiPaper.broadcastPacketToExternalServers(this.player, new PlayerActionPacket(this.player, packet)); // MultiPaper
+            else this.player.detectEquipmentUpdates(); // MultiPaper
         } else {
             ServerGamePacketListenerImpl.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName().getString());
             this.disconnect("Invalid hotbar selection (Hacking?)", org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_ACTION); // CraftBukkit // Paper - kick event cause
@@ -3071,6 +3082,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     public void handleContainerClose(ServerboundContainerClosePacket packet, InventoryCloseEvent.Reason reason) {
         // Paper end
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
 
         if (this.player.isImmobile()) return; // CraftBukkit
         CraftEventFactory.handleInventoryCloseEvent(this.player, reason); // CraftBukkit // Paper
@@ -3081,6 +3093,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleContainerClick(ServerboundContainerClickPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         if (this.player.containerMenu.containerId == packet.getContainerId() && this.player.containerMenu.stillValid(this.player)) { // CraftBukkit
@@ -3399,6 +3412,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     @Override
     public void handlePlaceRecipe(ServerboundPlaceRecipePacket packet) {
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         // Paper start
         if (!org.bukkit.Bukkit.isPrimaryThread()) {
             if (recipeSpamPackets.addAndGet(io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.recipeSpamIncrement) > io.papermc.paper.configuration.GlobalConfiguration.get().spamLimiter.recipeSpamLimit) {
@@ -3429,6 +3443,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleContainerButtonClick(ServerboundContainerButtonClickPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperInventoryHandler.handleContainerEvent(this.player, packet)) return; // MultiPaper
         if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         if (this.player.containerMenu.containerId == packet.getContainerId() && !this.player.isSpectator()) {
diff --git a/src/main/java/net/minecraft/stats/RecipeBook.java b/src/main/java/net/minecraft/stats/RecipeBook.java
index 87167f16fa9dedf19abefe38864498edb0c40a1d..8fb5f47a1ffeb248266e6bfa12a26a1bc8a8ad0f 100644
--- a/src/main/java/net/minecraft/stats/RecipeBook.java
+++ b/src/main/java/net/minecraft/stats/RecipeBook.java
@@ -33,6 +33,7 @@ public class RecipeBook {
     }
 
     public boolean contains(@Nullable Recipe<?> recipe) {
+        if (recipe != null) return true; // MultiPaper - who cares if they use a recipe that they don't have, no point trying to sync this between servers
         return recipe == null ? false : this.known.contains(recipe.getId());
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 876244d8ae551adca16fbf3a2c6f0d52643f3d3b..a72323f44c3ec076381212af33d7ccb82e266d34 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -92,14 +92,7 @@ import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.FenceGateBlock;
-import net.minecraft.world.level.block.HoneyBlock;
-import net.minecraft.world.level.block.Mirror;
-import net.minecraft.world.level.block.RenderShape;
-import net.minecraft.world.level.block.Rotation;
-import net.minecraft.world.level.block.SoundType;
+import net.minecraft.world.level.block.*;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.border.WorldBorder;
@@ -153,6 +146,7 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.entity.EntityPoseChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.plugin.PluginManager;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
@@ -1548,7 +1542,17 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 for (int j = blockposition.getY(); j <= blockposition1.getY(); ++j) {
                     for (int k = blockposition.getZ(); k <= blockposition1.getZ(); ++k) {
                         blockposition_mutableblockposition.set(i, j, k);
-                        BlockState iblockdata = this.level.getBlockState(blockposition_mutableblockposition);
+                        // MultiPaper start - Only check for blocks on our server (or portals)
+                        // Lazy load - Load iblockdata here only if we'll use it for the check
+                        BlockState iblockdata = this instanceof ServerPlayer ? this.level.getBlockState(blockposition_mutableblockposition) : null;
+
+                        boolean tickOnLocalServer = iblockdata != null && (iblockdata.getBlock() instanceof NetherPortalBlock || iblockdata.getBlock() instanceof EndPortalBlock || iblockdata.getBlock() instanceof PowderSnowBlock || iblockdata.getBlock() instanceof SweetBerryBushBlock || iblockdata.getBlock() instanceof WebBlock);
+                        if (!(tickOnLocalServer && MultiPaper.isRealPlayer(this)) && MultiPaper.isChunkExternal(this.level.getChunkAt(blockposition_mutableblockposition))) continue;
+                        if (tickOnLocalServer && MultiPaper.isExternalPlayer(this)) continue;
+
+                        // Lazy load - Fully load iblockdata here since we passed the check and will use it now
+                        iblockdata = iblockdata != null ? iblockdata : this.level.getBlockState(blockposition_mutableblockposition);
+                        // MultiPaper end
 
                         try {
                             iblockdata.entityInside(this.level, blockposition_mutableblockposition, this);
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index d22322dd08fa2723bcee73f47601acf5158cf824..04c54087706a581a70b7d56c88ee7ed24fc2011b 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -16,6 +16,7 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
+import net.minecraft.world.InteractionHand;
 import net.minecraft.world.Nameable;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -29,6 +30,7 @@ import java.util.ArrayList;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
+import puregero.multipaper.NonNullListFilter;
 // CraftBukkit end
 
 public class Inventory implements Container, Nameable {
@@ -40,10 +42,12 @@ public class Inventory implements Container, Nameable {
     public static final int NOT_FOUND_INDEX = -1;
     public static final int[] ALL_ARMOR_SLOTS = new int[]{0, 1, 2, 3};
     public static final int[] HELMET_SLOT_ONLY = new int[]{3};
-    public final NonNullList<ItemStack> items;
-    public final NonNullList<ItemStack> armor;
-    public final NonNullList<ItemStack> offhand;
-    public final List<NonNullList<ItemStack>> compartments;
+    // MultiPaper start - Use NonNullListFilter instead of NonNullList
+    public final NonNullListFilter<ItemStack> items;
+    public final NonNullListFilter<ItemStack> armor;
+    public final NonNullListFilter<ItemStack> offhand;
+    public final List<NonNullListFilter<ItemStack>> compartments;
+    // MultiPaper end
     public int selected;
     public final Player player;
     private int timesChanged;
@@ -97,9 +101,11 @@ public class Inventory implements Container, Nameable {
     // CraftBukkit end
 
     public Inventory(Player player) {
-        this.items = NonNullList.withSize(36, ItemStack.EMPTY);
-        this.armor = NonNullList.withSize(4, ItemStack.EMPTY);
-        this.offhand = NonNullList.withSize(1, ItemStack.EMPTY);
+        // MultiPaper start - Filter the inventory and sync it with other server
+        this.items = NonNullListFilter.withSize(36, ItemStack.EMPTY, player, "items");
+        this.armor = NonNullListFilter.withSize(4, ItemStack.EMPTY, player, "armor");
+        this.offhand = NonNullListFilter.withSize(1, ItemStack.EMPTY, player, "offhand");
+        // MultiPaper end
         this.compartments = ImmutableList.of(this.items, this.armor, this.offhand);
         this.player = player;
     }
@@ -432,6 +438,8 @@ public class Inventory implements Container, Nameable {
             }
         }
 
+        if (list != null) ((NonNullListFilter<ItemStack>) list).markDirty(slot); // MultiPaper
+
         return list != null && !((ItemStack) list.get(slot)).isEmpty() ? ContainerHelper.removeItem(list, slot, amount) : ItemStack.EMPTY;
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index c18a0bc94d0210396046f4475e49a739088593f3..c99d4266c2f728617a19f4d125a851bad844bb4e 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -101,6 +101,7 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockFertilizeEvent;
 import org.bukkit.event.player.PlayerItemDamageEvent;
 import org.bukkit.event.world.StructureGrowEvent;
+import puregero.multipaper.NonNullListFilter;
 // CraftBukkit end
 
 public final class ItemStack {
@@ -146,6 +147,18 @@ public final class ItemStack {
     private AdventureModeCheck adventureBreakCheck;
     @Nullable
     private AdventureModeCheck adventurePlaceCheck;
+    // MultiPaper start
+    public boolean dirty = true;
+    static { EMPTY.dirty = false; }
+    @Nullable
+    public NonNullListFilter<? extends ItemStack> listeningComponent;
+
+    public void markDirty() {
+        if (this == EMPTY || listeningComponent == null || listeningComponent.markDirty()) {
+            dirty = true;
+        }
+    }
+    // MultiPaper end
 
     public Optional<TooltipComponent> getTooltipImage() {
         return this.getItem().getTooltipImage(this);
@@ -266,6 +279,7 @@ public final class ItemStack {
             this.setDamageValue(this.getDamageValue());
         }
 
+        markDirty(); // MultiPaper
     }
 
     private ItemStack(CompoundTag nbt) {
@@ -541,6 +555,8 @@ public final class ItemStack {
 
     public void setDamageValue(int damage) {
         this.getOrCreateTag().putInt("Damage", Math.max(0, damage));
+
+        markDirty(); // MultiPaper
     }
 
     public int getMaxDamage() {
@@ -811,6 +827,8 @@ public final class ItemStack {
             if (this.tag.isEmpty()) {
                 this.tag = null;
             }
+
+            markDirty(); // MultiPaper
         }
 
     }
@@ -849,6 +867,7 @@ public final class ItemStack {
             this.getItem().verifyTagAfterLoad(nbt);
         }
 
+        markDirty(); // MultiPaper
     }
 
     public Component getHoverName() {
@@ -880,6 +899,8 @@ public final class ItemStack {
             nbttagcompound.remove("Name");
         }
 
+        markDirty(); // MultiPaper
+
         return this;
     }
 
@@ -897,6 +918,8 @@ public final class ItemStack {
             this.tag = null;
         }
 
+        markDirty(); // MultiPaper
+
     }
 
     public boolean hasCustomHoverName() {
@@ -1082,6 +1105,8 @@ public final class ItemStack {
         CompoundTag nbttagcompound = this.getOrCreateTag();
 
         nbttagcompound.putInt("HideFlags", nbttagcompound.getInt("HideFlags") | tooltipSection.getMask());
+
+        markDirty(); // MultiPaper
     }
 
     public static void appendEnchantmentNames(List<Component> tooltip, ListTag enchantments) {
@@ -1131,6 +1156,8 @@ public final class ItemStack {
 
         nbttaglist.add(EnchantmentHelper.storeEnchantment(EnchantmentHelper.getEnchantmentId(enchantment), (byte) level));
         processEnchantOrder(this.tag); // Paper
+
+        markDirty(); // MultiPaper
     }
 
     public boolean isEnchanted() {
@@ -1139,6 +1166,8 @@ public final class ItemStack {
 
     public void addTagElement(String key, Tag element) {
         this.getOrCreateTag().put(key, element);
+
+        markDirty(); // MultiPaper
     }
 
     public boolean isFramed() {
@@ -1171,6 +1200,8 @@ public final class ItemStack {
         }
         // CraftBukkit end
         this.getOrCreateTag().putInt("RepairCost", repairCost);
+
+        markDirty(); // MultiPaper
     }
 
     public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot slot) {
@@ -1224,6 +1255,8 @@ public final class ItemStack {
     public void setItem(Item item) {
         this.bukkitStack = null; // Paper
         this.item = item;
+
+        markDirty(); // MultiPaper
     }
     // CraftBukkit end
 
@@ -1276,6 +1309,8 @@ public final class ItemStack {
     public void setCount(int count) {
         this.count = count;
         this.updateEmptyCacheFlag();
+
+        markDirty(); // MultiPaper
     }
 
     public void grow(int amount) {
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index e0d9f77814674b9ce06e6e8e9dabf5b92e408d29..607c0bed3dc31841f28a7fcd792c1cd786c07701 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -104,4 +104,9 @@ public class ExternalPlayer extends ServerPlayer {
     public boolean broadcastToPlayer(ServerPlayer spectator) {
         return false;
     }
+
+    @Override
+    public void checkInsideBlocks() {
+        super.checkInsideBlocks();
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 4b9dc25d738491949f33c36997b4d49dd496a0f1..10b006ce849378682120bc3c6efd27763a390c46 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -85,6 +85,8 @@ public class MultiPaper {
                     externalPlayer.containerUpdateDelay = externalPlayer.level.paperConfig().tickRates.containerUpdate;
                 }
                 // Copied from Paper end
+
+                externalPlayer.checkInsideBlocks();
             }
         }
 
@@ -136,6 +138,8 @@ public class MultiPaper {
         });
 
         MultiPaperAckBlockChangesHandler.tick();
+
+        MultiPaperInventoryHandler.tick();
     }
 
     public static void sendTickTime(long time, double tps) {
@@ -471,7 +475,7 @@ public class MultiPaper {
         chunk.externalOwner = null;
         chunk.hasExternalLockRequest = false;
     }
-    
+
     public static byte[] nbtToBytes(CompoundTag compoundTag) throws IOException {
         if (compoundTag == null) {
             return new byte[0];
diff --git a/src/main/java/puregero/multipaper/MultiPaperInventoryHandler.java b/src/main/java/puregero/multipaper/MultiPaperInventoryHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..5658fd6060aa58e2b4dd527b0832e0b22f1fc779
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperInventoryHandler.java
@@ -0,0 +1,363 @@
+package puregero.multipaper;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.*;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.*;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.phys.AABB;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.externalserverprotocol.PlayerActionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerInventoryUpdatePacket;
+
+import java.util.*;
+
+public class MultiPaperInventoryHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperInventoryHandler.class.getSimpleName());
+
+    private static boolean updatingInventory = false;
+    private static final HashMap<UUID, ArrayList<AwaitingTeleport>> awaitingTeleports = new HashMap<>();
+    private static final Set<NonNullListFilter<? extends ItemStack>> modifiedInventories = new LinkedHashSet<>();
+
+    public static boolean handlePacketFromExternalServer(ExternalServer server, ServerPlayer player, Packet<?> packet) {
+        if (packet instanceof ClientboundOpenScreenPacket) {
+            // An external server has requested to open a window on a player
+            player.openContainer = server;
+        } else if (packet instanceof ClientboundContainerClosePacket) {
+            // An external server has requested to close the open window on a player
+            if (player.openContainer == server) {
+                player.openContainer = null;
+            }
+        } else if (packet instanceof ClientboundSetCarriedItemPacket setCarriedItemPacket) {
+            // An external server is changing the selected item in the hotbar
+            player.getInventory().selected = setCarriedItemPacket.getSlot();
+        } else if (packet instanceof ClientboundSetExperiencePacket setExperiencePacket) {
+            // An external server is changing the player's experience level
+            player.experienceLevel = setExperiencePacket.getExperienceLevel();
+            player.experienceProgress = setExperiencePacket.getExperienceProgress();
+            player.totalExperience = setExperiencePacket.getTotalExperience();
+        } else if (packet instanceof ClientboundPlayerPositionPacket playerPositionPacket) {
+            // An external server is teleporting the player
+            double x = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X) ? player.getX() : 0.0D;
+            double y = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y) ? player.getY() : 0.0D;
+            double z = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Z) ? player.getZ() : 0.0D;
+            float yaw = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.Y_ROT) ? player.getYRot() : 0.0F;
+            float pitch = playerPositionPacket.getRelativeArguments().contains(ClientboundPlayerPositionPacket.RelativeArgument.X_ROT) ? player.getXRot() : 0.0F;
+            player.connection.teleport(x + playerPositionPacket.getX(), y + playerPositionPacket.getY(), z + playerPositionPacket.getZ(), yaw + playerPositionPacket.getYRot(), pitch + playerPositionPacket.getXRot(), playerPositionPacket.getRelativeArguments());
+            server.getConnection().send(new PlayerActionPacket(player, new ServerboundAcceptTeleportationPacket(playerPositionPacket.getId())));
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Returns true if the even should be cancelled
+     */
+    public static boolean handleInteractEvent(ServerPlayer player, ServerboundUseItemOnPacket packet) {
+        LevelChunk chunk = player.level.getChunkIfLoaded(packet.getHitResult().getBlockPos());
+        ItemStack item = player.getItemInHand(packet.getHand());
+        if (MultiPaper.isChunkExternal(chunk) && !(item.getItem() instanceof BucketItem)) {
+            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Returns true if the even should be cancelled
+     */
+    public static boolean handleUseItemEvent(ServerPlayer player, ServerboundUseItemPacket packet) {
+        LevelChunk chunk = player.level.getChunkIfLoaded(player.blockPosition());
+        ItemStack item = player.getItemInHand(packet.getHand());
+        if (MultiPaper.isChunkExternal(chunk) && item.getItem() instanceof EnderEyeItem) {
+            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+            return true;
+        } else if (MultiPaper.isRealPlayer(player) && item.getItem() instanceof FishingRodItem) {
+            MultiPaper.broadcastPacketToExternalServers(chunk.externalSubscribers, () -> new PlayerActionPacket(player, packet));
+        }
+
+        return false;
+    }
+
+    /**
+     * Returns true if the even should be cancelled
+     */
+    public static boolean handleContainerEvent(ServerPlayer player, Packet<ServerGamePacketListener> containerPacket) {
+        if (player.openContainer != null) {
+            player.openContainer.getConnection().send(new PlayerActionPacket(player, containerPacket));
+
+            if (containerPacket instanceof ServerboundContainerClosePacket) {
+                player.openContainer = null;
+            }
+
+            return true;
+        }
+
+        return false;
+    }
+
+    public static void updateInventory(ServerPlayer player, String name, int slot, ItemStack replacingItem, ItemStack item) {
+        updatingInventory = true; // Don't let these changes mark the inventories as dirty
+        NonNullListFilter<ItemStack> component = null;
+        switch (name) {
+            case "items" -> component = player.getInventory().items;
+            case "armor" -> component = player.getInventory().armor;
+            case "offhand" -> component = player.getInventory().offhand;
+            default -> throw new IllegalArgumentException("Unknown inventory component of " + name);
+        }
+
+        item.dirty = false;
+
+        if (component != null) {
+            ItemStack lastItem = component.lastItems.get(slot);
+            ItemStack currentItem = component.get(slot);
+
+            if (!ItemStack.matches(lastItem, currentItem) && !MultiPaper.isRealPlayer(player)) {
+                // Our changes haven't been sent yet, send them
+                broadcastComponentChanges(player, component);
+            }
+
+            if (MultiPaper.isRealPlayer(player) && replacingItem != null && !ItemStack.matches(replacingItem, currentItem)) {
+                // The expected item doesn't match, a merge is required
+                item.dirty = true; component.isDirty = true; // Resend the item afterwards to sync the other servers
+                if (isSameItemSameTagIgnoringDurability(replacingItem, item)) {
+                    if (replacingItem.getCount() != item.getCount()) {
+                        int countDiff = item.getCount() - replacingItem.getCount();
+                        if (countDiff > 0) {
+                            item.setCount(countDiff);
+                            addItem(item, player);
+                        } else {
+                            LOGGER.warn(player.getScoreboardName() + ": An external server tried to remove " + countDiff + " items from " + replacingItem + ", but that item is now a " + currentItem);
+                        }
+                    } else if (replacingItem.getDamageValue() != item.getDamageValue()) {
+                        int damageDiff = item.getDamageValue() - replacingItem.getDamageValue();
+                        if (isSameItemSameTagIgnoringDurability(currentItem, item)) {
+                            currentItem.setDamageValue(currentItem.getDamageValue() + damageDiff);
+                        }
+                    } else {
+                        LOGGER.warn(player.getScoreboardName() + ": Trying to merge the same item same tags, but neither the count nor the durability is different. " + item + " and " + replacingItem + " and " + currentItem);
+                    }
+                } else {
+                    addItem(item, player);
+                    if (!replacingItem.isEmpty()) {
+                        // The item has probably duplicated, try to find one of the copies and remove it
+                        LOGGER.info(player.getScoreboardName() + ": An external server tried to replace " + replacingItem + " with a " + item + ", but that item is now a " + currentItem + ". Searching for duped items to remove...");
+                        int count = replacingItem.getCount();
+                        int removeCount = removeItem(replacingItem, player, count);
+
+                        if (count != removeCount) {
+                            LOGGER.info(player.getScoreboardName() + ": Removed " + (count - removeCount) + " duped items from the player's inventory");
+                        }
+
+                        if (removeCount > 0) {
+                            int removedEntityCount = removeItemEntity(replacingItem, player, removeCount);
+                            if (removeCount != removedEntityCount) {
+                                LOGGER.info(player.getScoreboardName() + ": Removed " + (removeCount - removedEntityCount) + " duped items from items on the ground");
+                            }
+                        }
+                    }
+                }
+            } else {
+                component.set(slot, item);
+                component.lastItems.set(slot, item.copy()); // We don't need to do this if it's our player
+            }
+        }
+
+        updatingInventory = false;
+    }
+
+    private static void addItem(ItemStack itemStack, ServerPlayer player) {
+        if (player.isDeadOrDying() || !player.getInventory().add(itemStack)) {
+            player.drop(itemStack, false);
+        }
+    }
+
+    private static int removeItem(ItemStack replacingItem, ServerPlayer player, int count) {
+        for (List<ItemStack> compartment : player.getInventory().compartments) {
+            for (int slot = 0; slot < compartment.size(); slot++) {
+                ItemStack item = compartment.get(slot);
+                if (isSameItemSameTag(item, replacingItem)) {
+                    if (item.getCount() < count) {
+                        count -= item.getCount();
+                        item.setCount(0);
+                        compartment.set(slot, ItemStack.EMPTY);
+                    } else {
+                        item.setCount(item.getCount() - count);
+                        return 0;
+                    }
+                }
+            }
+        }
+
+        return count;
+    }
+
+    private static int removeItemEntity(ItemStack replacingItem, ServerPlayer player, int count) {
+        for (ItemEntity entity : player.level.getEntitiesOfClass(ItemEntity.class, AABB.ofSize(player.position(), 16, 16, 16))) {
+            ItemStack item = entity.getItem();
+            if (isSameItemSameTag(item, replacingItem)) {
+                if (item.getCount() < count) {
+                    count -= item.getCount();
+                    item.setCount(0);
+                    entity.remove(Entity.RemovalReason.DISCARDED);
+                } else {
+                    item.setCount(item.getCount() - count);
+                    entity.remove(Entity.RemovalReason.DISCARDED);
+                    entity.spawnAtLocation(item, 0);
+                    return 0;
+                }
+            }
+        }
+
+        return count;
+    }
+
+    private static boolean isSameItemSameTag(ItemStack left, ItemStack right) {
+       return left.is(right.getItem()) && ItemStack.tagMatches(left, right);
+    }
+
+    private static boolean isSameItemSameTagIgnoringDurability(ItemStack left, ItemStack right) {
+        boolean hasLeftDurability = false;
+        boolean hasRightDurability = false;
+        int leftDurability = left.getDamageValue();
+        int rightDurability = right.getDamageValue();
+
+        if (left.getTag() != null && left.getTag().contains("Damage")) {
+            hasLeftDurability = true;
+            left.getTag().remove("Damage");
+        }
+        if (right.getTag() != null) {
+            hasRightDurability = true;
+            right.getTag().remove("Damage");
+        }
+
+        boolean result = left.is(right.getItem()) && ItemStack.tagMatches(left, right);
+
+        if (hasLeftDurability) left.getTag().putInt("Damage", leftDurability);
+        if (hasRightDurability) right.getTag().putInt("Damage", rightDurability);
+
+        return result;
+    }
+
+    /**
+     * Returns true if the changes to the inventory component should be marked as dirty.
+     */
+    public static <E extends ItemStack> boolean markDirty(NonNullListFilter<E> inventoryComponent) {
+        if (!updatingInventory) {
+            modifiedInventories.add(inventoryComponent);
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Runs at the end of a vanilla tick. Ie any changes to the inventory made in the tick will instantly be updated
+     * to other servers without a tick delay.
+     */
+    public static void tick() {
+        for (NonNullListFilter<? extends ItemStack> inventoryComponent : modifiedInventories) {
+            if (inventoryComponent.player instanceof ServerPlayer player) {
+                broadcastComponentChanges(player, inventoryComponent);
+            }
+        }
+        modifiedInventories.clear();
+    }
+
+    public static void broadcastComponentChanges(ServerPlayer player, NonNullListFilter<? extends ItemStack> inventoryComponent) {
+        if (!player.didPlayerJoinEvent) {
+            // Don't update the inventory until they fully join
+            return;
+        }
+
+        if (inventoryComponent.isDirty) {
+            inventoryComponent.isDirty = false;
+            ListTag items = new ListTag();
+            for (int i = 0; i < inventoryComponent.size(); i++) {
+                if (inventoryComponent.dirty[i] || inventoryComponent.get(i).dirty) {
+                    CompoundTag item = new CompoundTag();
+                    item.putInt("Slot", i);
+                    inventoryComponent.get(i).save(item);
+                    items.add(item);
+
+                    if (!MultiPaper.isRealPlayer(player)) {
+                        CompoundTag replacingItem = new CompoundTag();
+                        inventoryComponent.lastItems.get(i).save(replacingItem);
+                        item.put("Replacing", replacingItem);
+                    }
+
+                    inventoryComponent.dirty[i] = false;
+                    inventoryComponent.get(i).dirty = false;
+                    inventoryComponent.lastItems.set(i, inventoryComponent.get(i).copy());
+                }
+            }
+
+            if (!items.isEmpty()) {
+                CompoundTag itemsRoot = new CompoundTag();
+                itemsRoot.put("items", items);
+                MultiPaper.broadcastPacketToExternalServers(player, new PlayerInventoryUpdatePacket(player, inventoryComponent.name, itemsRoot));
+                player.detectEquipmentUpdates();
+            }
+        }
+    }
+
+    public static void sendFullInventoryUpdate(ServerPlayer player, ExternalServerConnection... connections) {
+        for (NonNullListFilter<? extends ItemStack> inventoryComponent : new NonNullListFilter[] {
+                player.getInventory().items,
+                player.getInventory().armor,
+                player.getInventory().offhand,
+        }) {
+            ListTag items = new ListTag();
+            for (int i = 0; i < inventoryComponent.size(); i++) {
+                CompoundTag item = new CompoundTag();
+                item.putInt("Slot", i);
+                inventoryComponent.get(i).save(item);
+                items.add(item);
+            }
+
+            CompoundTag itemsRoot = new CompoundTag();
+            itemsRoot.put("items", items);
+            for (ExternalServerConnection connection : connections) {
+                connection.send(new PlayerInventoryUpdatePacket((ServerPlayer) inventoryComponent.player, inventoryComponent.name, itemsRoot));
+            }
+        }
+    }
+
+    public static void handleAcceptTeleport(ServerPlayer player, ServerboundAcceptTeleportationPacket packet) {
+        ArrayList<AwaitingTeleport> accepts = awaitingTeleports.get(player.getUUID());
+
+        if (accepts != null) {
+            accepts.removeIf(accept -> {
+               if (accept.id == packet.getId()) {
+                   accept.externalServer.getConnection().send(new PlayerActionPacket(player, packet));
+                   return true;
+               } else {
+                   return false;
+               }
+            });
+
+            if (accepts.isEmpty()) {
+                awaitingTeleports.remove(player.getUUID());
+            }
+        }
+    }
+
+    private static class AwaitingTeleport {
+        private final ExternalServer externalServer;
+        private final int id;
+
+        private AwaitingTeleport(ExternalServer externalServer, int id) {
+            this.externalServer = externalServer;
+            this.id = id;
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/NonNullListFilter.java b/src/main/java/puregero/multipaper/NonNullListFilter.java
new file mode 100644
index 0000000000000000000000000000000000000000..b30f0a36f799094446c120926c7435944e275d4a
--- /dev/null
+++ b/src/main/java/puregero/multipaper/NonNullListFilter.java
@@ -0,0 +1,74 @@
+package puregero.multipaper;
+
+import net.minecraft.core.NonNullList;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class NonNullListFilter<E extends ItemStack> extends NonNullList<E> {
+    public NonNullList<ItemStack> lastItems;
+    public final boolean[] dirty;
+    public final Player player;
+    public final String name;
+    public boolean isDirty;
+
+    protected NonNullListFilter(List<E> delegate, @Nullable E initialElement, Player player, String name) {
+        super(delegate, initialElement);
+        this.lastItems = NonNullList.withSize(delegate.size(), initialElement);
+        this.dirty = new boolean[delegate.size()];
+        this.player = player;
+        this.name = name;
+    }
+
+    public static <E extends ItemStack> NonNullListFilter<E> withSize(int size, E defaultValue, Player player, String name) {
+        Validate.notNull(defaultValue);
+        ItemStack[] objects = new ItemStack[size];
+        Arrays.fill(objects, defaultValue);
+        return new NonNullListFilter<E>(Arrays.asList((E[])objects), defaultValue, player, name);
+    }
+
+    public boolean markDirty() {
+        if (MultiPaperInventoryHandler.markDirty(this)) {
+            isDirty = true;
+            return true;
+        }
+        return false;
+    }
+
+    public boolean markDirty(int i) {
+        if (markDirty()) {
+            dirty[i] = true;
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public E set(int i, E object) {
+        object.listeningComponent = this;
+        markDirty(i);
+        return super.set(i, object);
+    }
+
+    @Override
+    public void add(int i, E object) {
+        throw new UnsupportedOperationException("Assumption - you can't add to a fixed sized list");
+    }
+
+    @Override
+    public E remove(int i) {
+        throw new UnsupportedOperationException("Assumption - you can't remove from a fixed sized list");
+    }
+
+    @Override
+    public void clear() {
+        if (markDirty(0)) {
+            Arrays.fill(dirty, true);
+        }
+        super.clear();
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 6159ec1952424b652919bffc5c6e01a025f7185c..02052873895fda0c4dae745680f0c7fe7012e235 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -32,6 +32,8 @@ public class ExternalServerPacketSerializer {
         addPacket(DeopPlayerPacket.class, DeopPlayerPacket::new);
         addPacket(WhiteListPlayerPacket.class, WhiteListPlayerPacket::new);
         addPacket(RemoveWhiteListedPlayerPacket.class, RemoveWhiteListedPlayerPacket::new);
+        addPacket(PlayerActionPacket.class, PlayerActionPacket::new);
+        addPacket(PlayerInventoryUpdatePacket.class, PlayerInventoryUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..2e51741d76d2d209accb673f8043ed99010125a3
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionPacket.java
@@ -0,0 +1,63 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+
+import java.util.UUID;
+
+public class PlayerActionPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerActionPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final Packet<ServerGamePacketListener> action;
+
+    public PlayerActionPacket(ServerPlayer player, Packet<ServerGamePacketListener> action) {
+        this.uuid = player.getUUID();
+        this.action = action;
+    }
+
+    public PlayerActionPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+
+        ByteBuf buf = Unpooled.wrappedBuffer(in.readByteArray());
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        action = (Packet<ServerGamePacketListener>) ConnectionProtocol.PLAY.createPacket(PacketFlow.SERVERBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(action);
+        Integer id = protocol.getPacketId(PacketFlow.SERVERBOUND, action);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        action.write(friendlyByteBuf);
+        out.writeByteArray(buf.array());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+        if (player == null) {
+            LOGGER.warn("Tried to run an action on a non-existent player with uuid " + uuid);
+            return;
+        }
+
+        player.server.execute(() -> action.handle(player.connection));
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index def283b789f105a2891ae343c3eca46376f2f608..e37ac2cac4d94596770c45c5017538abf25f6d3d 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -2,6 +2,7 @@ package puregero.multipaper.externalserverprotocol;
 
 import com.mojang.authlib.GameProfile;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.player.ProfilePublicKey;
@@ -12,6 +13,7 @@ import org.bukkit.event.player.PlayerKickEvent;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.ExternalServerConnection;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
 
 import javax.annotation.Nullable;
 import java.net.InetAddress;
@@ -130,5 +132,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         }
 
         send(new PlayerCreatePacket(player), connections);
+        send(new PlayerActionPacket(player, new ServerboundSetCarriedItemPacket(player.getInventory().selected)), connections);
+
+        MultiPaperInventoryHandler.sendFullInventoryUpdate(player, connections);
     }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerInventoryUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerInventoryUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..3517b13be13c729056c6e05291b7f95312476432
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerInventoryUpdatePacket.java
@@ -0,0 +1,82 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.item.ItemStack;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerInventoryUpdatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerInventoryUpdatePacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final String component;
+    private final CompoundTag tag;
+
+    public PlayerInventoryUpdatePacket(ServerPlayer player, String component, CompoundTag tag) {
+        this.uuid = player.getUUID();
+        this.component = component;
+        this.tag = tag;
+    }
+
+    public PlayerInventoryUpdatePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        component = in.readUtf();
+
+        try {
+            tag = MultiPaper.nbtFromBytes(in.readByteArray());
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeUtf(component);
+
+        try {
+            out.writeByteArray(MultiPaper.nbtToBytes(tag));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to update the inventory of a non-existent player uuid " + uuid);
+                return;
+            }
+
+            ListTag items = tag.getList("items", Tag.TAG_COMPOUND);
+            items.forEach(i -> {
+                CompoundTag item = (CompoundTag) i;
+                ItemStack itemStack = ItemStack.of(item);
+
+                ItemStack replacingItem = null;
+                if (item.contains("Replacing")) {
+                    replacingItem = ItemStack.of(item.getCompound("Replacing"));
+                }
+
+                MultiPaperInventoryHandler.updateInventory(player, component, item.getInt("Slot"), replacingItem, itemStack);
+            });
+
+            player.detectEquipmentUpdates();
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
index 67fa85df260e2350824ef5f718cd4f89703e44c8..80478852fb8998698d3bb26a2ba20119755ea4dc 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendPacketPacket.java
@@ -6,11 +6,14 @@ import net.minecraft.network.ConnectionProtocol;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperInventoryHandler;
 
 import java.util.List;
 import java.util.UUID;
@@ -67,7 +70,11 @@ public class SendPacketPacket extends ExternalServerPacket {
 
     @Override
     public void handle(ExternalServerConnection connection) {
-        doHandle(connection);
+        if (packet instanceof ClientboundPlayerPositionPacket) {
+            MultiPaper.runSync(() -> doHandle(connection));
+        } else {
+            doHandle(connection);
+        }
     }
 
     public void doHandle(ExternalServerConnection connection) {
@@ -79,6 +86,10 @@ public class SendPacketPacket extends ExternalServerPacket {
                 continue;
             }
 
+            if (MultiPaperInventoryHandler.handlePacketFromExternalServer(connection.externalServer, player, packet)) {
+                continue;
+            }
+
             player.connection.send(packet);
         }
     }
