From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 5 Dec 2021 11:10:38 +1000
Subject: [PATCH] Add MultiPaper version fetcher


diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 51c96095cf7092125f79a197f797dc7965647574..7ba1ef16909910e0062116bb02ce2830656bcd19 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -433,7 +433,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new com.destroystokyo.paper.PaperVersionFetcher(); // Purpur
+        return new puregero.multipaper.MultiPaperVersionFetcher(); // Purpur // MultiPaper
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/MultiPaperVersionFetcher.java b/src/main/java/puregero/multipaper/MultiPaperVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..eb0b2062aecb1dd7a6cc5fc70b7f7ad4fbebd9ad
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperVersionFetcher.java
@@ -0,0 +1,145 @@
+package puregero.multipaper;
+
+import com.destroystokyo.paper.VersionHistoryManager;
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.common.base.Charsets;
+import com.google.common.io.Resources;
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.event.ClickEvent;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextDecoration;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.stream.StreamSupport;
+
+public class MultiPaperVersionFetcher implements VersionFetcher {
+    private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
+    private static final String GITHUB_BRANCH_NAME = "main";
+    private static final String DOWNLOAD_PAGE = "https://multipaper.io/download.html";
+    private static @javax.annotation.Nullable
+    String mcVer;
+
+    @Override
+    public long getCacheTime() {
+        return 720000;
+    }
+
+    @Nonnull
+    @Override
+    public Component getVersionMessage(@Nonnull String serverVersion) {
+        String[] parts = serverVersion.split("[-\\s]");
+        final Component updateMessage = getUpdateStatusMessage("PureGero/MultiPaper", GITHUB_BRANCH_NAME, parts[2]);
+        final Component history = getHistory();
+
+        return history != null ? Component.textOfChildren(updateMessage, Component.newline(), history) : updateMessage;
+    }
+
+    private static @javax.annotation.Nullable
+    String getMinecraftVersion() {
+        return org.bukkit.Bukkit.getMinecraftVersion();
+    }
+
+    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+        int distance;
+        try {
+            int jenkinsBuild = Integer.parseInt(versionInfo);
+            distance = fetchDistanceFromSiteApi(jenkinsBuild, getMinecraftVersion());
+        } catch (NumberFormatException ignored) {
+            versionInfo = versionInfo.replace("\"", "");
+            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+        }
+
+        switch (distance) {
+            case -1:
+                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
+            case 0:
+                return Component.text("You are running the latest version", NamedTextColor.GREEN);
+            case -2:
+                return Component.text("Unknown version", NamedTextColor.YELLOW);
+            default:
+                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW)
+                        .append(Component.newline())
+                        .append(Component.text("Download the new version at: ")
+                                .append(Component.text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
+                                        .hoverEvent(Component.text("Click to open", NamedTextColor.WHITE))
+                                        .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
+        }
+    }
+
+    private static int fetchDistanceFromSiteApi(int jenkinsBuild, @javax.annotation.Nullable String siteApiVersion) {
+        if (siteApiVersion == null) { return -1; }
+        try {
+            try (BufferedReader reader = Resources.asCharSource(
+                    new URL("https://multipaper.io/api/v2/projects/multipaper/versions/" + siteApiVersion),
+                    Charsets.UTF_8
+            ).openBufferedStream()) {
+                JsonObject json = new Gson().fromJson(reader, JsonObject.class);
+                JsonArray builds = json.getAsJsonArray("builds");
+                int latest = StreamSupport.stream(builds.spliterator(), false)
+                        .mapToInt(e -> e.getAsInt())
+                        .max()
+                        .getAsInt();
+                return latest - jenkinsBuild;
+            } catch (JsonSyntaxException ex) {
+                ex.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical":
+                        return 0;
+                    case "behind":
+                        return obj.get("behind_by").getAsInt();
+                    default:
+                        return -1;
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    @Nullable
+    private Component getHistory() {
+        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+        if (data == null) {
+            return null;
+        }
+
+        final String oldVersion = data.getOldVersion();
+        if (oldVersion == null) {
+            return null;
+        }
+
+        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
+    }
+}
