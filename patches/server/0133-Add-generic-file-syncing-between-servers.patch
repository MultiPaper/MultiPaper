From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 5 Mar 2022 00:29:09 +1000
Subject: [PATCH] Add generic file syncing between servers


diff --git a/build.gradle.kts b/build.gradle.kts
index e8a37141d9020a760def17978a603ab112abb205..310cbf7d2d9d09440b2b26615a82adb2f4da1ca6 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -57,6 +57,8 @@ dependencies {
     }
     // Pufferfish end
 
+    implementation("io.methvin:directory-watcher:0.15.0") // MultiPaper
+
     implementation("com.github.technove:AIR:fe3dbb4420") // Airplane - config
     implementation("com.github.technove:Flare:2c4a2114a0") // Airplane - flare
 
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 4201e0debe2e4918dd926dba325717a6bd35ed2b..af6a2eaf51b34a326c4cbec4b8e0fb84fd4dc172 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -68,6 +68,7 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.config.MultiPaperConfigurationLoader;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperFileSyncer;
 
 public class Main {
 
@@ -115,6 +116,8 @@ public class Main {
             MultiPaperConfigurationLoader.init((File) optionset.valueOf("multipaper-settings")); // MultiPaper
             System.setProperty("multipaper.master-connection.my-name", MultiPaperConfiguration.get().masterConnection.myName); // MultiPaper - remember this property even after config reloads
             MultiPaper.getConnection(); // MultiPaper - start connection
+            MultiPaperFileSyncer.init(); // MultiPaper
+            MultiPaperConfigurationLoader.init((File) optionset.valueOf("multipaper-settings")); // MultiPaper - reload the config incase it was changed during the sync
 
             Bootstrap.bootStrap();
             Bootstrap.validate();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b256de7e1ed206458568cf84c59bd431eaa29a7b..d6e2843688a7748ffd29390a7331e1b6abb11ad5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -183,6 +183,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 import co.aikar.timings.MinecraftTimings; // Paper
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperExternalBlocksHandler;
+import puregero.multipaper.MultiPaperFileSyncer;
 import puregero.multipaper.externalserverprotocol.DifficultyUpdatePacket;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
@@ -1023,6 +1024,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper start - move final shutdown items here
         LOGGER.info("Flushing Chunk IO");
         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.close(true, true); // Paper
+        LOGGER.info("Closing MultiPaper File Syncer"); // MultiPaper
+        MultiPaperFileSyncer.onStop().join(); // MultiPaper
         LOGGER.info("Closing Thread Pool");
         Util.shutdownExecutors(); // Paper
         LOGGER.info("Closing Server");
diff --git a/src/main/java/puregero/multipaper/MultiPaperConnection.java b/src/main/java/puregero/multipaper/MultiPaperConnection.java
index 9e2805db6e8dc7c22f5463a90017b2c96104fa5c..0df8bf5fc143c0642b007c117987d5e319efdddd 100644
--- a/src/main/java/puregero/multipaper/MultiPaperConnection.java
+++ b/src/main/java/puregero/multipaper/MultiPaperConnection.java
@@ -34,10 +34,13 @@ import puregero.multipaper.externalserverprotocol.RequestChunkPacket;
 import puregero.multipaper.externalserverprotocol.SendEntitiesPacket;
 import puregero.multipaper.externalserverprotocol.SendTickListPacket;
 import puregero.multipaper.mastermessagingprotocol.MessageBootstrap;
+import puregero.multipaper.mastermessagingprotocol.datastream.InboundDataStream;
 import puregero.multipaper.mastermessagingprotocol.messages.masterbound.*;
 import puregero.multipaper.mastermessagingprotocol.messages.serverbound.*;
 
 import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
@@ -422,4 +425,44 @@ public class MultiPaperConnection extends ServerBoundMessageHandler {
     public void handle(ShutdownMessage message) {
         Bukkit.shutdown();
     }
+
+    @Override
+    public void handle(FileContentMessage message) {
+        File file = new File(message.path);
+        File fileTemp;
+        if (file.getParentFile() != null) {
+            file.getParentFile().mkdirs();
+            fileTemp = new File(file.getParentFile(), "." + file.getName() + "." + Double.toString(Math.random()).substring(2, 7) + ".tmp");
+        } else {
+            fileTemp = new File("." + file.getName() + "." + Double.toString(Math.random()).substring(2, 7) + ".tmp");
+        }
+
+        try {
+            InboundDataStream dataStream = MultiPaper.getConnection().getDataStreamManager().createInboundDataStream(MultiPaper.getConnection().getChannel(), message.streamId);
+            dataStream.copyToAsync(new FileOutputStream(fileTemp)).addListener(future2 -> {
+                if (future2.cause() != null) {
+                    future2.cause().printStackTrace();
+                }
+
+                fileTemp.setLastModified(message.lastModified);
+
+                synchronized (MultiPaperFileSyncer.pathsBeingModified) {
+                    MultiPaperFileSyncer.pathsBeingModified.add(message.path);
+                }
+
+                if (!fileTemp.renameTo(file) && fileTemp.isFile()) {
+                    file.delete();
+                    if (!fileTemp.renameTo(file)) {
+                        LOGGER.warn("Failed to rename " + fileTemp.getPath() + " to " + file.getPath());
+                    }
+                }
+
+                if (MultiPaperConfiguration.get().syncSettings.files.logFileSyncs) {
+                    LOGGER.info("Downloaded synced file " + file.getPath() + " (" + (file.length() + 1023) / 1024 + "KB)");
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaperFileSyncer.java b/src/main/java/puregero/multipaper/MultiPaperFileSyncer.java
new file mode 100644
index 0000000000000000000000000000000000000000..9860e8dce38414c776c56f640f15e2d2eaa8f6b2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperFileSyncer.java
@@ -0,0 +1,302 @@
+package puregero.multipaper;
+
+import io.methvin.watcher.DirectoryWatcher;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.config.MultiPaperConfiguration;
+import puregero.multipaper.mastermessagingprotocol.datastream.InboundDataStream;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.DownloadFileMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.RequestFilesToSyncMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.UploadFileMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.BooleanMessageReply;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.FileContentMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.FilesToSyncMessage;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.file.*;
+import java.util.*;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.concurrent.TimeUnit;
+
+public class MultiPaperFileSyncer extends Thread {
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperFileSyncer.class.getSimpleName());
+
+    public static void init() {
+        MultiPaper.getConnection().sendAndAwaitReply(new RequestFilesToSyncMessage(), FilesToSyncMessage.class)
+                .thenApply(message -> message.filesToSync)
+                .thenComposeAsync(MultiPaperFileSyncer::uploadFiles)
+                .join();
+        try {
+            Thread.sleep(50);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+        instance = new MultiPaperFileSyncer();
+    }
+
+    public MultiPaperFileSyncer() {
+        super("MultiPaperFileSyncer");
+
+        start();
+    }
+
+    private static MultiPaperFileSyncer instance;
+    public static final HashSet<String> pathsBeingModified = new HashSet<>();
+    private static final Executor DELAYED_EXECUTOR = CompletableFuture.delayedExecutor(50, TimeUnit.MILLISECONDS);
+    private final HashMap<File, CompletableFuture<Void>> queuedUploads = new HashMap<>();
+    private final HashSet<CompletableFuture<Void>> ongoingUploads = new HashSet<>();
+    private final HashSet<File> writeOnServerStop = new HashSet<>();
+
+    public static CompletableFuture<Void> onStop() {
+        if (instance != null) {
+            return instance.closeUploads();
+        }
+        return CompletableFuture.completedFuture(null);
+    }
+
+    public CompletableFuture<Void> closeUploads() {
+        synchronized (ongoingUploads) {
+            for (File file : writeOnServerStop) {
+                if (file.isFile()) {
+                    ongoingUploads.add(sendUpload(file, false));
+                }
+            }
+        }
+
+        CompletableFuture<Void> future = CompletableFuture.completedFuture(null);
+        synchronized (ongoingUploads) {
+            for (CompletableFuture<Void> ongoingUpload : ongoingUploads) {
+                future = CompletableFuture.allOf(future, ongoingUpload);
+            }
+        }
+
+        return future;
+    }
+
+    public static CompletableFuture<Void> sendUpload(File file, boolean immediatelySyncToOtherServers) {
+        try {
+            byte[] data = Files.readAllBytes(file.toPath());
+
+            return MultiPaper.getConnection().sendAndAwaitReply(new UploadFileMessage(immediatelySyncToOtherServers, file.getPath(), file.lastModified(), data), BooleanMessageReply.class).thenAccept(message -> {
+                if (MultiPaperConfiguration.get().syncSettings.files.logFileSyncs) {
+                    LOGGER.info("Uploaded " + file.getPath() + " (" + (data.length + 1023) / 1024 + "KB)");
+                }
+            });
+        } catch (IOException e) {
+            e.printStackTrace();
+            return CompletableFuture.completedFuture(null);
+        }
+    }
+
+    @Override
+    public void run() {
+        if (System.getProperty("disableFileWatching") != null) {
+            return;
+        }
+
+        try {
+            DirectoryWatcher.builder()
+                    .path(Paths.get("."))
+                    .fileHashing(false)
+                    .listener(event -> {
+                        try {
+                            if (!event.isDirectory()) {
+                                switch (event.eventType()) {
+                                    case CREATE:
+                                    case MODIFY:
+                                        queueFileUpload(event.path());
+                                }
+                            }
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
+                    })
+                    .build()
+                    .watch();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private synchronized void queueFileUpload(Path path) {
+        File file = new File(getPathWithoutDotSlash(Paths.get(".").toAbsolutePath().relativize(path.toAbsolutePath()).toFile()));
+        if (!syncFile(file)) {
+            return;
+        }
+
+        boolean shouldWrite = false;
+        boolean immediatelySyncToOtherServers = false;
+
+        for (String toSync : MultiPaperConfiguration.get().syncSettings.files.filesToSyncInRealTime) {
+            if (file.getPath().startsWith(toSync)) {
+                shouldWrite = true;
+                immediatelySyncToOtherServers = true;
+            }
+        }
+
+        for (String toSync : MultiPaperConfiguration.get().syncSettings.files.filesToSyncOnStartup) {
+            if (file.getPath().startsWith(toSync)) {
+                shouldWrite = true;
+            }
+        }
+
+        for (String toNotSync : MultiPaperConfiguration.get().syncSettings.files.filesToNotSync) {
+            if (file.getPath().startsWith(toNotSync)) {
+                shouldWrite = false;
+            }
+        }
+
+        if (shouldWrite) {
+            synchronized (MultiPaperFileSyncer.pathsBeingModified) {
+                if (MultiPaperFileSyncer.pathsBeingModified.remove(file.getPath())) {
+                    return;
+                }
+            }
+
+            for (String toNotSync : MultiPaperConfiguration.get().syncSettings.files.filesToOnlyUploadOnServerStop) {
+                if (file.getPath().startsWith(toNotSync)) {
+                    writeOnServerStop.add(file);
+                    return;
+                }
+            }
+
+            CompletableFuture<Void> completableFuture = new CompletableFuture<>();
+            queuedUploads.put(file, completableFuture);
+            boolean finalImmediatelySyncToOtherServers = immediatelySyncToOtherServers;
+            CompletableFuture.runAsync(() -> uploadFile(completableFuture, file, finalImmediatelySyncToOtherServers), DELAYED_EXECUTOR);
+        }
+    }
+
+    private void uploadFile(CompletableFuture<Void> future, File file, boolean immediatelySyncToOtherServers) {
+        if (queuedUploads.remove(file, future) && file.isFile()) {
+            CompletableFuture<Void> uploadFuture = sendUpload(file, immediatelySyncToOtherServers);
+
+            synchronized (ongoingUploads) {
+                ongoingUploads.add(uploadFuture);
+            }
+
+            uploadFuture.thenRun(() -> {
+                synchronized (ongoingUploads) {
+                    ongoingUploads.remove(uploadFuture);
+                }
+            });
+        }
+    }
+
+    private void registerRecursively(Path path, WatchService watchService) throws IOException {
+        boolean listen = false;
+
+        for (String toSync : MultiPaperConfiguration.get().syncSettings.files.filesToSyncInRealTime) {
+            if (toSync.contains(getPathWithoutDotSlash(path.toFile()))) {
+                listen = true;
+            }
+        }
+
+        for (String toSync : MultiPaperConfiguration.get().syncSettings.files.filesToSyncOnStartup) {
+            if (toSync.contains(getPathWithoutDotSlash(path.toFile()))) {
+                listen = true;
+            }
+        }
+
+        for (String toNotSync : MultiPaperConfiguration.get().syncSettings.files.filesToNotSync) {
+            if ((getPathWithoutDotSlash(path.toFile()) + "/").contains(toNotSync)) {
+                listen = false;
+            }
+        }
+
+        if (listen) {
+            path.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_MODIFY);
+
+            for (File child : path.toFile().listFiles()) {
+                if (child.isDirectory()) {
+                    registerRecursively(child.toPath(), watchService);
+                }
+            }
+        }
+    }
+
+    private static String getPathWithoutDotSlash(File file) {
+        if (file.getPath().startsWith("./")) {
+            return file.getPath().substring(2);
+        }
+
+        if (file.getPath().equals(".")) {
+            return "";
+        }
+
+        return file.getPath();
+    }
+
+    private static CompletableFuture<Void> uploadFiles(FilesToSyncMessage.FileToSync[] fileInfos) {
+        CompletableFuture<Void> future = CompletableFuture.completedFuture(null);
+        HashSet<String> paths = new HashSet<>();
+
+        for (FilesToSyncMessage.FileToSync fileInfo : fileInfos) {
+            File file = new File(fileInfo.getPath());
+            paths.add(file.getPath());
+            if (!file.isFile() || Math.abs(fileInfo.getLastModified() - file.lastModified()) > 2000) {
+                if (file.getParentFile() != null) {
+                    file.getParentFile().mkdirs();
+                }
+                future = CompletableFuture.allOf(future, MultiPaper.getConnection()
+                        .sendAndAwaitReply(new DownloadFileMessage(file.getPath()), FileContentMessage.class)
+                        .thenCompose(message -> {
+                            CompletableFuture<Void> fileDownloadedFuture = new CompletableFuture<>();
+                            try {
+                                InboundDataStream dataStream = MultiPaper.getConnection().getDataStreamManager().createInboundDataStream(MultiPaper.getConnection().getChannel(), message.streamId);
+                                dataStream.copyToAsync(new FileOutputStream(file)).addListener(future2 -> {
+                                    if (future2.cause() != null) {
+                                        future2.cause().printStackTrace();
+                                    }
+                                    if (!file.setLastModified(message.lastModified)) {
+                                        LOGGER.warn("Failed to setLastModified on file " + file);
+                                    }
+                                    if (MultiPaperConfiguration.get().syncSettings.files.logFileSyncs) {
+                                        LOGGER.info("Downloaded " + file.getPath() + " (" + (file.length() + 1023) / 1024 + "KB)");
+                                    }
+                                    fileDownloadedFuture.complete(null);
+                                });
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                            return fileDownloadedFuture;
+                        }));
+            }
+        }
+
+        for (String path : MultiPaperConfiguration.get().syncSettings.files.filesToSyncInRealTime) {
+            future = uploadFileIfNeededRecursively(new File(path), future, paths, true);
+        }
+
+        for (String path : MultiPaperConfiguration.get().syncSettings.files.filesToSyncOnStartup) {
+            future = uploadFileIfNeededRecursively(new File(path), future, paths, false);
+        }
+
+        return future;
+    }
+
+    private static CompletableFuture<Void> uploadFileIfNeededRecursively(File file, CompletableFuture<Void> future, HashSet<String> paths, boolean immediatelySyncToOtherServers) {
+        if (file.isDirectory()) {
+            for (File child : file.listFiles()) {
+                future = uploadFileIfNeededRecursively(child, future, paths, immediatelySyncToOtherServers);
+            }
+        } else if (syncFile(file) && !paths.contains(getPathWithoutDotSlash(file)) ) {
+            for (String toNotSync : MultiPaperConfiguration.get().syncSettings.files.filesToNotSync) {
+                if (getPathWithoutDotSlash(file).startsWith(toNotSync)) {
+                    return future;
+                }
+            }
+
+            paths.add(getPathWithoutDotSlash(file));
+            return CompletableFuture.allOf(future, sendUpload(new File(getPathWithoutDotSlash(file)), immediatelySyncToOtherServers));
+        }
+        return future;
+    }
+
+    private static boolean syncFile(File file) {
+        return file.isFile() && !file.getName().toLowerCase(Locale.ROOT).endsWith(".tmp") && !file.getName().toLowerCase(Locale.ROOT).endsWith(".hprof") && !file.getName().endsWith("~") && !file.getName().toLowerCase(Locale.ROOT).startsWith(".");
+    }
+}
