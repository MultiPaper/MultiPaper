From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mohammed jasem alaajel <xrambad@gmail.com>
Date: Sat, 3 Sep 2022 00:21:58 +0400
Subject: [PATCH] add /mptps


diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
index 75c47d4c51e41cce641d79b5cd3d0bb4eccd5cff..05e32a08779cf0929d345383fead48936a8d80ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
@@ -4,10 +4,7 @@ import java.util.Map;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.SimpleCommandMap;
-import puregero.multipaper.commands.MPDebugCommand;
-import puregero.multipaper.commands.MPMapCommand;
-import puregero.multipaper.commands.SListCommand;
-import puregero.multipaper.commands.ServersCommand;
+import puregero.multipaper.commands.*;
 
 public class CraftCommandMap extends SimpleCommandMap {
 
@@ -29,6 +26,7 @@ public class CraftCommandMap extends SimpleCommandMap {
         register("multipaper", new ServersCommand("servers"));
         register("multipaper", new MPMapCommand("mpmap"));
         register("multipaper", new SListCommand("slist"));
+        register("multipaper", new MPTPSCommand("mptps"));
     }
     // MultiPaper end
 
diff --git a/src/main/java/puregero/multipaper/commands/MPTPSCommand.java b/src/main/java/puregero/multipaper/commands/MPTPSCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..0468db53e18a59ce6e6962ed0ddc9876ebf373ab
--- /dev/null
+++ b/src/main/java/puregero/multipaper/commands/MPTPSCommand.java
@@ -0,0 +1,141 @@
+package puregero.multipaper.commands;
+
+import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextColor;
+import net.minecraft.core.HolderSet;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.*;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.entity.Player;
+import org.bukkit.scheduler.BukkitTask;
+import org.jetbrains.annotations.NotNull;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServer;
+import puregero.multipaper.MultiPaper;
+
+import java.text.DecimalFormat;
+import java.util.HashMap;
+import java.util.Map;
+
+public class MPTPSCommand extends Command implements Runnable {
+    private final HashMap<Player, BossBar> debugEnabled = new HashMap<>();
+    private BukkitTask task = null;
+
+    private final DecimalFormat formatter = new DecimalFormat("#0.00");
+
+    public MPTPSCommand(String command) {
+        super(command);
+        setPermission("multipaper.command.mptps");
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, String[] args) {
+        if (!testPermission(sender)) return false;
+
+        if (!(sender instanceof Player player)) {
+            sender.sendMessage(ChatColor.RED + "Only players can execute this command.");
+            return false;
+        }
+
+        if (debugEnabled.containsKey(player)) {
+            player.hideBossBar(debugEnabled.remove(player));
+            player.sendMessage("MultiPaper TPS bossbar disabled");
+            return false;
+        }
+
+        BossBar bossBar = BossBar.bossBar(Component.text("loading..."), 0.0f, BossBar.Color.GREEN, BossBar.Overlay.NOTCHED_20);
+        debugEnabled.put(player, bossBar);
+        player.showBossBar(bossBar);
+
+        sender.sendMessage("MultiPaper TPS bossbar enabled");
+
+        if (task == null) {
+            run();
+        }
+
+        return true;
+    }
+
+    @Override
+    public void run() {
+        task = null;
+
+        for (Map.Entry<Player, BossBar> playerBossBarEntry : new HashMap<>(this.debugEnabled).entrySet()) {
+            Player player = playerBossBarEntry.getKey();
+            if (!player.isOnline()) {
+                this.debugEnabled.remove(player.getPlayer());
+                continue;
+            }
+
+            run(player, playerBossBarEntry.getValue());
+        }
+
+        if (!debugEnabled.isEmpty()) {
+            task = ((CraftScheduler) Bukkit.getScheduler()).scheduleInternalTask(this, 5, "MultiPaper tps BossBar");
+        }
+    }
+
+    private void run(Player player, BossBar bossBar) {
+        Chunk chunk = player.getChunk();
+
+        if (chunk != null) {
+            ExternalServer owner = ((CraftChunk) chunk).getHandle().externalOwner;
+            final boolean isOwnerNull = owner == null;
+
+            int localPlayers = 0;
+            for (ServerPlayer serverPlayer : MinecraftServer.getServer().getPlayerList().players) {
+                if (isOwnerNull) {
+                    break;
+                }
+                if (owner.isMe() && MultiPaper.isRealPlayer(serverPlayer)|| serverPlayer instanceof ExternalPlayer externalPlayer && externalPlayer.externalServerConnection == owner.getConnection()) {
+                    localPlayers++;
+                }
+            }
+            final int totalPlayers = MinecraftServer.getServer().getPlayerList().players.size();
+
+            Component component = Component.text("Server: ").color(NamedTextColor.YELLOW)
+                    .append(Component.text((isOwnerNull ? "null" : owner.getName())).color(isOwnerNull ? NamedTextColor.WHITE : (owner.isMe() ? NamedTextColor.AQUA : NamedTextColor.RED)))
+                    .append(Component.text(" TPS: ").color(NamedTextColor.YELLOW).append(Component.text((formatter.format(isOwnerNull ? 0.0 : (Math.min(owner.getTps(), 20.00))))).color(getTpsColor(!isOwnerNull ? owner.getTps() : null))))
+                    .append(Component.text(" MSPT: ").color(NamedTextColor.YELLOW).append(Component.text((isOwnerNull ? 0 : owner.getAverageTickTime()) + "ms").color(getTpsColor(!isOwnerNull ? owner.getTps() : null))))
+                    .append(Component.text(" Local players: ").color(NamedTextColor.YELLOW).append(Component.text(localPlayers).color(NamedTextColor.WHITE)))
+                    .append(Component.text(" Total players: ").color(NamedTextColor.YELLOW).append(Component.text(totalPlayers).color(NamedTextColor.WHITE)));
+
+            bossBar.name(component).color(getTpsBossBarColor(!isOwnerNull ? owner.getTps() : null)).progress(getBarTpsProgress(!isOwnerNull ? owner.getTps() : 0.0));
+        }
+    }
+
+
+    private float getBarTpsProgress(Double tps) {
+        return (float) Math.max(Math.min(tps / 20.0, 1.0), 0.0);
+    }
+
+    private BossBar.Color getTpsBossBarColor(Double tps) {
+        if (tps == null) {
+            return BossBar.Color.WHITE;
+        } else if (tps >= 19.9) {
+            return BossBar.Color.GREEN;
+        } else if (tps >= 17.5) {
+            return BossBar.Color.YELLOW;
+        } else {
+            return BossBar.Color.RED;
+        }
+    }
+
+    private TextColor getTpsColor(Double tps) {
+        if (tps == null) {
+            return NamedTextColor.DARK_GRAY;
+        } else if (tps >= 19.9) {
+            return NamedTextColor.GREEN;
+        } else if (tps >= 17.5) {
+            return NamedTextColor.YELLOW;
+        } else {
+            return NamedTextColor.RED;
+        }
+    }
+}
