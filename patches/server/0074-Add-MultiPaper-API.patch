From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 9 Dec 2021 18:10:17 +1000
Subject: [PATCH] Add MultiPaper API


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index f20293426b104ed0c02a931b5ab77f87590f0c18..832ec838a1bec3b2d12e528d423269a9d4744151 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -46,6 +46,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import puregero.multipaper.MultiPaper;
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.world.level.chunk.LevelChunk> weakChunk;
@@ -213,6 +214,20 @@ public class CraftChunk implements Chunk {
         return this.getWorld().unloadChunk(this.getX(), this.getZ(), save);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isExternalChunk() {
+        return MultiPaper.isChunkExternal(worldServer.getChunkIfLoadedImmediately(getX(), getZ()));
+    }
+
+    @Override
+    public boolean isLocalChunk() {
+        return MultiPaper.isChunkLocal(worldServer.getChunkIfLoadedImmediately(getX(), getZ()));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean isForceLoaded() {
         return this.getWorld().isChunkForceLoaded(this.getX(), this.getZ());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b9af114edca03233afed19fe4728cef1c4ae8cd7..cc59d8df4ac0847a661a01857ffdb7c8e954127a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -249,6 +249,7 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.CraftMultiPaperNotificationManager;
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.externalserverprotocol.SubscribeToWorldPacket;
 
@@ -277,6 +278,7 @@ public final class CraftServer implements Server {
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
+    private final CraftMultiPaperNotificationManager multipaperNotificationManager = new CraftMultiPaperNotificationManager(); // MultiPaper
     private int monsterSpawn = -1;
     private int animalSpawn = -1;
     private int waterAnimalSpawn = -1;
@@ -838,6 +840,13 @@ public final class CraftServer implements Server {
         return this.servicesManager;
     }
 
+    // MultiPaper start
+    @Override
+    public CraftMultiPaperNotificationManager getMultiPaperNotificationManager() {
+        return this.multipaperNotificationManager;
+    }
+    // MultiPaper end
+
     @Override
     public List<World> getWorlds() {
         return new ArrayList<World>(this.worlds.values());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 38510e6c84e1efa0d45012c1e7e80e3b2eb8f5a1..1eac083296e50dd6021bdeafbae9f0616208025c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -522,6 +522,20 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.isChunkLoaded(x, z);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isChunkExternal(int x, int z) {
+        return MultiPaper.isChunkExternal(world.getChunkIfLoaded(x, z));
+    }
+
+    @Override
+    public boolean isChunkLocal(int x, int z) {
+        return MultiPaper.isChunkLocal(world.getChunkIfLoaded(x, z));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean loadChunk(int x, int z, boolean generate) {
         org.spigotmc.AsyncCatcher.catchOp("chunk load"); // Spigot
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 5ea2fdbd2c762e0e632093fc07294327eb061ada..0bdfbac4e4e69d443816d50b129a81345d83e737 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -55,6 +55,7 @@ import org.bukkit.util.BlockVector;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import puregero.multipaper.MultiPaper;
 
 public class CraftBlock implements Block {
     private final net.minecraft.world.level.LevelAccessor world;
@@ -440,6 +441,20 @@ public class CraftBlock implements Block {
         return this.getBlockPower(BlockFace.SELF);
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isInExternalChunk() {
+        return MultiPaper.isChunkExternal(world.getChunkIfLoadedImmediately(getX() >> 4, getZ() >> 4));
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return MultiPaper.isChunkLocal(world.getChunkIfLoadedImmediately(getX() >> 4, getZ() >> 4));
+    }
+
+    // MultiPaper end
+
     @Override
     public boolean isEmpty() {
         return this.getNMS().isAir();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index a3673e2943f251e056ecf84a9bff2de12efdb52a..69fa1df864678115a682db4140d3642787500df5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -181,6 +181,7 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import puregero.multipaper.MultiPaper;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -613,6 +614,20 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.entity.getId();
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isInExternalChunk() {
+        return MultiPaper.isChunkExternal(entity.level.getChunkIfLoaded(entity.blockPosition()));
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return MultiPaper.isChunkLocal(entity.level.getChunkIfLoaded(entity.blockPosition()));
+    }
+
+    // MultiPaper end
+
     @Override
     public int getFireTicks() {
         return entity.remainingFireTicks;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 365208e8ece16645b0ca88e5804c21ee3bee4540..81d4b009d7b8fb0d155ff4207ca8e07171388792 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -24,6 +24,7 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.WeakHashMap;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
@@ -32,6 +33,7 @@ import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos; // Paper
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.StringTag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
@@ -143,12 +145,15 @@ import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerDataUpdatePacket;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0;
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
+    public ConcurrentHashMap<String, String> data = new ConcurrentHashMap<>(); // MultiPaper
+    public ConcurrentHashMap<String, String> persistentData = new ConcurrentHashMap<>(); // MultiPaper
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<UUID, Set<WeakReference<Plugin>>> hiddenEntities = new HashMap<>();
@@ -990,6 +995,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             net.minecraft.util.Mth.floor(loc.getZ()) >> 4), 28, 3); // Load area high priority
         return super.teleportAsync(loc, cause);
     }
+
+    @Override
+    public boolean isInExternalChunk() {
+        return false;
+    }
+
+    @Override
+    public boolean isInLocalChunk() {
+        return false;
+    }
     // Paper end
 
     @Override
@@ -1143,6 +1158,50 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // MultiPaper start
+
+    @Override
+    public boolean isExternalPlayer() {
+        return MultiPaper.isExternalPlayer(this);
+    }
+
+    @Override
+    public boolean isLocalPlayer() {
+        return MultiPaper.isRealPlayer(this);
+    }
+
+    @Override
+    public String getData(String key) {
+        return data.get(key);
+    }
+
+    @Override
+    public void setData(String key, String value) {
+        if (value != null) {
+            data.put(key, value);
+        } else {
+            data.remove(key);
+        }
+        MultiPaper.broadcastPacketToExternalServers(getHandle(), new PlayerDataUpdatePacket(this, false, key, value));
+    }
+
+    @Override
+    public String getPersistentData(String key) {
+        return persistentData.get(key);
+    }
+
+    @Override
+    public void setPersistentData(String key, String value) {
+        if (value != null) {
+            persistentData.put(key, value);
+        } else {
+            persistentData.remove(key);
+        }
+        MultiPaper.broadcastPacketToExternalServers(getHandle(), new PlayerDataUpdatePacket(this, true, key, value));
+    }
+
+    // MultiPaper end
+
     @Override
     public Location getBedLocation() {
         Preconditions.checkState(isSleeping(), "Not sleeping");
@@ -1693,6 +1752,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
+
+        // MultiPaper start - store persistent data
+        if (nbttagcompound.contains("MultiPaperPersistentData")) {
+            CompoundTag multipaperPersistentData = nbttagcompound.getCompound("MultiPaperPersistentData");
+            multipaperPersistentData.tags.forEach((key, tag) -> persistentData.put(key, tag.getAsString()));
+        }
+        // MultiPaper end
     }
 
     public void setExtraData(CompoundTag nbttagcompound) {
@@ -1722,6 +1788,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         paper.putLong("LastLogin", handle.loginTime);
         paper.putLong("LastSeen", System.currentTimeMillis());
         // Paper end
+
+        // MultiPaper start - store persistent data
+        CompoundTag multipaperPersistentData = new CompoundTag();
+        persistentData.forEach(multipaperPersistentData::putString);
+        nbttagcompound.put("MultiPaperPersistentData", multipaperPersistentData);
+        // MultiPaper end
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/CraftMultiPaperNotificationManager.java b/src/main/java/puregero/multipaper/CraftMultiPaperNotificationManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..f8458c14ad7f585e9c4b648461291ba42db8559f
--- /dev/null
+++ b/src/main/java/puregero/multipaper/CraftMultiPaperNotificationManager.java
@@ -0,0 +1,82 @@
+package puregero.multipaper;
+
+import net.minecraft.world.level.chunk.LevelChunk;
+import org.bukkit.Chunk;
+import org.bukkit.MultiPaperNotificationManager;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.plugin.Plugin;
+import puregero.multipaper.externalserverprotocol.PluginNotificationPacket;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.function.BiConsumer;
+import java.util.function.Consumer;
+
+public class CraftMultiPaperNotificationManager implements MultiPaperNotificationManager {
+
+    private final HashMap<String, List<Listener>> listeners = new HashMap<>();
+
+    @Override
+    public void on(Plugin plugin, String channel, Consumer<byte[]> callback) {
+        on(plugin, channel, (data, replyFunction) -> callback.accept(data));
+    }
+
+    @Override
+    public void on(Plugin plugin, String channel, BiConsumer<byte[], BiConsumer<String, byte[]>> callbackWithReply) {
+        listeners.computeIfAbsent(channel, key -> new ArrayList<>()).add(new Listener(plugin, callbackWithReply));
+    }
+
+    @Override
+    public void notify(String channel, byte[] data) {
+        MultiPaper.broadcastPacketToExternalServers(new PluginNotificationPacket(channel, data));
+    }
+
+    @Override
+    public void notify(Chunk chunk, String channel, byte[] data) {
+        LevelChunk levelChunk = ((CraftWorld) chunk.getWorld()).getHandle().getChunkIfLoaded(chunk.getX(), chunk.getZ());
+
+        if (levelChunk == null) {
+            new IllegalStateException("Chunk " + chunk.getWorld().getName() + "," + chunk.getX() + "," + chunk.getZ() + " is not loaded, could not send notification").printStackTrace();
+            return;
+        }
+
+        MultiPaper.broadcastPacketToExternalServers(levelChunk.externalSubscribers, () -> new PluginNotificationPacket(channel, data));
+    }
+
+    public void onNotification(ExternalServerConnection sender, String channel, byte[] data) {
+        List<Listener> listenerList = listeners.get(channel);
+        if (listenerList != null) {
+            Iterator<Listener> iterator = listenerList.iterator();
+
+            while (iterator.hasNext()) {
+                Listener listener = iterator.next();
+                Plugin plugin = listener.plugin.get();
+
+                if (plugin == null || !plugin.isEnabled()) {
+                    // Remove disabled plugins
+                    iterator.remove();
+                } else {
+                    listener.consumer.accept(data, (replyChannel, replyData) -> sender.send(new PluginNotificationPacket(replyChannel, replyData)));
+                }
+            }
+
+            if (listenerList.isEmpty()) {
+                listeners.remove(channel);
+            }
+        }
+    }
+
+    private static class Listener {
+        // Weak reference the plugin so that we don't keep an entire plugin loaded in memory after a reload
+        private final WeakReference<Plugin> plugin;
+        private final BiConsumer<byte[], BiConsumer<String, byte[]>> consumer;
+
+        public Listener(Plugin plugin, BiConsumer<byte[], BiConsumer<String, byte[]>> consumer) {
+            this.plugin = new WeakReference<>(plugin);
+            this.consumer = consumer;
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 24bda46194469b214e5ae2c609383f45095c3d0a..feb500a28c61d6ff59d5664ee3004d0226dcac6b 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -38,6 +38,8 @@ public class ExternalServerPacketSerializer {
         addPacket(AddItemToEntityContainerPacket.class, AddItemToEntityContainerPacket::new);
         addPacket(AddItemToContainerPacket.class, AddItemToContainerPacket::new);
         addPacket(MobSetNavigationGoalPacket.class, MobSetNavigationGoalPacket::new);
+        addPacket(PlayerDataUpdatePacket.class, PlayerDataUpdatePacket::new);
+        addPacket(PluginNotificationPacket.class, PluginNotificationPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<FriendlyDataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 6e584df98a39661561583588f77ae76fafed357b..84727a84000fe71eb0ff1c301bfa512566c98921 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -19,7 +19,9 @@ import java.io.IOException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
+import java.util.Map;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class PlayerCreatePacket extends ExternalServerPacket {
 
@@ -36,6 +38,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
     private final GameType gamemode;
     private final byte[] ip;
     private final short port;
+    private final ConcurrentHashMap<String, String> data;
+    private final ConcurrentHashMap<String, String> persistentData;
 
     private PlayerCreatePacket(ServerPlayer player) {
         this.name = player.getScoreboardName();
@@ -49,6 +53,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         this.gamemode = player.gameMode.getGameModeForPlayer();
         this.ip = ((InetSocketAddress) player.connection.connection.address).getAddress().getAddress();
         this.port = (short) ((InetSocketAddress) player.connection.connection.address).getPort();
+        this.data = player.getBukkitEntity().data;
+        this.persistentData = player.getBukkitEntity().persistentData;
     }
 
     public PlayerCreatePacket(FriendlyDataInputStream in) throws IOException {
@@ -64,6 +70,18 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         ip = new byte[in.readVarInt()];
         in.readFully(ip);
         port = in.readShort();
+
+        data = new ConcurrentHashMap<>();
+        int dataLength = in.readInt();
+        for (int i = 0; i < dataLength; i++) {
+            data.put(in.readString(), in.readString());
+        }
+
+        persistentData = new ConcurrentHashMap<>();
+        int persistentDataLength = in.readInt();
+        for (int i = 0; i < persistentDataLength; i++) {
+            persistentData.put(in.readString(), in.readString());
+        }
     }
 
     @Override
@@ -80,6 +98,18 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         out.writeVarInt(ip.length);
         out.write(ip);
         out.writeShort(port);
+
+        out.writeInt(data.size());
+        for (Map.Entry<String, String> entry : data.entrySet()) {
+            out.writeString(entry.getKey());
+            out.writeString(entry.getValue());
+        }
+
+        out.writeInt(persistentData.size());
+        for (Map.Entry<String, String> entry : persistentData.entrySet()) {
+            out.writeString(entry.getKey());
+            out.writeString(entry.getValue());
+        }
     }
 
     @Override
@@ -99,7 +129,9 @@ public class PlayerCreatePacket extends ExternalServerPacket {
                 e.printStackTrace();
             }
 
-            ExternalPlayer.create(connection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address);
+            ExternalPlayer player = ExternalPlayer.create(connection, name, uuid, world, x, y, z, yaw, pitch, gamemode, address);
+            player.getBukkitEntity().data = data;
+            player.getBukkitEntity().persistentData = persistentData;
         });
     }
 
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..11115097cd2f380c4f38f29c8054469e8babfee2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerDataUpdatePacket.java
@@ -0,0 +1,70 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerDataUpdatePacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final boolean persistent;
+    private final String key;
+    private final String value;
+
+    public PlayerDataUpdatePacket(Player player, boolean persistent, String key, String value) {
+        this.uuid = player.getUniqueId();
+        this.persistent = persistent;
+        this.key = key;
+        this.value = value;
+    }
+
+    public PlayerDataUpdatePacket(FriendlyDataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        persistent = in.readBoolean();
+        key = in.readString();
+        if (in.readBoolean()) {
+            value = in.readString();
+        } else {
+            value = null;
+        }
+    }
+
+    @Override
+    public void write(FriendlyDataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        out.writeBoolean(persistent);
+        out.writeString(key);
+        out.writeBoolean(value != null);
+        if (value != null) {
+            out.writeString(value);
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (value != null) {
+                if (persistent) {
+                    player.getBukkitEntity().persistentData.put(key, value);
+                } else {
+                    player.getBukkitEntity().data.put(key, value);
+                }
+            } else {
+                if (persistent) {
+                    player.getBukkitEntity().persistentData.remove(key);
+                } else {
+                    player.getBukkitEntity().data.remove(key);
+                }
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PluginNotificationPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PluginNotificationPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc277998614d0983b6da06ad3117b63b600c055c
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PluginNotificationPacket.java
@@ -0,0 +1,39 @@
+package puregero.multipaper.externalserverprotocol;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class PluginNotificationPacket extends ExternalServerPacket {
+    private final String channel;
+    private final byte[] data;
+
+    public PluginNotificationPacket(String channel, byte[] data) {
+        this.channel = channel;
+        this.data = data;
+    }
+
+    public PluginNotificationPacket(FriendlyDataInputStream in) throws IOException {
+        channel = in.readString();
+
+        data = new byte[in.readInt()];
+        in.readFully(data);
+    }
+
+    @Override
+    public void write(FriendlyDataOutputStream out) throws IOException {
+        out.writeString(channel);
+        out.writeInt(data.length);
+        out.write(data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> ((CraftServer) Bukkit.getServer()).getMultiPaperNotificationManager().onNotification(connection, channel, data));
+    }
+}
