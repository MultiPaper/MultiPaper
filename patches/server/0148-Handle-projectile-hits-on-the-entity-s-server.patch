From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 18 Mar 2022 20:38:28 +1000
Subject: [PATCH] Handle projectile hits on the entity's server


diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 5ce90ee76dbe819229a3a050fb82b8a4aab7cd9e..23183ae92e8e069e43413f258afe974c7a1f4aa1 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -23,6 +23,9 @@ import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 // CraftBukkit start
 import org.bukkit.projectiles.ProjectileSource;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaperEntityInteractHandler;
+import puregero.multipaper.externalserverprotocol.ProjectileHitEntityPacket;
 // CraftBukkit end
 
 public abstract class Projectile extends Entity {
@@ -33,6 +36,7 @@ public abstract class Projectile extends Entity {
     public Entity cachedOwner;
     private boolean leftOwner;
     private boolean hasBeenShot;
+    private boolean hasHitEntity; // MultiPaper
 
     // CraftBukkit start
     protected boolean hitCancelled = false;
@@ -206,10 +210,22 @@ public abstract class Projectile extends Entity {
     }
     // CraftBukkit end
 
+    public void onHit0(HitResult hitResult) { this.onHit(hitResult); }  // MultiPaper - expose onHit
     protected void onHit(HitResult hitResult) {
         HitResult.Type movingobjectposition_enummovingobjecttype = hitResult.getType();
 
         if (movingobjectposition_enummovingobjecttype == HitResult.Type.ENTITY) {
+            // MultiPaper start - handle entity hits on their server
+            if (hasHitEntity) {
+                return; // Prevent infinite hits of the entity if an external server ignores the projectile hit packet
+            }
+            hasHitEntity = true;
+            ExternalServerConnection entityOwner = MultiPaperEntityInteractHandler.getOwner(((EntityHitResult) hitResult).getEntity());
+            if (entityOwner != null) {
+                entityOwner.send(new ProjectileHitEntityPacket(this, ((EntityHitResult) hitResult).getEntity(), hitResult.getLocation()));
+                return;
+            }
+            // MultiPaper end
             this.onHitEntity((EntityHitResult) hitResult);
             this.level.gameEvent(GameEvent.PROJECTILE_LAND, hitResult.getLocation(), GameEvent.Context.of(this, (BlockState) null));
         } else if (movingobjectposition_enummovingobjecttype == HitResult.Type.BLOCK) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 772b670198316dca9f6796e2414eae907afd3d91..4f99b58e9d3da8ada83c80d13e476654fef71179 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -70,6 +70,7 @@ public class ExternalServerPacketSerializer {
         addPacket(DestroyBlockPacket.class, DestroyBlockPacket::new);
         addPacket(DestroyAndAckPacket.class, DestroyAndAckPacket::new);
         addPacket(EntityTeleportPacket.class, EntityTeleportPacket::new);
+        addPacket(ProjectileHitEntityPacket.class, ProjectileHitEntityPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ProjectileHitEntityPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/ProjectileHitEntityPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..a130a2d3216531deaf0a9fb7d319862bf288ff15
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ProjectileHitEntityPacket.java
@@ -0,0 +1,76 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.projectile.Projectile;
+import net.minecraft.world.phys.EntityHitResult;
+import net.minecraft.world.phys.Vec3;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class ProjectileHitEntityPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(ProjectileHitEntityPacket.class.getSimpleName());
+
+    private final String world;
+    private final UUID uuid;
+    private final UUID entityUuid;
+    private final Vec3 location;
+
+    public ProjectileHitEntityPacket(Projectile projectile, Entity entity, Vec3 location) {
+        this.world = projectile.level.getWorld().getName();
+        this.uuid = projectile.getUUID();
+        this.entityUuid = entity.getUUID();
+        this.location = location;
+    }
+
+    public ProjectileHitEntityPacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        uuid = in.readUUID();
+        entityUuid = in.readUUID();
+        location = new Vec3(in.readDouble(), in.readDouble(), in.readDouble());
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUUID(uuid);
+        out.writeUUID(entityUuid);
+        out.writeDouble(location.x);
+        out.writeDouble(location.y);
+        out.writeDouble(location.z);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            World bukkitWorld = Bukkit.getWorld(world);
+
+            if (bukkitWorld instanceof CraftWorld craftWorld) {
+                ServerLevel level = craftWorld.getHandle();
+                Projectile projectile = (Projectile) level.entityManager.knownUuids.get(uuid);
+                Entity entity = level.entityManager.knownUuids.get(entityUuid);
+
+                if (projectile == null) {
+                    LOGGER.warn("Tried to hit an entity with a projectile, but the projectile " + uuid + " is null");
+                    return;
+                }
+
+                if (entity == null) {
+                    LOGGER.warn("Tried to hit an entity with a projectile " + projectile + ", but the entity " + entityUuid + " is null");
+                    return;
+                }
+
+                projectile.onHit0(new EntityHitResult(entity, location));
+            }
+        });
+    }
+}
