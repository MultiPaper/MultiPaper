From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 26 Nov 2021 01:30:05 +1000
Subject: [PATCH] Interact with external entities


diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
index c45b5ab6776f3ac79f856c3a6467c510e20db25a..53ca673c9a98c580403232972d11a02f3a12ef65 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
@@ -29,7 +29,9 @@ public class ServerboundInteractPacket implements Packet<ServerGamePacketListene
         }
     };
 
-    private ServerboundInteractPacket(int entityId, boolean playerSneaking, ServerboundInteractPacket.Action type) {
+    public final ServerboundInteractPacket.Action getAction() { return this.action; } // MultiPaper - add accessor
+
+    public ServerboundInteractPacket(int entityId, boolean playerSneaking, ServerboundInteractPacket.Action type) { // MultiPaper - make public
         this.entityId = entityId;
         this.action = type;
         this.usingSecondaryAction = playerSneaking;
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 7cdec020e5c9f4f56b157ed3d38d33c379515c28..1ce2bc4bfaa569c9727008232e4af82c74eb08ad 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -214,9 +214,7 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import org.bukkit.util.NumberConversions;
 import co.aikar.timings.MinecraftTimings; // Paper
-import puregero.multipaper.MultiPaper;
-import puregero.multipaper.MultiPaperInventoryHandler;
-import puregero.multipaper.MultiPaperPlayerHandler;
+import puregero.multipaper.*;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener {
@@ -496,7 +494,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handlePlayerInput(ServerboundPlayerInputPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperEntityInteractHandler.handleSteerVehicle(player, packet)) return; // MultiPaper
         this.player.setPlayerInput(packet.getXxa(), packet.getZza(), packet.isJumping(), packet.isShiftKeyDown());
+        MultiPaperEntityInteractHandler.handlePostSteerVehicle(player);
     }
 
     private static boolean containsInvalidValues(double x, double y, double z, float yaw, float pitch) {
@@ -514,6 +514,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleMoveVehicle(ServerboundMoveVehiclePacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperEntityInteractHandler.handleMoveVehicle(player, packet)) return;
         if (ServerGamePacketListenerImpl.containsInvalidValues(packet.getX(), packet.getY(), packet.getZ(), packet.getYRot(), packet.getXRot())) {
             this.disconnect(new TranslatableComponent("multiplayer.disconnect.invalid_vehicle_movement"), org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_VEHICLE_MOVEMENT); // Paper - kick event cause
         } else {
@@ -1964,6 +1965,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handlePaddleBoat(ServerboundPaddleBoatPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+        if (MultiPaperEntityInteractHandler.handlePaddleBoat(player, packet)) return;
         Entity entity = this.player.getVehicle();
 
         if (entity instanceof Boat) {
@@ -2448,6 +2450,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         this.player.resetLastActionTime();
         this.player.setShiftKeyDown(packet.isUsingSecondaryAction());
         if (entity != null) {
+            if (MultiPaperEntityInteractHandler.handleEntityInteract(player, entity, packet)) return; // MultiPaper
+
             if (!worldserver.getWorldBorder().isWithinBounds(entity.blockPosition())) {
                 return;
             }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 9757b3215c9495515f8efbcaf49d1fbf889ba0cb..d7ce3d43da00f99f7450e2453622856c6708214e 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -122,6 +122,7 @@ import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityExhaustionEvent;
 import org.bukkit.event.player.PlayerDropItemEvent;
 import org.bukkit.event.player.PlayerVelocityEvent;
+import puregero.multipaper.MultiPaperEntityInteractHandler;
 // CraftBukkit end
 
 public abstract class Player extends LivingEntity {
@@ -617,6 +618,7 @@ public abstract class Player extends LivingEntity {
     }
 
     private void touch(Entity entity) {
+        if (MultiPaperEntityInteractHandler.touchEntity(this, entity)) return; // MultiPaper
         entity.playerTouch(this);
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java b/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..a2a7a8ae0f7b1a2157313be942365d1d3310fc1c
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperEntityInteractHandler.java
@@ -0,0 +1,117 @@
+package puregero.multipaper;
+
+import net.minecraft.network.protocol.game.ServerboundInteractPacket;
+import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
+import net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket;
+import net.minecraft.network.protocol.game.ServerboundPlayerInputPacket;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.phys.Vec3;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.externalserverprotocol.PlayerActionOnEntityPacket;
+import puregero.multipaper.externalserverprotocol.PlayerActionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerTouchEntityPacket;
+
+public class MultiPaperEntityInteractHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperEntityInteractHandler.class.getSimpleName());
+
+    public static boolean handleEntityInteract(ServerPlayer player, Entity entity, ServerboundInteractPacket packet) {
+        LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
+        if (MultiPaper.isExternalPlayer(entity)) {
+            ((ExternalPlayer) entity).externalServerConnection.send(new PlayerActionOnEntityPacket(player, entity, packet));
+            return true;
+        } else if (MultiPaper.isRealPlayer(entity)) {
+            return false;
+        } else if (MultiPaper.isChunkExternal(chunk)) {
+            if (MultiPaper.isExternalPlayer(player)) {
+                LOGGER.warn("External player " + player.getScoreboardName() + " is interacting with an external entity " + entity);
+            }
+
+            chunk.externalOwner.getConnection().send(new PlayerActionOnEntityPacket(player, entity, packet));
+
+            return true;
+        }
+
+        return false;
+    }
+
+    public static boolean handleMoveVehicle(ServerPlayer player, ServerboundMoveVehiclePacket packet) {
+//        LevelChunk chunk = player.getRootVehicle().level.getChunkIfLoaded(player.getRootVehicle().blockPosition());
+//        if (MultiPaper.isExternalPlayer(player.getRootVehicle())) {
+//            ((ExternalPlayer) player.getRootVehicle()).externalServerConnection.send(new PlayerActionPacket(player, packet));
+//            return true;
+//        } else if (MultiPaper.isRealPlayer(player.getRootVehicle())) {
+//            return false;
+//        } else if (MultiPaper.isChunkExternal(chunk)) {
+//            if (MultiPaper.isExternalPlayer(player)) {
+//                LOGGER.warn("External player " + player.getScoreboardName() + " is steering an external entity " + player.getRootVehicle());
+//            }
+//
+//            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+//
+//            return true;
+//        }
+
+        return false;
+    }
+
+    public static boolean handleSteerVehicle(ServerPlayer player, ServerboundPlayerInputPacket packet) {
+        LevelChunk chunk = player.getRootVehicle().level.getChunkIfLoaded(player.getRootVehicle().blockPosition());
+        if (MultiPaper.isChunkExternal(chunk)) {
+            if (MultiPaper.isExternalPlayer(player)) {
+                LOGGER.warn("External player " + player.getScoreboardName() + " is steering an external entity " + player.getRootVehicle());
+            }
+
+            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+
+            return true;
+        }
+
+        return false;
+    }
+
+    public static void handlePostSteerVehicle(ServerPlayer player) {
+        if (MultiPaper.isExternalPlayer(player)) {
+            // Since the player isn't ticked, we need to call this manually to steer the vehicle
+            player.travel(new Vec3(player.xxa, player.yya, player.zza));
+        }
+    }
+
+    public static boolean handlePaddleBoat(ServerPlayer player, ServerboundPaddleBoatPacket packet) {
+        LevelChunk chunk = player.getRootVehicle().level.getChunkIfLoaded(player.getRootVehicle().blockPosition());
+        if (MultiPaper.isExternalPlayer(player.getRootVehicle())) {
+            ((ExternalPlayer) player.getRootVehicle()).externalServerConnection.send(new PlayerActionPacket(player, packet));
+            return true;
+        } else if (MultiPaper.isRealPlayer(player.getRootVehicle())) {
+            return false;
+        } else if (MultiPaper.isChunkExternal(chunk)) {
+            if (MultiPaper.isExternalPlayer(player)) {
+                LOGGER.warn("External player " + player.getScoreboardName() + " is steering an external entity " + player.getRootVehicle());
+            }
+
+            chunk.externalOwner.getConnection().send(new PlayerActionPacket(player, packet));
+
+            return true;
+        }
+
+        return false;
+    }
+
+    public static boolean touchEntity(Player player, Entity entity) {
+        LevelChunk chunk = entity.level.getChunkIfLoaded(entity.blockPosition());
+
+        if (MultiPaper.isRealPlayer(entity)) {
+            return false;
+        } else if (MultiPaper.isChunkExternal(chunk)) {
+            chunk.externalOwner.getConnection().send(new PlayerTouchEntityPacket(player, entity));
+
+            return true;
+        }
+
+        return false;
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 0ff1f12c156ba0145e12ad75b06b0ad6f293211e..6b83ec9eb7748f2ae96e5faa56bc6d123f5cebe7 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -34,6 +34,8 @@ public class ExternalServerPacketSerializer {
         addPacket(EntityUpdateWithDependenciesPacket.class, EntityUpdateWithDependenciesPacket::new);
         addPacket(RequestEntityPacket.class, RequestEntityPacket::new);
         addPacket(EntityRemovePacket.class, EntityRemovePacket::new);
+        addPacket(PlayerActionOnEntityPacket.class, PlayerActionOnEntityPacket::new);
+        addPacket(PlayerTouchEntityPacket.class, PlayerTouchEntityPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<DataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionOnEntityPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionOnEntityPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..51218de4b737ab620d5d1a16b6ea5f305168c148
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerActionOnEntityPacket.java
@@ -0,0 +1,99 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ServerGamePacketListener;
+import net.minecraft.network.protocol.game.ServerboundInteractPacket;
+import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerActionOnEntityPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerActionOnEntityPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final UUID entityUuid;
+    private final Packet<ServerGamePacketListener> action;
+
+    public PlayerActionOnEntityPacket(ServerPlayer player, Entity entity, Packet<ServerGamePacketListener> action) {
+        this.uuid = player.getUUID();
+        this.entityUuid = entity.getUUID();
+        this.action = action;
+    }
+
+    public PlayerActionOnEntityPacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        entityUuid = readUUID(in);
+
+        int length = in.readInt();
+        byte[] bytes = new byte[length];
+        in.readFully(bytes);
+        ByteBuf buf = Unpooled.wrappedBuffer(bytes);
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        action = (Packet<ServerGamePacketListener>) ConnectionProtocol.PLAY.createPacket(PacketFlow.SERVERBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        writeUUID(out, entityUuid);
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(action);
+        Integer id = protocol.getPacketId(PacketFlow.SERVERBOUND, action);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        action.write(friendlyByteBuf);
+        byte[] bytes = buf.array();
+        out.writeInt(bytes.length);
+        out.write(bytes);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to run an action on a non-existent player with uuid " + uuid);
+                return;
+            }
+
+            Entity entity = ((ServerLevel) player.level).getEntity(entityUuid);
+
+            if (entity == null) {
+                LOGGER.warn(player.getScoreboardName() + " tried to run an action on a non-existent entity with uuid " + entityUuid);
+                return;
+            }
+
+            Packet<ServerGamePacketListener> newPacket;
+
+            // Refactor the entity id
+            if (action instanceof ServerboundInteractPacket serverboundInteractPacket) {
+                newPacket = new ServerboundInteractPacket(entity.getId(), serverboundInteractPacket.isUsingSecondaryAction(), serverboundInteractPacket.getAction());
+            } else {
+                LOGGER.error("Unhandled action on entity " + action);
+                return;
+            }
+
+            newPacket.handle(player.connection);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..901bd91c15aa1e0e6faf2870c8835a635e62f3c1
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerTouchEntityPacket.java
@@ -0,0 +1,66 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerTouchEntityPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerTouchEntityPacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final UUID entityUuid;
+
+    public PlayerTouchEntityPacket(Player player, Entity entity) {
+        this.uuid = player.getUUID();
+        this.entityUuid = entity.getUUID();
+    }
+
+    public PlayerTouchEntityPacket(DataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        entityUuid = readUUID(in);
+    }
+
+    @Override
+    public void write(DataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        writeUUID(out, entityUuid);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to run a touch entity on a non-existent player with uuid " + uuid);
+                return;
+            }
+
+            Entity entity = ((ServerLevel) player.level).getEntity(entityUuid);
+
+            if (entity == null) {
+                if (EntityRemovePacket.removedEntities.contains(uuid)) {
+                    return;
+                }
+
+                LOGGER.warn(player.getScoreboardName() + " tried to touch a non-existent entity with uuid " + entityUuid + ", requesting it...");
+                connection.send(new RequestEntityPacket(player.level.getWorld().getName(), entityUuid));
+                return;
+            }
+
+            entity.playerTouch(player);
+        });
+    }
+}
