From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 29 Jan 2022 20:22:06 +1000
Subject: [PATCH] Only save non-modified chunks


diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
index 1b0d92c68407cdb09ed8aac271b625d92db87017..5ff206a1e92c13312989e07b2154bc0787da5599 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
@@ -427,6 +427,8 @@ public abstract class StarLightEngine {
                 this.propagateBlockChanges(lightAccess, chunk, positions);
             }
             this.updateVisible(lightAccess);
+
+            chunk.setUnsaved(true); // MultiPaper
         } finally {
             this.destroyCaches();
         }
@@ -906,6 +908,8 @@ public abstract class StarLightEngine {
             this.lightChunk(lightAccess, chunk, true);
             this.setNibbles(chunk, nibbles);
             this.updateVisible(lightAccess);
+
+            chunk.setUnsaved(true); // MultiPaper
         } finally {
             this.destroyCaches();
         }
@@ -1004,6 +1008,8 @@ public abstract class StarLightEngine {
                     }
 
                     this.lightChunk(lightAccess, neighbour, false);
+
+                    neighbour.setUnsaved(true); // MultiPaper
                 } finally {
                     this.destroyCaches();
                 }
@@ -1028,6 +1034,8 @@ public abstract class StarLightEngine {
                 chunkLightCallback.accept(chunkPos);
             }
             ++lightCalls;
+
+            chunk.setUnsaved(true); // MultiPaper
         }
 
         if (onComplete != null) {
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index fc70b48228f8d91f71d9fb31a3f667def74fce87..335f7e121b2b69a6b9b40bc87b1d675f41d8f6f6 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -646,7 +646,7 @@ public class ChunkHolder {
                         // Minecraft will apply the chunks tick lists to the world once the chunk got loaded, and then store the tick
                         // lists again inside the chunk once the chunk becomes inaccessible and set the chunk's needsSaving flag.
                         // These actions may however happen deferred, so we manually set the needsSaving flag already here.
-                        chunk.setUnsaved(true);
+                        // chunk.setUnsaved(true); // MultiPaper - not convinced ^
                         chunk.unloadCallback();
                     });
                 }
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 9c0a6b836de9cc8309776317760d0469e8fc345c..21c178c868a7ab2e0837b9d0aed954f9e3a8a981 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -15,6 +15,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkSource;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.redstone.NeighborUpdater;
@@ -45,11 +46,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay));
     }
@@ -57,11 +60,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     LevelTickAccess<Fluid> getFluidTicks();
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay));
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index de231a14eca2cdc42e54f300ed7dce3ab357cc74..8d44b749a2750dca78f790941da36dffa5747a0c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -393,6 +393,7 @@ public class ChunkSerializer {
 
         ((ChunkAccess) object1).setAllStarts(ChunkSerializer.unpackStructureStart(StructurePieceSerializationContext.fromLevel(world), nbttagcompound3, world.getSeed()));
         ((ChunkAccess) object1).setAllReferences(ChunkSerializer.unpackStructureReferences(world.registryAccess(), chunkPos, nbttagcompound3));
+        ((ChunkAccess) object1).setUnsaved(false); // MultiPaper - No point saving something that we just loaded
         if (nbt.getBoolean("shouldSave")) {
             ((ChunkAccess) object1).setUnsaved(true);
         }
