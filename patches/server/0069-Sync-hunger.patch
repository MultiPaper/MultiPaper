From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 10 Dec 2021 22:34:14 +1000
Subject: [PATCH] Sync hunger


diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index 2934b6de1f1fb914a532ee20184df99d1acd8e65..386e34ab182f2966cd1570160707c1eed17df1f4 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -9,6 +9,8 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.GameRules;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerFoodUpdatePacket;
 
 public class FoodData {
 
@@ -36,6 +38,7 @@ public class FoodData {
     public void eat(int food, float saturationModifier) {
         this.foodLevel = Math.min(food + this.foodLevel, 20);
         this.saturationLevel = Math.min(this.saturationLevel + (float) food * saturationModifier * 2.0F, (float) this.foodLevel);
+        MultiPaper.broadcastPacketToExternalServers((ServerPlayer) entityhuman, new PlayerFoodUpdatePacket(entityhuman)); // MultiPaper
     }
 
     public void eat(Item item, ItemStack stack) {
@@ -64,12 +67,14 @@ public class FoodData {
             this.exhaustionLevel -= 4.0F;
             if (this.saturationLevel > 0.0F) {
                 this.saturationLevel = Math.max(this.saturationLevel - 1.0F, 0.0F);
+                MultiPaper.broadcastPacketToExternalServers((ServerPlayer) entityhuman, new PlayerFoodUpdatePacket(entityhuman)); // MultiPaper
             } else if (enumdifficulty != Difficulty.PEACEFUL) {
                 // CraftBukkit start
                 org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(player, Math.max(this.foodLevel - 1, 0));
 
                 if (!event.isCancelled()) {
                     this.foodLevel = event.getFoodLevel();
+                    MultiPaper.broadcastPacketToExternalServers((ServerPlayer) entityhuman, new PlayerFoodUpdatePacket(entityhuman)); // MultiPaper
                 }
 
                 ((ServerPlayer) player).connection.send(new ClientboundSetHealthPacket(((ServerPlayer) player).getBukkitEntity().getScaledHealth(), this.foodLevel, this.saturationLevel));
@@ -155,10 +160,12 @@ public class FoodData {
 
     public void setFoodLevel(int foodLevel) {
         this.foodLevel = foodLevel;
+        MultiPaper.broadcastPacketToExternalServers((ServerPlayer) entityhuman, new PlayerFoodUpdatePacket(entityhuman)); // MultiPaper
     }
 
     public void setSaturation(float saturationLevel) {
         this.saturationLevel = saturationLevel;
+        MultiPaper.broadcastPacketToExternalServers((ServerPlayer) entityhuman, new PlayerFoodUpdatePacket(entityhuman)); // MultiPaper
     }
 
     public void setExhaustion(float exhaustion) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index e7108dd70f1eb91f38e04ad71e595bc679560f75..204a3481624cc0d03a7dc6e7093cf98c8a695258 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -62,6 +62,8 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerFoodUpdatePacket;
 
 public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     private CraftInventoryPlayer inventory;
@@ -737,6 +739,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     @Override
     public void setSaturation(float value) {
         this.getHandle().getFoodData().saturationLevel = value;
+        MultiPaper.broadcastPacketToExternalServers((ServerPlayer) getHandle(), new PlayerFoodUpdatePacket(getHandle())); // MultiPaper
     }
 
     @Override
@@ -747,6 +750,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     @Override
     public void setFoodLevel(int value) {
         this.getHandle().getFoodData().foodLevel = value;
+        MultiPaper.broadcastPacketToExternalServers((ServerPlayer) getHandle(), new PlayerFoodUpdatePacket(getHandle())); // MultiPaper
     }
 
     @Override
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index feb500a28c61d6ff59d5664ee3004d0226dcac6b..353c7fea484aadf2b771bcd8ba6a0f2493203a58 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -40,6 +40,7 @@ public class ExternalServerPacketSerializer {
         addPacket(MobSetNavigationGoalPacket.class, MobSetNavigationGoalPacket::new);
         addPacket(PlayerDataUpdatePacket.class, PlayerDataUpdatePacket::new);
         addPacket(PluginNotificationPacket.class, PluginNotificationPacket::new);
+        addPacket(PlayerFoodUpdatePacket.class, PlayerFoodUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, IOExceptionFunction<FriendlyDataInputStream, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 84727a84000fe71eb0ff1c301bfa512566c98921..e4cb4caaec81940133dc221c3d1a4add13517e03 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -139,6 +139,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         connection.send(new PlayerCreatePacket(player));
         connection.send(new PlayerActionPacket(player, new ServerboundSetCarriedItemPacket(player.getInventory().selected)));
         connection.send(new EntityUpdatePacket(player, new ClientboundSetEntityDataPacket(player.getId(), player.getEntityData(), true)));
+        connection.send(new PlayerFoodUpdatePacket(player));
 
         MultiPaperInventoryHandler.sendFullInventoryUpdate(connection, player);
         MultiPaperEnderChestHandler.sendFullEnderChestUpdate(connection, player);
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerFoodUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerFoodUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..0b61583c5fd629a7ce9f72b0f19418e3db0a8702
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerFoodUpdatePacket.java
@@ -0,0 +1,48 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.player.Player;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerFoodUpdatePacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final int foodLevel;
+    private final float saturationLevel;
+
+    public PlayerFoodUpdatePacket(Player player) {
+        this.uuid = player.getUUID();
+        this.foodLevel = player.getFoodData().foodLevel;
+        this.saturationLevel = player.getFoodData().saturationLevel;
+    }
+
+    public PlayerFoodUpdatePacket(FriendlyDataInputStream in) throws IOException {
+        uuid = readUUID(in);
+        foodLevel = in.readShort();
+        saturationLevel = in.readFloat();
+    }
+
+    @Override
+    public void write(FriendlyDataOutputStream out) throws IOException {
+        writeUUID(out, uuid);
+        out.writeShort(foodLevel);
+        out.writeFloat(saturationLevel);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            player.getFoodData().foodLevel = foodLevel;
+            player.getFoodData().saturationLevel = saturationLevel;
+        });
+    }
+}
