From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 3 Dec 2021 22:28:35 +1000
Subject: [PATCH] Take control of external chunks to ensure a redstone
 contraption runs on a single server


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3ef804cf4f301f3e81647cedbffc48d8329cba5a..7c4ca7261d7441af9f60a639f64bf5065d4ad61e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -194,6 +194,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperExternalBlocksHandler;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
 
@@ -1543,6 +1544,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         this.isIteratingOverLevels = true; // Paper
         net.minecraft.network.FriendlyByteBuf.hasItemSerializeEvent = org.purpurmc.purpur.event.packet.NetworkItemSerializeEvent.getHandlerList().getRegisteredListeners().length > 0; // Purpur
+
+        MultiPaperExternalBlocksHandler.tick(); // MultiPaper
+
         Iterator iterator = this.getAllLevels().iterator(); // Paper - move down
         while (iterator.hasNext()) {
             ServerLevel worldserver = (ServerLevel) iterator.next();
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e1960686c6ba842e96cb8395c1a140adef986a4b..c418513b2efeb7bd3179c95bd2e65c9eaeea7c1e 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -835,6 +835,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             return false;
         } else {
             FluidState fluid = this.getFluidState(pos);
+
             // Paper start - while the above setAir method is named same and looks very similar
             // they are NOT used with same intent and the above should not fire this event. The above method is more of a BlockSetToAirEvent,
             // it doesn't imply destruction of a block that plays a sound effect / drops an item.
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 73d1adc5ddf0363966eac0c77c8dfbbb20a2b6a3..55ca70ac01a8586c66f49c71e21399bba96f5636 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -23,6 +23,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.LevelTickAccess;
 import net.minecraft.world.ticks.ScheduledTick;
 import net.minecraft.world.ticks.TickPriority;
+import puregero.multipaper.MultiPaperExternalBlocksHandler;
 
 public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
 
@@ -44,20 +45,24 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
+        MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay) {
+        MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay));
     }
 
     LevelTickAccess<Fluid> getFluidTicks();
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
+        MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay) {
+        MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay));
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index d50f1eb0946875c50990390d647c8f4e30f24e01..373d1c653b18b8d0e42a7e9b0eafe33273b3cc19 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -603,7 +603,13 @@ public class LevelChunk extends ChunkAccess {
                 boolean flag3 = iblockdata1.hasBlockEntity();
 
                 if (!this.level.isClientSide) {
+                    if (MultiPaperChunkHandler.blockUpdateChunk == null) // MultiPaper - only call onremove when we're not updating a chunk
                     iblockdata1.onRemove(this.level, blockposition, iblockdata, flag);
+                    // MultiPaper start - call removeBlockEntity even if we don't remove the block
+                    else if (!iblockdata1.is(block) && flag3) {
+                        this.removeBlockEntity(blockposition);
+                    }
+                    // MultiPaper end - call removeBlockEntity even if we don't remove the block
                 } else if (!iblockdata1.is(block) && flag3) {
                     this.removeBlockEntity(blockposition);
                 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 7d2116d1f967cffe73a62725fc8fc8efd4012ec1..985b07cebab915dc80931d905859cef9a28e0dab 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -124,6 +124,8 @@ public class MultiPaper {
                 broadcastPacketToExternalServers(new TimeUpdatePacket(level));
             }
         }
+
+        MultiPaperExternalBlocksHandler.tick();
     }
 
     public static void sendTickTime(long time, double tps) {
diff --git a/src/main/java/puregero/multipaper/MultiPaperExternalBlocksHandler.java b/src/main/java/puregero/multipaper/MultiPaperExternalBlocksHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..c88ad1b59de282ffa6feda50e91447e2928f513f
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperExternalBlocksHandler.java
@@ -0,0 +1,151 @@
+package puregero.multipaper;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.ticks.LevelChunkTicks;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.externalserverprotocol.SendTickListPacket;
+import puregero.multipaper.mastermessagingprotocol.ChunkKey;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.RequestChunkOwnershipMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.BooleanMessageReply;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+
+public class MultiPaperExternalBlocksHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperExternalBlocksHandler.class.getSimpleName());
+    private static final HashSet<NewChunkHolder> scheduledChunks = new HashSet<>();
+    private static final List<CompletableFutureWithKey<HashSet<NewChunkHolder>, Boolean>> takingControlOf = new ArrayList<>();
+
+    public static void onBlockScheduled(ServerLevel level, BlockPos pos) {
+        NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(level, pos);
+
+        if (MultiPaper.isChunkExternal(newChunkHolder)) {
+            scheduledChunks.add(newChunkHolder);
+        }
+    }
+
+    public static void tick() {
+        takingControlOf.clear();
+
+        while (!scheduledChunks.isEmpty()) {
+            Iterator<NewChunkHolder> iterator = scheduledChunks.iterator();
+            NewChunkHolder newChunkHolder = iterator.next();
+            iterator.remove();
+
+            if (!newChunkHolder.hasExternalLockRequest) {
+                // We aren't ticking this chunk
+                sendTickListTo(newChunkHolder);
+                continue;
+            }
+
+            HashSet<NewChunkHolder> neighbours = new HashSet<>();
+
+            fillTickingNeighbours(newChunkHolder, neighbours);
+
+            boolean hasALocalChunk = false;
+
+            for (NewChunkHolder neighbour : neighbours) {
+                if (MultiPaper.isChunkLocal(neighbour)) {
+                    hasALocalChunk = true;
+                    break;
+                }
+            }
+
+            if (hasALocalChunk) {
+                takingControlOf.add(requestChunkOwnership(neighbours));
+            } else {
+                for (NewChunkHolder neighbour : neighbours) {
+                    sendTickListTo(neighbour);
+                }
+            }
+        }
+
+        if (!takingControlOf.isEmpty()) {
+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(takingControlOf.toArray(CompletableFuture[]::new));
+
+            // Wait for the control process to complete before continuing the tick so that this doesn't mess up the next tick
+            MinecraftServer.getServer().managedBlock(allFuture::isDone);
+
+            for (CompletableFutureWithKey<HashSet<NewChunkHolder>, Boolean> completableFuture : takingControlOf) {
+                if (!completableFuture.join()) {
+                    // Failed to take control of the chunks, send the tick lists to their owners
+                    for (NewChunkHolder newChunkHolder : completableFuture.getKey()) {
+                        sendTickListTo(newChunkHolder);
+                    }
+                }
+            }
+        }
+    }
+
+    private static void sendTickListTo(NewChunkHolder newChunkHolder) {
+        if (MultiPaper.isChunkExternal(newChunkHolder)) {
+            if (newChunkHolder.getCurrentChunk() instanceof LevelChunk levelChunk) {
+                newChunkHolder.externalOwner.getConnection().send(new SendTickListPacket(levelChunk));
+                ((LevelChunkTicks<Block>) levelChunk.getBlockTicks()).removeIf(schedule -> true);
+                ((LevelChunkTicks<Fluid>) levelChunk.getFluidTicks()).removeIf(schedule -> true);
+            } else {
+                LOGGER.warn("Tried sending a tick list to a chunk that isn't a level chunk: " + newChunkHolder);
+            }
+        }
+    }
+
+    private static void fillTickingNeighbours(NewChunkHolder newChunkHolder, HashSet<NewChunkHolder> neighbours) {
+        for (int x = -1; x <= 1; x ++) {
+            for (int z = -1; z <= 1; z ++) {
+                NewChunkHolder neighbour = MultiPaper.getChunkHolder(newChunkHolder.world, newChunkHolder.chunkX + x, newChunkHolder.chunkZ + z);
+
+                if (neighbour != null && !neighbours.contains(neighbour) && neighbour.hasExternalLockRequest &&
+                        neighbour.getCurrentChunk() instanceof LevelChunk levelChunk &&
+                        (levelChunk.getBlockTicks().count() > 0 || levelChunk.getFluidTicks().count() > 0)) {
+                    scheduledChunks.remove(neighbour);
+                    neighbours.add(neighbour);
+                    fillTickingNeighbours(neighbour, neighbours);
+                }
+            }
+        }
+    }
+
+    private static CompletableFutureWithKey<HashSet<NewChunkHolder>, Boolean> requestChunkOwnership(HashSet<NewChunkHolder> neighbours) {
+        CompletableFutureWithKey<HashSet<NewChunkHolder>, Boolean> future = new CompletableFutureWithKey<>(neighbours);
+
+        String world = null;
+        ChunkKey[] chunkKeys = new ChunkKey[neighbours.size()];
+        int i = 0;
+
+        for (NewChunkHolder newChunkHolder : neighbours) {
+            if (world == null) {
+                world = newChunkHolder.world.getWorld().getName();
+            }
+
+            chunkKeys[i++] = new ChunkKey(newChunkHolder.world.getWorld().getName(), newChunkHolder.chunkX, newChunkHolder.chunkZ);
+        }
+
+        MultiPaper.getConnection().sendAndAwaitReply(new RequestChunkOwnershipMessage(world, chunkKeys), BooleanMessageReply.class).thenAccept(message -> future.complete(message.result));
+
+        return future;
+    }
+
+    private static class CompletableFutureWithKey<K, V> extends CompletableFuture<V> {
+        private final K key;
+
+        private CompletableFutureWithKey(K key) {
+            this.key = key;
+        }
+
+        public K getKey() {
+            return key;
+        }
+    }
+
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SendTickListPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SendTickListPacket.java
index 801d03669f9056ca9cd3dc2c617521c29a6854be..6ef6bdb74223b9fc251c36a0eb100e239c32db43 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SendTickListPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SendTickListPacket.java
@@ -6,9 +6,11 @@ import net.minecraft.nbt.Tag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.ProtoChunk;
+import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.ticks.LevelChunkTicks;
 import net.minecraft.world.ticks.ProtoChunkTicks;
 import org.apache.logging.log4j.LogManager;
@@ -70,9 +72,26 @@ public class SendTickListPacket extends ExternalServerPacket {
     @Override
     public void handle(ExternalServerConnection connection) {
         MultiPaper.runSync(() -> {
-            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            CraftWorld bukkitWorld = ((CraftWorld) Bukkit.getWorld(world));
+            ServerLevel level = bukkitWorld != null ? bukkitWorld.getHandle() : null;
             ChunkAccess chunk = MultiPaper.getChunkAccess(world, cx, cz);
-            if (chunk instanceof LevelChunk levelChunk) {
+            if (level != null && level.getChunkIfLoaded(cx, cz) != null) {
+                long now = level.getLevelData().getGameTime();
+
+                LevelChunkTicks<Block> blockTicks = LevelChunkTicks.load(tag.getList("block_ticks", Tag.TAG_COMPOUND), s -> BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(s)), chunk.getPos());
+                blockTicks.unpack(now);
+                blockTicks.removeIf(scheduled -> {
+                    level.getBlockTicks().schedule(scheduled);
+                    return true;
+                });
+
+                LevelChunkTicks<Fluid> fluidTicks = LevelChunkTicks.load(tag.getList("fluid_ticks", Tag.TAG_COMPOUND), s -> BuiltInRegistries.FLUID.getOptional(ResourceLocation.tryParse(s)), chunk.getPos());
+                fluidTicks.unpack(now);
+                fluidTicks.removeIf(scheduled -> {
+                    level.getFluidTicks().schedule(scheduled);
+                    return true;
+                });
+            } else if (chunk instanceof LevelChunk levelChunk) {
                 levelChunk.unregisterTickContainerFromLevel(level);
                 levelChunk.blockTicks = LevelChunkTicks.load(tag.getList("block_ticks", Tag.TAG_COMPOUND), s -> BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(s)), chunk.getPos());
                 levelChunk.fluidTicks = LevelChunkTicks.load(tag.getList("fluid_ticks", Tag.TAG_COMPOUND), s -> BuiltInRegistries.FLUID.getOptional(ResourceLocation.tryParse(s)), chunk.getPos());
