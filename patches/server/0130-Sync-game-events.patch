From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 13 Jul 2022 12:14:11 +1000
Subject: [PATCH] Sync game events


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 2b34d85af2f23078e2eba4a4974598b4674eee16..f40e4f2000d197a5d083a41a9628f0ffc6a80862 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -180,6 +180,7 @@ import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperChunkHandler;
 import puregero.multipaper.MultiPaperEntitiesHandler;
+import puregero.multipaper.MultiPaperGameEventHandler;
 import puregero.multipaper.MultiPaperInactiveTracker;
 import puregero.multipaper.externalserverprotocol.SpawnUpdatePacket;
 import puregero.multipaper.externalserverprotocol.TimeUpdatePacket;
@@ -904,6 +905,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
                 LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this);
 
+
                 if (entitylightning != null) {
                     entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
                     entitylightning.setVisualOnly(flag1);
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index e8f42ad6cc32cb21584d8988fcf3d1e4b6552f0c..90942f1ac6c937518adcc20625bc22630c87639e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -70,6 +70,7 @@ import net.minecraft.world.level.gameevent.vibrations.VibrationListener;
 import net.minecraft.world.phys.Vec3;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaperGameEventHandler;
 
 public class Allay extends PathfinderMob implements InventoryCarrier {
 
@@ -663,7 +664,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
         this.level.addParticle(ParticleTypes.HEART, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
     }
 
-    private class AllayVibrationListenerConfig implements VibrationListener.VibrationListenerConfig {
+    class AllayVibrationListenerConfig implements VibrationListener.VibrationListenerConfig, MultiPaperGameEventHandler.SourceContainer { // MultiPaper - get allay
 
         AllayVibrationListenerConfig() {}
 
@@ -696,9 +697,13 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
         public TagKey<GameEvent> getListenableEvents() {
             return GameEventTags.ALLAY_CAN_LISTEN;
         }
+
+        @Override public VibrationListener getVibrationListener() { return dynamicVibrationListener.getListener(); } // MultiPaper - add getter
+
+        @Override public Object getSource() { return Allay.this; } // MultiPaper - get allay
     }
 
-    private class JukeboxListener implements GameEventListener {
+    class JukeboxListener implements GameEventListener, MultiPaperGameEventHandler.SourceContainer { // MultiPaper - get allay
 
         private final PositionSource listenerSource;
         private final int listenerRadius;
@@ -730,5 +735,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
                 return false;
             }
         }
+
+        @Override public Object getSource() { return Allay.this; } // MultiPaper - get allay
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 17df2b09542f67cdd1d83f795d9b2aad9ccd4e05..cff9e79239f99a5096f832198e4fa1e0321b9a97 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -107,7 +107,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     public AnimationState diggingAnimationState = new AnimationState();
     public AnimationState attackAnimationState = new AnimationState();
     public AnimationState sonicBoomAnimationState = new AnimationState();
-    private final DynamicGameEventListener<VibrationListener> dynamicGameEventListener = new DynamicGameEventListener<>(new VibrationListener(new EntityPositionSource(this, this.getEyeHeight()), 16, this));
+    private final DynamicGameEventListener<VibrationListener> dynamicGameEventListener = new DynamicGameEventListener<>(new VibrationListener(new EntityPositionSource(this, this.getEyeHeight()), 16, this)); public VibrationListener getVibrationListener() { return dynamicGameEventListener.getListener(); } // MultiPaper - add getter
     private AngerManagement angerManagement = new AngerManagement(this::canTargetEntity, Collections.emptyList());
 
     public Warden(EntityType<? extends Monster> type, Level world) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
index a73d23d4235354c6232471d9839254f4bd791d0a..f4405af29c1cbaa20f422f7a48f71ab83138c298 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkSensorBlockEntity.java
@@ -19,7 +19,7 @@ import org.slf4j.Logger;
 
 public class SculkSensorBlockEntity extends BlockEntity implements VibrationListener.VibrationListenerConfig {
     private static final Logger LOGGER = LogUtils.getLogger();
-    private VibrationListener listener;
+    private VibrationListener listener; public VibrationListener getVibrationListener() { return listener; } // MultiPaper - add getter
     public int lastVibrationFrequency;
 
     public SculkSensorBlockEntity(BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
index 0554afa72ae6d2f01886916031c8b90b0d45eb52..c0040eaa1a05b24f2d18b5a16bca84cdf2c0cc42 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkShriekerBlockEntity.java
@@ -54,7 +54,7 @@ public class SculkShriekerBlockEntity extends BlockEntity implements VibrationLi
     });
     private static final int SHRIEKING_TICKS = 90;
     public int warningLevel;
-    private VibrationListener listener = new VibrationListener(new BlockPositionSource(this.worldPosition), 8, this);
+    private VibrationListener listener = new VibrationListener(new BlockPositionSource(this.worldPosition), 8, this); public VibrationListener getVibrationListener() { return listener; } // MultiPaper - add getter
 
     public SculkShriekerBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.SCULK_SHRIEKER, pos, state);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 9150c5ca7d90ee85528d4f304afa88b9d2408400..0839150d0e8a4887ac5660dba510acfa67a9d1ec 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -817,7 +817,7 @@ public class LevelChunk extends ChunkAccess {
         this.removeBlockEntityTicker(pos);
     }
 
-    private <T extends BlockEntity> void removeGameEventListener(T blockEntity, ServerLevel world) {
+    public <T extends BlockEntity> void removeGameEventListener(T blockEntity, ServerLevel world) { // MultiPaper - make public
         Block block = blockEntity.getBlockState().getBlock();
 
         if (block instanceof EntityBlock) {
@@ -1218,7 +1218,7 @@ public class LevelChunk extends ChunkAccess {
         });
     }
 
-    private <T extends BlockEntity> void addGameEventListener(T blockEntity, ServerLevel world) {
+    public <T extends BlockEntity> void addGameEventListener(T blockEntity, ServerLevel world) { // MultiPaper - make public
         Block block = blockEntity.getBlockState().getBlock();
 
         if (block instanceof EntityBlock) {
diff --git a/src/main/java/net/minecraft/world/level/gameevent/GameEventDispatcher.java b/src/main/java/net/minecraft/world/level/gameevent/GameEventDispatcher.java
index 11349f02d453c78e1cf0db8b89042b9023aa02bb..32f7b8be8423995c156a61c51d32d2f8f6a206cb 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/GameEventDispatcher.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/GameEventDispatcher.java
@@ -16,6 +16,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.event.world.GenericGameEvent;
+import puregero.multipaper.MultiPaperGameEventHandler;
 // CraftBukkit end
 
 public class GameEventDispatcher {
@@ -84,6 +85,7 @@ public class GameEventDispatcher {
             GameEvent.ListenerInfo gameevent_b = (GameEvent.ListenerInfo) iterator.next();
             GameEventListener gameeventlistener = gameevent_b.recipient();
 
+            if (MultiPaperGameEventHandler.onGameEvent(gameeventlistener, level, gameevent_b)) continue; // MultiPaper
             gameeventlistener.handleGameEvent(this.level, gameevent_b.gameEvent(), gameevent_b.context(), gameevent_b.source());
         }
 
diff --git a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
index 3288837a406539c4a22464524ffb2e727c6ad32b..bc81e98399b4917bedd855aaaaf46e0722af5aa2 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
@@ -33,6 +33,7 @@ import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.event.block.BlockReceiveGameEvent;
+import puregero.multipaper.MultiPaperGameEventHandler;
 // CraftBukkit end
 
 public class VibrationListener implements GameEventListener {
@@ -83,7 +84,7 @@ public class VibrationListener implements GameEventListener {
     }));
     protected final PositionSource listenerSource;
     public int listenerRange;
-    protected final VibrationListener.VibrationListenerConfig config;
+    public final VibrationListener.VibrationListenerConfig config; // MultiPaper - make public
     @Nullable
     protected VibrationInfo currentVibration;
     protected int travelTimeInTicks;
@@ -270,5 +271,7 @@ public class VibrationListener implements GameEventListener {
         void onSignalReceive(ServerLevel world, GameEventListener listener, BlockPos pos, GameEvent event, @Nullable Entity entity, @Nullable Entity sourceEntity, float distance);
 
         default void onSignalSchedule() {}
+
+        VibrationListener getVibrationListener(); // MultiPaper
     }
 }
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 0a80cd71c551bf6cb91989656e950970045d4486..91187cb163e972fedef0c8bfbfe511a5a58b9076 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -5,6 +5,7 @@ import io.papermc.paper.world.ChunkEntitySlices;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Container;
+import net.minecraft.world.entity.monster.warden.WardenSpawnTracker;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.MinecraftServer;
@@ -97,6 +98,8 @@ public class MultiPaper {
                 } else {
                     externalPlayer.setSleepCounter(0);
                 }
+
+                externalPlayer.getWardenSpawnTracker().ifPresent(WardenSpawnTracker::tick); // WardenSpawnTracker Optional is never empty
             }
 
             player.syncExperience();
diff --git a/src/main/java/puregero/multipaper/MultiPaperChunkHandler.java b/src/main/java/puregero/multipaper/MultiPaperChunkHandler.java
index 59d011962c3692e235997a5cf2893478347a2828..09e4266bbdc06450ca72108dd2db357bc1e192b2 100644
--- a/src/main/java/puregero/multipaper/MultiPaperChunkHandler.java
+++ b/src/main/java/puregero/multipaper/MultiPaperChunkHandler.java
@@ -164,7 +164,9 @@ public class MultiPaperChunkHandler {
             } else if (packet instanceof ClientboundBlockEntityDataPacket update) {
                 BlockEntity existingBlockEntity = blockUpdateChunk.getBlockEntity(update.getPos());
                 if (existingBlockEntity != null && existingBlockEntity.minecraftKey.toString().equals(update.getTag().getString("id"))) {
+                    ((LevelChunk) blockUpdateChunk).removeGameEventListener(existingBlockEntity, level);
                     existingBlockEntity.load(update.getTag());
+                    ((LevelChunk) blockUpdateChunk).addGameEventListener(existingBlockEntity, level);
                     holder.vanillaChunkHolder.blockChanged(update.getPos());
                 } else if (!blockUpdateChunk.getBlockState(update.getPos()).hasBlockEntity() && depth < 1) {
                     MCUtil.scheduleTask(1, () -> handleBlockUpdate(world, packet, depth + 1));
diff --git a/src/main/java/puregero/multipaper/MultiPaperGameEventHandler.java b/src/main/java/puregero/multipaper/MultiPaperGameEventHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..a354a69cfee340214ca4c48a5e21af6974fe3b41
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperGameEventHandler.java
@@ -0,0 +1,77 @@
+package puregero.multipaper;
+
+import com.mojang.datafixers.util.Either;
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.gameevent.GameEventListener;
+import net.minecraft.world.level.gameevent.vibrations.VibrationListener;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.externalserverprotocol.GameEventPacket;
+
+import java.util.Optional;
+
+public class MultiPaperGameEventHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperGameEventHandler.class.getSimpleName());
+
+    public interface SourceContainer {
+        Object getSource();
+    }
+
+    public static Either<Entity, BlockEntity> getEntity(Object object) {
+        if (object instanceof Entity entity) {
+            return Either.left(entity);
+        } else if (object instanceof BlockEntity blockEntity) {
+            return Either.right(blockEntity);
+        } else if (object instanceof SourceContainer sourceContainer) {
+            return getEntity(sourceContainer.getSource());
+        } else if (object instanceof VibrationListener vibrationListener) {
+            return getEntity(vibrationListener.config);
+        } else {
+            throw new IllegalArgumentException(object + " could not be converted to either an Entity or a BlockEntity!");
+        }
+    }
+
+    public static Optional<ExternalServer> getControllingServer(Either<Entity, BlockEntity> either) {
+        return either.map(
+                entity -> {
+                    Entity controller = MultiPaperEntitiesHandler.getControllingPassenger(entity);
+                    if (controller instanceof ExternalPlayer externalPlayer) {
+                        return Optional.of(externalPlayer.externalServerConnection.externalServer);
+                    } else if (controller instanceof ServerPlayer) {
+                        return Optional.empty();
+                    } else {
+                        NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder(entity);
+                        if (newChunkHolder != null && newChunkHolder.externalOwner != null && !newChunkHolder.externalOwner.isMe()) {
+                            return Optional.of(newChunkHolder.externalOwner);
+                        } else {
+                            return Optional.empty();
+                        }
+                    }
+                },
+                blockEntity -> {
+                    NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder((ServerLevel) blockEntity.getLevel(), blockEntity.getBlockPos());
+                    if (newChunkHolder != null && newChunkHolder.externalOwner != null && !newChunkHolder.externalOwner.isMe()) {
+                        return Optional.of(newChunkHolder.externalOwner);
+                    } else {
+                        return Optional.empty();
+                    }
+                }
+        );
+    }
+
+    public static boolean onGameEvent(GameEventListener gameEventListener, ServerLevel world, GameEvent.ListenerInfo event) {
+        Either<Entity, BlockEntity> either = getEntity(gameEventListener);
+        Optional<ExternalServer> controllingServer = getControllingServer(either);
+
+        controllingServer.ifPresent(
+                externalServer -> externalServer.getConnection().send(new GameEventPacket(either, world, event))
+        );
+        return controllingServer.isPresent();
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 7436f3c9565099769c8abcb66e8ba719bec9bde8..0aa7f26833c1e572e3339c5734b7d4c53b17781a 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -76,6 +76,7 @@ public class ExternalServerPacketSerializer {
         addPacket(RaidJoinPacket.class, RaidJoinPacket::new);
         addPacket(SetPoiPacket.class, SetPoiPacket::new);
         addPacket(AddDeltaMovementPacket.class, AddDeltaMovementPacket::new);
+        addPacket(GameEventPacket.class, GameEventPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/GameEventPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/GameEventPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae0190fdf03d45ba0dcd45b220f8100916bdd7a3
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/GameEventPacket.java
@@ -0,0 +1,132 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.datafixers.util.Either;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.animal.allay.Allay;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.gameevent.GameEventListener;
+import net.minecraft.world.level.gameevent.vibrations.VibrationListener;
+import net.minecraft.world.phys.Vec3;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.Optional;
+import java.util.UUID;
+
+public class GameEventPacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(GameEventPacket.class.getSimpleName());
+
+    private final UUID world;
+    private final Either<UUID, BlockPos> id;
+    private final GameEvent gameEvent;
+    private final Vec3 sourcePos;
+    private final Optional<UUID> sourceUuid;
+    private final Optional<BlockState> affectedState;
+
+    public GameEventPacket(Either<Entity, BlockEntity> either, ServerLevel level, GameEvent.ListenerInfo gameEvent) {
+        this.world = level.getWorld().getUID();
+        this.id = either.mapBoth(
+                Entity::getUUID,
+                BlockEntity::getBlockPos
+        );
+        this.gameEvent = gameEvent.gameEvent();
+        this.sourcePos = gameEvent.source();
+        this.sourceUuid = Optional.ofNullable(gameEvent.context().sourceEntity()).map(Entity::getUUID);
+        this.affectedState = Optional.ofNullable(gameEvent.context().affectedState());
+    }
+
+    public GameEventPacket(FriendlyByteBuf in) {
+        this.world = in.readUUID();
+        if (in.readBoolean()) {
+            this.id = Either.left(in.readUUID());
+        } else {
+            this.id = Either.right(in.readBlockPos());
+        }
+        this.gameEvent = in.readById(BuiltInRegistries.GAME_EVENT);
+        this.sourcePos = new Vec3(in.readDouble(), in.readDouble(), in.readDouble());
+        this.sourceUuid = in.readOptional(FriendlyByteBuf::readUUID);
+        this.affectedState = in.readOptional(buf -> buf.readById(Block.BLOCK_STATE_REGISTRY));
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(this.world);
+        out.writeBoolean(this.id.left().isPresent());
+        this.id.ifLeft(out::writeUUID);
+        this.id.ifRight(out::writeBlockPos);
+        out.writeId(BuiltInRegistries.GAME_EVENT, this.gameEvent);
+        out.writeDouble(this.sourcePos.x());
+        out.writeDouble(this.sourcePos.y());
+        out.writeDouble(this.sourcePos.z());
+        out.writeOptional(this.sourceUuid, FriendlyByteBuf::writeUUID);
+        out.writeOptional(this.affectedState, (buf, value) -> buf.writeId(Block.BLOCK_STATE_REGISTRY, value));
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(this.world)).getHandle();
+            Object entity = resolveId(level);
+            if (entity == null) {
+                LOGGER.warn("Could not find entity for " + this.id);
+                return;
+            }
+
+            if (entity instanceof Allay allay) {
+                allay.updateDynamicGameEventListener(
+                        (dynamicGameEventListener, serverLevel) -> handleGameEvent(dynamicGameEventListener.getListener(), level, entity)
+                );
+            } else {
+                GameEventListener gameEventListener = getGameEventListener(entity);
+                handleGameEvent(gameEventListener, level, entity);
+            }
+        });
+    }
+
+    private void handleGameEvent(GameEventListener gameEventListener, ServerLevel level, Object entity) {
+        gameEventListener.handleGameEvent(level, gameEvent, GameEvent.Context.of(sourceUuid.map(level::getEntity).orElse(null), affectedState.orElse(null)), sourcePos);
+    }
+
+    private GameEventListener getGameEventListener(Object entity) {
+        if (entity instanceof GameEventListener gameEventListener) {
+            return gameEventListener;
+        } else if (entity instanceof VibrationListener.VibrationListenerConfig vibrationListenerConfig) {
+            return vibrationListenerConfig.getVibrationListener();
+        } else {
+            throw new IllegalArgumentException("Could not figure out how to convert " + entity + " to a GameEventListener");
+        }
+    }
+
+    private Vec3 getPos(Object object) {
+        if (object instanceof Entity entity) {
+            return entity.position();
+        } else if (object instanceof BlockEntity blockEntity) {
+            return new Vec3(blockEntity.getBlockPos().getX() + 0.5, blockEntity.getBlockPos().getY(), blockEntity.getBlockPos().getZ() + 0.5);
+        } else {
+            throw new IllegalArgumentException(object + " could not be converted to either an Entity or a BlockEntity to get it's position!");
+        }
+    }
+
+    private Object resolveId(ServerLevel level) {
+        return this.id.map(
+                level::getEntity,
+                blockPos -> {
+                    LevelChunk levelChunk = level.getChunkIfLoaded(blockPos);
+                    return levelChunk == null ? null : levelChunk.getBlockEntity(blockPos);
+                }
+        );
+    }
+}
