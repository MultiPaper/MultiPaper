From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 9 Jan 2022 14:33:32 +1000
Subject: [PATCH] Add high performance multipaper executor


diff --git a/src/main/java/puregero/multipaper/MultiPaperExecutor.java b/src/main/java/puregero/multipaper/MultiPaperExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..e5de22d014b37311e2fd07e5c509b46a11885c2d
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperExecutor.java
@@ -0,0 +1,133 @@
+package puregero.multipaper;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.*;
+import java.util.concurrent.locks.LockSupport;
+
+public class MultiPaperExecutor extends Thread implements ExecutorService {
+    private final Queue<Runnable> queue;
+    private volatile boolean isShutdown = false;
+    private volatile boolean isRunningTasks = false;
+
+    public MultiPaperExecutor() {
+        this(new ConcurrentLinkedQueue<>());
+    }
+
+    /**
+     * @param queue Must be a thread-safe queue implementation
+     */
+    public MultiPaperExecutor(Queue<Runnable> queue) {
+        this.queue = queue;
+        start();
+    }
+
+    @Override
+    public void execute(@NotNull Runnable command) {
+        queue.add(command);
+
+        if (!isRunningTasks) {
+            LockSupport.unpark(this);
+        }
+    }
+
+    @Override
+    public void shutdown() {
+        isShutdown = true;
+    }
+
+    @NotNull
+    @Override
+    public List<Runnable> shutdownNow() {
+        shutdown();
+
+        List<Runnable> tasksRemaining = new ArrayList<>();
+        Runnable task;
+        while ((task = queue.poll()) != null) {
+            tasksRemaining.add(task);
+        }
+
+        return tasksRemaining;
+    }
+
+    @Override
+    public boolean isShutdown() {
+        return isShutdown;
+    }
+
+    @Override
+    public boolean isTerminated() {
+        return isShutdown;
+    }
+
+    @Override
+    public boolean awaitTermination(long timeout, @NotNull TimeUnit unit) {
+        throw new UnsupportedOperationException();
+    }
+
+    @NotNull
+    @Override
+    public <T> Future<T> submit(@NotNull Callable<T> task) {
+        throw new UnsupportedOperationException();
+    }
+
+    @NotNull
+    @Override
+    public <T> Future<T> submit(@NotNull Runnable task, T result) {
+        throw new UnsupportedOperationException();
+    }
+
+    @NotNull
+    @Override
+    public Future<?> submit(@NotNull Runnable task) {
+        throw new UnsupportedOperationException();
+    }
+
+    @NotNull
+    @Override
+    public <T> List<Future<T>> invokeAll(@NotNull Collection<? extends Callable<T>> tasks) {
+        throw new UnsupportedOperationException();
+    }
+
+    @NotNull
+    @Override
+    public <T> List<Future<T>> invokeAll(@NotNull Collection<? extends Callable<T>> tasks, long timeout, @NotNull TimeUnit unit) {
+        throw new UnsupportedOperationException();
+    }
+
+    @NotNull
+    @Override
+    public <T> T invokeAny(@NotNull Collection<? extends Callable<T>> tasks) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public <T> T invokeAny(@NotNull Collection<? extends Callable<T>> tasks, long timeout, @NotNull TimeUnit unit) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void run() {
+        while (!isShutdown) {
+            isRunningTasks = true;
+            while (!queue.isEmpty()) {
+                while (!queue.isEmpty()) {
+                    Runnable task = queue.remove();
+
+                    task.run();
+                }
+
+                // Wait 1 ms then check for tasks again, this saves us having to call unpark too many times
+                LockSupport.parkNanos("short waiting for tasks", 1000000L);
+            }
+            isRunningTasks = false;
+
+            // 1 second park, on an active server this should always be unparked before it even reaches 1 second
+            LockSupport.parkNanos("long waiting for tasks", 1000000000L);
+        }
+    }
+}
